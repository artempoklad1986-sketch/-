<?php
/**
 * üî• –£–°–¢–ê–ù–û–í–©–ò–ö AQUA-CMS v1.0
 * –ü–æ–ª–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
 */

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ª–∏ —É–∂–µ —Å–∏—Å—Ç–µ–º–∞
if (file_exists('config/database.php') && file_exists('data/data.json')) {
    die('‚ùå –°–∏—Å—Ç–µ–º–∞ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –£–¥–∞–ª–∏—Ç–µ config/database.php –¥–ª—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏.');
}

session_start();

$step = $_GET['step'] ?? 1;
$action = $_POST['action'] ?? '';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
if ($_POST) {
    switch ($action) {
        case 'check_requirements':
            $step = 2;
            break;
        case 'setup_config':
            if (setupConfig($_POST)) {
                $step = 3;
            }
            break;
        case 'create_structure':
            if (createDirectoryStructure()) {
                $step = 4;
            }
            break;
        case 'install_modules':
            if (installAllModules()) {
                $step = 5;
            }
            break;
        case 'setup_data':
            if (setupInitialData($_POST)) {
                $step = 6; // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            }
            break;
    }
}

?><!DOCTYPE html>
<html lang='ru'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>üê† –£—Å—Ç–∞–Ω–æ–≤–∫–∞ AquaCMS</title>
    <link href='https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap' rel='stylesheet'>
    <style>
        :root {
            --primary: #2ecc71;
            --secondary: #27ae60; 
            --danger: #e74c3c;
            --warning: #f39c12;
            --info: #3498db;
            --dark: #2c3e50;
            --light: #ecf0f1;
            --border: #dee2e6;
        }

        * { margin: 0; padding: 0; box-sizing: border-box; }

        body {
            font-family: 'Inter', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }

        .install-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.2);
            width: 100%;
            max-width: 800px;
            overflow: hidden;
        }

        .install-header {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
            padding: 30px;
            text-align: center;
        }

        .logo {
            font-size: 60px;
            margin-bottom: 15px;
            animation: float 3s ease-in-out infinite;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-10px); }
        }

        .install-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .install-subtitle {
            opacity: 0.9;
            font-size: 16px;
        }

        .progress-bar {
            height: 6px;
            background: rgba(255,255,255,0.2);
            margin-top: 20px;
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: white;
            transition: width 0.3s ease;
            border-radius: 3px;
        }

        .install-content {
            padding: 40px;
        }

        .step-title {
            font-size: 24px;
            color: var(--dark);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-label {
            display: block;
            font-weight: 600;
            color: var(--dark);
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--border);
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .form-input:focus {
            border-color: var(--primary);
            outline: none;
            box-shadow: 0 0 0 3px rgba(46, 204, 113, 0.1);
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 14px 28px;
            border: none;
            border-radius: 8px;
            font-size: 14px;
            font-weight: 600;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--secondary);
            transform: translateY(-2px);
        }

        .btn-success {
            background: var(--info);
            color: white;
        }

        .requirements-list {
            list-style: none;
            margin-bottom: 30px;
        }

        .requirement {
            display: flex;
            align-items: center;
            gap: 12px;
            padding: 12px;
            margin-bottom: 8px;
            border-radius: 8px;
            background: #f8f9fa;
        }

        .requirement.success {
            background: rgba(46, 204, 113, 0.1);
            color: var(--primary);
        }

        .requirement.error {
            background: rgba(231, 76, 60, 0.1);
            color: var(--danger);
        }

        .feature-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }

        .feature-card {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
        }

        .feature-icon {
            font-size: 30px;
            margin-bottom: 10px;
        }

        .success-message {
            text-align: center;
            padding: 40px 20px;
            color: var(--primary);
        }

        .success-icon {
            font-size: 80px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class='install-container'>
        <div class='install-header'>
            <div class='logo'>üê†</div>
            <h1 class='install-title'>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ AquaCMS</h1>
            <p class='install-subtitle'>–ú–æ–¥—É–ª—å–Ω–∞—è CMS –¥–ª—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–∏</p>
            <div class='progress-bar'>
                <div class='progress-fill' style='width: <?= ($step-1) * 20 ?>%'></div>
            </div>
        </div>

        <div class='install-content'>
            <?php renderInstallStep($step); ?>
        </div>
    </div>
</body>
</html>

<?php

// === –§–£–ù–ö–¶–ò–ò –£–°–¢–ê–ù–û–í–ö–ò ===

function renderInstallStep($step) {
    switch ($step) {
        case 1: renderWelcomeStep(); break;
        case 2: renderRequirementsStep(); break;  
        case 3: renderConfigStep(); break;
        case 4: renderStructureStep(); break;
        case 5: renderModulesStep(); break;
        case 6: renderCompleteStep(); break;
    }
}

function renderWelcomeStep() {
    ?>
    <div class='step-title'>
        üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤–∫—É AquaCMS
    </div>

    <p style='margin-bottom: 30px; line-height: 1.6; color: #666;'>
        –≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞—Å—Ç –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–∏ —Å –º–æ—â–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é –∏ –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
    </p>

    <div class='feature-grid'>
        <div class='feature-card'>
            <div class='feature-icon'>üõí</div>
            <h3>–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω</h3>
            <p>–ö–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –∑–∞–∫–∞–∑—ã</p>
        </div>
        <div class='feature-card'>
            <div class='feature-icon'>‚ö°</div>
            <h3>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h3>
            <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ –∑–∞–∫–∞–∑–∞–º–∏</p>
        </div>
        <div class='feature-card'>
            <div class='feature-icon'>üìä</div>
            <h3>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞</h3>
            <p>–ì—Ä–∞—Ñ–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç—ã –ø—Ä–æ–¥–∞–∂</p>
        </div>
        <div class='feature-card'>
            <div class='feature-icon'>üß©</div>
            <h3>–ú–æ–¥—É–ª—å–Ω–æ—Å—Ç—å</h3>
            <p>–†–∞—Å—à–∏—Ä—è–µ–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞</p>
        </div>
    </div>

    <form method='POST'>
        <input type='hidden' name='action' value='check_requirements'>
        <button type='submit' class='btn btn-primary btn-lg'>
            –ù–∞—á–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É ‚Üí
        </button>
    </form>
    <?php
}

function renderRequirementsStep() {
    $requirements = checkSystemRequirements();
    $allPassed = !in_array(false, array_column($requirements, 'status'));
    ?>
    <div class='step-title'>
        üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
    </div>

    <ul class='requirements-list'>
        <?php foreach ($requirements as $req): ?>
            <li class='requirement <?= $req['status'] ? 'success' : 'error' ?>'>
                <span><?= $req['status'] ? '‚úÖ' : '‚ùå' ?></span>
                <span><?= $req['name'] ?></span>
                <span style='margin-left: auto; font-size: 12px;'>
                    <?= $req['current'] ?>
                </span>
            </li>
        <?php endforeach; ?>
    </ul>

    <?php if ($allPassed): ?>
        <form method='POST'>
            <input type='hidden' name='action' value='setup_config'>
            <button type='submit' class='btn btn-primary'>
                –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É ‚Üí
            </button>
        </form>
    <?php else: ?>
        <p style='color: var(--danger); margin: 20px 0;'>
            ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–µ—Ä–∞.
        </p>
    <?php endif; ?>
    <?php
}

function renderConfigStep() {
    ?>
    <div class='step-title'>
        ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    </div>

    <form method='POST'>
        <input type='hidden' name='action' value='create_structure'>

        <div class='form-group'>
            <label class='form-label'>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞</label>
            <input type='text' name='site_name' class='form-input' value='–ê–∫–≤–∞–°–±–æ—Ä' required>
        </div>

        <div class='form-group'>
            <label class='form-label'>–û–ø–∏—Å–∞–Ω–∏–µ —Å–∞–π—Ç–∞</label>
            <input type='text' name='site_description' class='form-input' value='–ê–∫–≤–∞—Ä–∏—É–º—ã –∏ –∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–∏' required>
        </div>

        <div class='form-group'>
            <label class='form-label'>Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</label>
            <input type='email' name='admin_email' class='form-input' value='admin@akvasbor.ru' required>
        </div>

        <div class='form-group'>
            <label class='form-label'>–ü–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∫–∏</label>
            <input type='text' name='admin_password' class='form-input' value='admin123' required>
        </div>

        <button type='submit' class='btn btn-primary'>
            –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É ‚Üí
        </button>
    </form>
    <?php
}

function renderStructureStep() {
    ?>
    <div class='step-title'>
        üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    </div>

    <p>–°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –±–∞–∑–æ–≤—ã–µ —Ñ–∞–π–ª—ã...</p>

    <form method='POST'>
        <input type='hidden' name='action' value='install_modules'>
        <button type='submit' class='btn btn-primary'>
            –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª–∏ ‚Üí
        </button>
    </form>
    <?php
}

function renderModulesStep() {
    ?>
    <div class='step-title'>
        üß© –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π
    </div>

    <p>–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã...</p>

    <div class='feature-grid'>
        <div class='feature-card'>
            <div class='feature-icon'>üìä</div>
            <h4>Dashboard</h4>
            <p>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>
        </div>
        <div class='feature-card'>
            <div class='feature-icon'>üõçÔ∏è</div>
            <h4>Products</h4>
            <p>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>
        </div>
        <div class='feature-card'>
            <div class='feature-icon'>üìÇ</div>
            <h4>Categories</h4>
            <p>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>
        </div>
        <div class='feature-card'>
            <div class='feature-icon'>üõí</div>
            <h4>Orders</h4>
            <p>‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</p>
        </div>
    </div>

    <form method='POST'>
        <input type='hidden' name='action' value='setup_data'>
        <button type='submit' class='btn btn-primary'>
            –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚Üí
        </button>
    </form>
    <?php
}

function renderCompleteStep() {
    ?>
    <div class='success-message'>
        <div class='success-icon'>üéâ</div>
        <h2>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</h2>
        <p style='margin: 20px 0;'>AquaCMS —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.</p>

        <div style='display: flex; gap: 20px; justify-content: center; margin-top: 30px;'>
            <a href='index.php' class='btn btn-primary'>
                üè† –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
            </a>
            <a href='admin.php' class='btn btn-success'>
                ‚ö° –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            </a>
        </div>

        <div style='margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; text-align: left;'>
            <h4>üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</h4>
            <p><strong>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</strong> admin.php</p>
            <p><strong>–ü–∞—Ä–æ–ª—å:</strong> admin123</p>
            <p><strong>Email:</strong> admin@akvasbor.ru</p>
        </div>
    </div>
    <?php
}

// === –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò –ò –£–°–¢–ê–ù–û–í–ö–ò ===

function checkSystemRequirements() {
    return [
        [
            'name' => 'PHP –≤–µ—Ä—Å–∏—è >= 7.4',
            'status' => version_compare(PHP_VERSION, '7.4.0') >= 0,
            'current' => PHP_VERSION
        ],
        [
            'name' => '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ JSON',
            'status' => extension_loaded('json'),
            'current' => extension_loaded('json') ? '–ï—Å—Ç—å' : '–ù–µ—Ç'
        ],
        [
            'name' => '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ GD (–¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)',
            'status' => extension_loaded('gd'),
            'current' => extension_loaded('gd') ? '–ï—Å—Ç—å' : '–ù–µ—Ç'
        ],
        [
            'name' => '–ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é',
            'status' => is_writable('.'),
            'current' => is_writable('.') ? '–ï—Å—Ç—å' : '–ù–µ—Ç'
        ]
    ];
}

function setupConfig($data) {
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    $configDir = 'config';
    if (!file_exists($configDir)) {
        mkdir($configDir, 0755, true);
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∞–π—Ç–∞
    $settings = [
        'site_name' => $data['site_name'],
        'site_description' => $data['site_description'],
        'admin_email' => $data['admin_email'],
        'admin_password' => $data['admin_password'],
        'installed' => true,
        'version' => '1.0',
        'install_date' => date('Y-m-d H:i:s')
    ];

    return file_put_contents('config/settings.php', "<?php\nreturn " . var_export($settings, true) . ";\n");
}

function createDirectoryStructure() {
    $dirs = [
        'config', 'core', 'modules', 'modules/admin', 'modules/frontend', 'modules/api',
        'modules/admin/dashboard', 'modules/admin/products', 'modules/admin/categories',
        'modules/admin/orders', 'modules/admin/reviews', 'modules/admin/analytics',
        'modules/admin/news', 'modules/admin/settings',
        'modules/frontend/catalog', 'modules/frontend/cart', 'modules/frontend/search',
        'modules/frontend/pages', 'templates', 'templates/admin', 'templates/frontend',
        'assets', 'assets/css', 'assets/js', 'assets/images', 'uploads', 'uploads/products',
        'uploads/news', 'data', 'logs'
    ];

    foreach ($dirs as $dir) {
        if (!file_exists($dir)) {
            mkdir($dir, 0755, true);
        }
    }

    return true;
}

function installAllModules() {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
    createCoreFiles();
    createAdminModules();  
    createFrontendModules();

    return true;
}

function createCoreFiles() {
    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã —è–¥—Ä–∞ —Å–∏—Å—Ç–µ–º—ã

    // Database.php
    file_put_contents('core/Database.php', '<?php
/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
 */
class Database {
    private static $instance = null;

    public static function getInstance() {
        if (self::$instance === null) {
            // –ó–∞–≥–ª—É—à–∫–∞ - –≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã
            self::$instance = new self();
        }
        return self::$instance;
    }

    // –ú–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –±—É–¥—É—Ç –∑–¥–µ—Å—å
}');

    // ModuleLoader.php  
    file_put_contents('core/ModuleLoader.php', '<?php
/**
 * –ó–∞–≥—Ä—É–∑—á–∏–∫ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
class ModuleLoader {
    private static $loadedModules = [];

    public static function loadModule($name, $type = "admin") {
        $modulePath = "modules/{$type}/{$name}";
        if (file_exists("{$modulePath}/module.php")) {
            require_once "{$modulePath}/module.php";
            self::$loadedModules[] = $name;
            return true;
        }
        return false;
    }

    public static function getLoadedModules() {
        return self::$loadedModules;
    }
}');
}

function createAdminModules() {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –∞–¥–º–∏–Ω–∫–∏

    $modules = [
        'dashboard' => '–î–∞—à–±–æ—Ä–¥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'products' => '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏', 
        'categories' => '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
        'orders' => '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏',
        'reviews' => '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏',
        'analytics' => '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
        'news' => '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏',
        'settings' => '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã'
    ];

    foreach ($modules as $module => $description) {
        $modulePath = "modules/admin/{$module}";

        // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –º–æ–¥—É–ª—è
        file_put_contents("{$modulePath}/module.php", "<?php
/**
 * –ú–æ–¥—É–ª—å: {$description}
 */

class " . ucfirst($module) . "Module {
    public static function render() {
        echo '<h2>{$description}</h2>';
        echo '<p>–ú–æ–¥—É–ª—å –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</p>';
    }
}");

        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
        file_put_contents("{$modulePath}/config.php", "<?php
return [
    'name' => '{$module}',
    'title' => '{$description}',
    'version' => '1.0',
    'author' => 'AquaCMS',
    'icon' => 'fas fa-cog'
];");
    }
}

function createFrontendModules() {
    // –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞

    $modules = [
        'catalog' => '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤',
        'cart' => '–ö–æ—Ä–∑–∏–Ω–∞ –∏ –∑–∞–∫–∞–∑—ã',
        'search' => '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤',
        'pages' => '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
    ];

    foreach ($modules as $module => $description) {
        $modulePath = "modules/frontend/{$module}";

        file_put_contents("{$modulePath}/module.php", "<?php
/**
 * –§—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–¥—É–ª—å: {$description}
 */

class Frontend" . ucfirst($module) . "Module {
    public static function render() {
        echo '<h2>{$description}</h2>';
    }
}");
    }
}

function setupInitialData($data) {
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤

    // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ admin.txt, data.txt, index.txt
    // –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ–º –∏—Ö –ø–æ–¥ –º–æ–¥—É–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É

    return createInitialDataFiles();
}

function createInitialDataFiles() {
    // –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–¥–∏–º —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ data.txt
    // –≠—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö
    return true;
}
<?php
/**
 * üß© –ó–ê–ì–†–£–ó–ß–ò–ö –ú–û–î–£–õ–ï–ô AquaCMS
 * –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–æ–¥—É–ª–µ–π
 */

class ModuleLoader {
    private static $instance = null;
    private $loadedModules = [];
    private $moduleConfig = [];
    private $hooks = [];

    public static function getInstance() {
        if (self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
     */
    public function loadModule($name, $type = 'admin') {
        $moduleKey = "{$type}_{$name}";

        if (isset($this->loadedModules[$moduleKey])) {
            return $this->loadedModules[$moduleKey];
        }

        $modulePath = __DIR__ . "/../modules/{$type}/{$name}";

        if (!file_exists($modulePath)) {
            throw new Exception("–ú–æ–¥—É–ª—å {$name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {$modulePath}");
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
        $configFile = "{$modulePath}/config.php";
        if (file_exists($configFile)) {
            $this->moduleConfig[$moduleKey] = require $configFile;
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –º–æ–¥—É–ª—è
        $moduleFile = "{$modulePath}/module.php";
        if (file_exists($moduleFile)) {
            require_once $moduleFile;

            $className = $this->getModuleClassName($name, $type);
            if (class_exists($className)) {
                $moduleInstance = new $className();
                $this->loadedModules[$moduleKey] = $moduleInstance;

                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
                if (method_exists($moduleInstance, 'init')) {
                    $moduleInstance->init();
                }

                return $moduleInstance;
            }
        }

        throw new Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å {$name}");
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
     */
    public function getLoadedModules($type = null) {
        if ($type === null) {
            return $this->loadedModules;
        }

        $filtered = [];
        foreach ($this->loadedModules as $key => $module) {
            if (strpos($key, $type . '_') === 0) {
                $filtered[$key] = $module;
            }
        }
        return $filtered;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥—É–ª—è
     */
    public function getModuleConfig($name, $type = 'admin') {
        $moduleKey = "{$type}_{$name}";
        return $this->moduleConfig[$moduleKey] ?? [];
    }

    /**
     * –°–∏—Å—Ç–µ–º–∞ —Ö—É–∫–æ–≤ –¥–ª—è –º–æ–¥—É–ª–µ–π
     */
    public function addHook($hookName, $callback, $priority = 10) {
        if (!isset($this->hooks[$hookName])) {
            $this->hooks[$hookName] = [];
        }

        $this->hooks[$hookName][] = [
            'callback' => $callback,
            'priority' => $priority
        ];

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        usort($this->hooks[$hookName], function($a, $b) {
            return $a['priority'] - $b['priority'];
        });
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ö—É–∫
     */
    public function executeHook($hookName, $data = null) {
        if (!isset($this->hooks[$hookName])) {
            return $data;
        }

        foreach ($this->hooks[$hookName] as $hook) {
            $data = call_user_func($hook['callback'], $data);
        }

        return $data;
    }

    /**
     * –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
     */
    public function loadAllModules($type = 'admin') {
        $modulesPath = __DIR__ . "/../modules/{$type}";

        if (!is_dir($modulesPath)) {
            return [];
        }

        $modules = [];
        $directories = array_diff(scandir($modulesPath), ['.', '..']);

        foreach ($directories as $dir) {
            if (is_dir("{$modulesPath}/{$dir}")) {
                try {
                    $modules[$dir] = $this->loadModule($dir, $type);
                } catch (Exception $e) {
                    error_log("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è {$dir}: " . $e->getMessage());
                }
            }
        }

        return $modules;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –º–æ–¥—É–ª—è
     */
    public function renderModule($name, $type = 'admin', $params = []) {
        try {
            $module = $this->loadModule($name, $type);

            if (method_exists($module, 'render')) {
                return $module->render($params);
            }

            return "–ú–æ–¥—É–ª—å {$name} –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–æ –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ render()";

        } catch (Exception $e) {
            return "–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –º–æ–¥—É–ª—è {$name}: " . $e->getMessage();
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    public function syncModules() {
        $syncLog = [];

        foreach ($this->loadedModules as $key => $module) {
            if (method_exists($module, 'sync')) {
                try {
                    $result = $module->sync();
                    $syncLog[$key] = $result;
                } catch (Exception $e) {
                    $syncLog[$key] = ['error' => $e->getMessage()];
                }
            }
        }

        return $syncLog;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –∫–ª–∞—Å—Å–∞ –º–æ–¥—É–ª—è
     */
    private function getModuleClassName($name, $type) {
        $prefix = ($type === 'admin') ? 'Admin' : ucfirst($type);
        return $prefix . ucfirst($name) . 'Module';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–æ–¥—É–ª—è
     */
    public function checkDependencies($name, $type = 'admin') {
        $config = $this->getModuleConfig($name, $type);

        if (empty($config['dependencies'])) {
            return true;
        }

        foreach ($config['dependencies'] as $dependency) {
            $depKey = "{$type}_{$dependency}";
            if (!isset($this->loadedModules[$depKey])) {
                return false;
            }
        }

        return true;
    }
}
<?php
/**
 * üõçÔ∏è –ú–û–î–£–õ–¨ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê–ú–ò
 * –ü–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ admin.txt
 */

class AdminProductsModule {
    private $dataFile;
    private $uploadsDir;

    public function __construct() {
        $this->dataFile = __DIR__ . '/../../../data/products.json';
        $this->uploadsDir = __DIR__ . '/../../../uploads/products/';

        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if (!is_dir(dirname($this->dataFile))) {
            mkdir(dirname($this->dataFile), 0755, true);
        }
        if (!is_dir($this->uploadsDir)) {
            mkdir($this->uploadsDir, 0755, true);
        }
    }

    public function init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
        $this->initializeData();
    }

    /**
     * –†–µ–Ω–¥–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
     */
    public function render($params = []) {
        $action = $_GET['action'] ?? 'list';
        $productId = $_GET['product_id'] ?? null;

        // AJAX –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if (isset($_POST['ajax'])) {
            return $this->handleAjax();
        }

        switch ($action) {
            case 'list':
                return $this->renderProductsList();
            case 'add':
                return $this->renderProductForm();
            case 'edit':
                return $this->renderProductForm($productId);
            case 'delete':
                return $this->deleteProduct($productId);
            default:
                return $this->renderProductsList();
        }
    }

    /**
     * –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function renderProductsList() {
        $products = $this->getProducts();
        $categories = $this->getCategories();
        $stats = $this->getProductsStats();

        ob_start();
        ?>
        <div class="products-management">
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ -->
            <div class="stats-grid">
                <div class="stat-card stat-primary">
                    <div class="stat-value"><?= $stats['total'] ?></div>
                    <div class="stat-label">–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</div>
                    <div class="stat-icon"><i class="fas fa-box"></i></div>
                </div>
                <div class="stat-card stat-success">
                    <div class="stat-value"><?= $stats['active'] ?></div>
                    <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
                    <div class="stat-icon"><i class="fas fa-eye"></i></div>
                </div>
                <div class="stat-card stat-warning">
                    <div class="stat-value"><?= $stats['featured'] ?></div>
                    <div class="stat-label">–ü–æ–ø—É–ª—è—Ä–Ω—ã—Ö</div>
                    <div class="stat-icon"><i class="fas fa-star"></i></div>
                </div>
                <div class="stat-card stat-danger">
                    <div class="stat-value"><?= $stats['low_stock'] ?></div>
                    <div class="stat-label">–ú–∞–ª–æ —Ç–æ–≤–∞—Ä–∞</div>
                    <div class="stat-icon"><i class="fas fa-exclamation-triangle"></i></div>
                </div>
            </div>

            <!-- –î–µ–π—Å—Ç–≤–∏—è –∏ —Ñ–∏–ª—å—Ç—Ä—ã -->
            <div class="actions-bar">
                <div class="actions-left">
                    <button class="btn btn-success btn-lg" onclick="openProductModal()">
                        <i class="fas fa-plus"></i>
                        –ú–ï–ì–ê –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                    </button>
                    <button class="btn btn-outline" onclick="importProducts()">
                        <i class="fas fa-upload"></i>
                        –ò–º–ø–æ—Ä—Ç
                    </button>
                </div>

                <div class="actions-right">
                    <div class="search-group">
                        <input type="text" placeholder="–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤..." class="form-control" 
                               onkeyup="searchProducts(this.value)" id="searchInput">
                        <i class="fas fa-search"></i>
                    </div>
                    <select class="form-select" onchange="filterByCategory(this.value)">
                        <option value="">–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                        <?php foreach ($categories as $category): ?>
                            <option value="<?= $category['id'] ?>">
                                <?= $category['icon'] ?> <?= htmlspecialchars($category['name']) ?>
                            </option>
                        <?php endforeach; ?>
                    </select>
                </div>
            </div>

            <!-- –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
            <div class="bulk-actions" id="bulkActions" style="display: none;">
                <div class="bulk-info">
                    <span id="selectedCount">0</span> —Ç–æ–≤–∞—Ä–æ–≤ –≤—ã–±—Ä–∞–Ω–æ
                </div>
                <div class="bulk-buttons">
                    <button class="btn btn-success btn-sm" onclick="bulkAction('activate')">
                        <i class="fas fa-eye"></i> –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-warning btn-sm" onclick="bulkAction('deactivate')">
                        <i class="fas fa-eye-slash"></i> –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                    </button>
                    <button class="btn btn-info btn-sm" onclick="bulkAction('feature')">
                        <i class="fas fa-star"></i> –í –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
                    </button>
                    <button class="btn btn-danger btn-sm" onclick="bulkAction('delete')">
                        <i class="fas fa-trash"></i> –£–¥–∞–ª–∏—Ç—å
                    </button>
                </div>
            </div>

            <!-- –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ -->
            <div class="table-container">
                <table class="table table-striped" id="productsTable">
                    <thead>
                        <tr>
                            <th width="40">
                                <input type="checkbox" onchange="toggleAllProducts(this.checked)" id="selectAll">
                            </th>
                            <th width="80">–§–æ—Ç–æ</th>
                            <th>–¢–æ–≤–∞—Ä</th>
                            <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                            <th>–¶–µ–Ω–∞</th>
                            <th>–û—Å—Ç–∞—Ç–æ–∫</th>
                            <th>–°—Ç–∞—Ç—É—Å</th>
                            <th width="200">–î–µ–π—Å—Ç–≤–∏—è</th>
                        </tr>
                    </thead>
                    <tbody>
                        <?php foreach ($products as $product): ?>
                            <tr data-id="<?= $product['id'] ?>" data-category="<?= $product['category_id'] ?>" 
                                data-name="<?= strtolower($product['name']) ?>" class="product-row">
                                <td>
                                    <input type="checkbox" class="product-checkbox" value="<?= $product['id'] ?>" 
                                           onchange="updateBulkActions()">
                                </td>
                                <td>
                                    <div class="product-thumb">
                                        <?php if (!empty($product['images'])): ?>
                                            <img src="<?= htmlspecialchars($product['images'][0]) ?>" 
                                                 alt="<?= htmlspecialchars($product['name']) ?>"
                                                 onclick="previewImage('<?= htmlspecialchars($product['images'][0]) ?>')">
                                        <?php else: ?>
                                            <div class="no-image">
                                                <i class="fas fa-image"></i>
                                            </div>
                                        <?php endif; ?>
                                    </div>
                                </td>
                                <td>
                                    <div class="product-info">
                                        <h4 class="product-name" onclick="editProduct(<?= $product['id'] ?>)" title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä">
                                            <?= htmlspecialchars($product['name']) ?>
                                        </h4>
                                        <div class="product-meta">
                                            <span class="sku">SKU: <?= htmlspecialchars($product['sku']) ?></span>
                                            <span class="id">ID: <?= $product['id'] ?></span>
                                        </div>
                                        <?php if ($product['short_description']): ?>
                                            <div class="product-excerpt">
                                                <?= htmlspecialchars(mb_substr($product['short_description'], 0, 100)) ?>
                                                <?= mb_strlen($product['short_description']) > 100 ? '...' : '' ?>
                                            </div>
                                        <?php endif; ?>
                                        <div class="product-badges">
                                            <?php if ($product['is_featured']): ?>
                                                <span class="badge badge-warning">üî• –•–ò–¢</span>
                                            <?php endif; ?>
                                            <?php if ($product['is_new']): ?>
                                                <span class="badge badge-info">‚ú® –ù–û–í–ò–ù–ö–ê</span>
                                            <?php endif; ?>
                                            <?php if ($product['old_price'] > $product['price']): ?>
                                                <span class="badge badge-danger">üè∑Ô∏è –°–ö–ò–î–ö–ê</span>
                                            <?php endif; ?>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="category-badge">
                                        <?= htmlspecialchars($product['category'] ?? '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') ?>
                                    </span>
                                </td>
                                <td>
                                    <div class="price-info">
                                        <div class="current-price">
                                            <?= number_format($product['price'], 0, '', ' ') ?> ‚ÇΩ
                                        </div>
                                        <?php if ($product['old_price'] && $product['old_price'] > $product['price']): ?>
                                            <div class="old-price">
                                                <?= number_format($product['old_price'], 0, '', ' ') ?> ‚ÇΩ
                                            </div>
                                            <div class="discount">
                                                -<?= round((1 - $product['price'] / $product['old_price']) * 100) ?>%
                                            </div>
                                        <?php endif; ?>
                                    </div>
                                </td>
                                <td>
                                    <div class="stock-info">
                                        <span class="stock-value <?= $product['stock'] <= 0 ? 'out-of-stock' : ($product['stock'] <= 5 ? 'low-stock' : 'in-stock') ?>">
                                            <?= $product['stock'] ?> —à—Ç
                                        </span>
                                        <?php if ($product['stock'] <= 5 && $product['stock'] > 0): ?>
                                            <div class="stock-warning">–ú–∞–ª–æ —Ç–æ–≤–∞—Ä–∞!</div>
                                        <?php elseif ($product['stock'] <= 0): ?>
                                            <div class="stock-error">–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</div>
                                        <?php endif; ?>
                                    </div>
                                </td>
                                <td>
                                    <div class="status-toggle">
                                        <label class="switch">
                                            <input type="checkbox" <?= $product['is_active'] ? 'checked' : '' ?>
                                                   onchange="toggleProductStatus(<?= $product['id'] ?>, this.checked)">
                                            <span class="slider"></span>
                                        </label>
                                        <span class="status-label <?= $product['is_active'] ? 'active' : 'inactive' ?>">
                                            <?= $product['is_active'] ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–°–∫—Ä—ã—Ç' ?>
                                        </span>
                                    </div>
                                </td>
                                <td>
                                    <div class="action-buttons">
                                        <button class="btn btn-primary btn-sm" onclick="editProduct(<?= $product['id'] ?>)" 
                                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-info btn-sm" onclick="duplicateProduct(<?= $product['id'] ?>)" 
                                                title="–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å">
                                            <i class="fas fa-copy"></i>
                                        </button>
                                        <button class="btn btn-success btn-sm" 
                                                onclick="window.open('index.php?page=product&id=<?= $product['id'] ?>', '_blank')" 
                                                title="–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–∞ —Å–∞–π—Ç–µ">
                                            <i class="fas fa-eye"></i>
                                        </button>
                                        <button class="btn btn-warning btn-sm" onclick="manageImages(<?= $product['id'] ?>)" 
                                                title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏">
                                            <i class="fas fa-images"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm" onclick="deleteProduct(<?= $product['id'] ?>)" 
                                                title="–£–¥–∞–ª–∏—Ç—å">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- –ú–ï–ì–ê –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ -->
        <div class="mega-modal" id="productModal">
            <div class="mega-modal-dialog">
                <div class="mega-modal-header">
                    <h3 class="mega-modal-title">
                        <i class="fas fa-box"></i>
                        <span id="modalTitle">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä</span>
                    </h3>
                    <button type="button" class="mega-modal-close" onclick="closeProductModal()">
                        &times;
                    </button>
                </div>

                <form id="productForm" enctype="multipart/form-data">
                    <input type="hidden" name="action" value="save_product" id="formAction">
                    <input type="hidden" name="product_id" id="productId">
                    <input type="hidden" name="ajax" value="1">

                    <div class="mega-modal-body">
                        <!-- –í–∫–ª–∞–¥–∫–∏ –º–æ–¥–∞–ª–∫–∏ -->
                        <div class="modal-tabs">
                            <button type="button" class="tab-button active" data-tab="basic">
                                <i class="fas fa-info-circle"></i>
                                –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                            </button>
                            <button type="button" class="tab-button" data-tab="media">
                                <i class="fas fa-images"></i>
                                –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            </button>
                            <button type="button" class="tab-button" data-tab="seo">
                                <i class="fas fa-search"></i>
                                SEO –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
                            </button>
                            <button type="button" class="tab-button" data-tab="pricing">
                                <i class="fas fa-dollar-sign"></i>
                                –¶–µ–Ω—ã –∏ —Å–∫–ª–∞–¥
                            </button>
                            <button type="button" class="tab-button" data-tab="advanced">
                                <i class="fas fa-cogs"></i>
                                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                            </button>
                        </div>

                        <div class="modal-content">
                            <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                            <div class="tab-panel active" data-panel="basic">
                                <div class="ai-assistant">
                                    <div class="ai-title">
                                        <i class="fas fa-robot"></i>
                                        AI –ü–æ–º–æ—â–Ω–∏–∫
                                    </div>
                                    <div class="ai-suggestions">
                                        <button type="button" class="ai-suggestion" onclick="generateProductName()">
                                            –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ
                                        </button>
                                        <button type="button" class="ai-suggestion" onclick="generateDescription()">
                                            –°–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
                                        </button>
                                        <button type="button" class="ai-suggestion" onclick="suggestCategory()">
                                            –ü–æ–¥–æ–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                                        </button>
                                        <button type="button" class="ai-suggestion" onclick="generateSEO()">
                                            –°–æ–∑–¥–∞—Ç—å SEO
                                        </button>
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label required">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
                                        <input type="text" name="name" class="form-control" required
                                               placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label required">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                                        <select name="category_id" class="form-select" required>
                                            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                            <?php foreach ($categories as $category): ?>
                                                <option value="<?= $category['id'] ?>">
                                                    <?= $category['icon'] ?> <?= htmlspecialchars($category['name']) ?>
                                                </option>
                                            <?php endforeach; ?>
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                                    <textarea name="short_description" class="form-control" rows="3"
                                              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞"></textarea>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                                    <textarea name="description" class="form-control" rows="6"
                                              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"></textarea>
                                </div>

                                <div class="form-row">
                                    <div class="form-check">
                                        <input type="checkbox" name="is_featured" id="isFeatured" class="form-check-input">
                                        <label for="isFeatured" class="form-check-label">
                                            üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä
                                        </label>
                                    </div>
                                    <div class="form-check">
                                        <input type="checkbox" name="is_new" id="isNew" class="form-check-input">
                                        <label for="isNew" class="form-check-label">
                                            ‚ú® –ù–æ–≤–∏–Ω–∫–∞
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <!-- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -->
                            <div class="tab-panel" data-panel="media">
                                <div class="form-group">
                                    <label class="form-label">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞</label>
                                    <div class="upload-area" id="uploadArea">
                                        <input type="file" name="images[]" multiple accept="image/*" 
                                               class="upload-input" id="imageInput">
                                        <div class="upload-placeholder">
                                            <i class="fas fa-cloud-upload-alt"></i>
                                            <p>–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
                                            <small>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, WEBP (–¥–æ 10MB –∫–∞–∂–¥–æ–µ)</small>
                                        </div>
                                    </div>
                                    <div class="images-preview" id="imagesPreview"></div>
                                </div>
                            </div>

                            <!-- SEO -->
                            <div class="tab-panel" data-panel="seo">
                                <div class="form-group">
                                    <label class="form-label">SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫</label>
                                    <input type="text" name="meta_title" class="form-control"
                                           placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤">
                                    <small class="form-hint">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: 50-60 —Å–∏–º–≤–æ–ª–æ–≤</small>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">SEO –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                                    <textarea name="meta_description" class="form-control" rows="3"
                                              placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–∏–∫–æ–≤"></textarea>
                                    <small class="form-hint">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–ª–∏–Ω–∞: 150-160 —Å–∏–º–≤–æ–ª–æ–≤</small>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</label>
                                    <input type="text" name="meta_keywords" class="form-control"
                                           placeholder="–∫–ª—é—á–µ–≤—ã–µ, —Å–ª–æ–≤–∞, —á–µ—Ä–µ–∑, –∑–∞–ø—è—Ç—É—é">
                                </div>

                                <div class="seo-preview">
                                    <h4>–ü—Ä–µ–≤—å—é –≤ –ø–æ–∏—Å–∫–æ–≤–∏–∫–µ:</h4>
                                    <div class="search-preview">
                                        <div class="preview-title" id="previewTitle">–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞</div>
                                        <div class="preview-url">https://akvasbor.ru/product/123</div>
                                        <div class="preview-description" id="previewDescription">–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</div>
                                    </div>
                                </div>
                            </div>

                            <!-- –¶–µ–Ω—ã –∏ —Å–∫–ª–∞–¥ -->
                            <div class="tab-panel" data-panel="pricing">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label required">–¶–µ–Ω–∞ (‚ÇΩ)</label>
                                        <input type="number" name="price" class="form-control" min="0" step="0.01" required
                                               placeholder="0.00">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
                                        <input type="number" name="old_price" class="form-control" min="0" step="0.01"
                                               placeholder="0.00">
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label required">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ</label>
                                        <input type="number" name="stock" class="form-control" min="0" value="1" required>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">–ê—Ä—Ç–∏–∫—É–ª (SKU)</label>
                                        <input type="text" name="sku" class="form-control" 
                                               placeholder="AQ-0001">
                                    </div>
                                </div>

                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">–í–µ—Å (–≥)</label>
                                        <input type="number" name="weight" class="form-control" min="0" value="100">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
                                        <select name="unit" class="form-select">
                                            <option value="—à—Ç">—à—Ç</option>
                                            <option value="–∫–≥">–∫–≥</option>
                                            <option value="–ª">–ª</option>
                                            <option value="–º">–º</option>
                                            <option value="–ø–∞—Ä–∞">–ø–∞—Ä–∞</option>
                                            <option value="—É–ø–∞–∫">—É–ø–∞–∫</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ -->
                            <div class="tab-panel" data-panel="advanced">
                                <div class="form-check">
                                    <input type="checkbox" name="is_active" id="isActive" class="form-check-input" checked>
                                    <label for="isActive" class="form-check-label">
                                        üëÅÔ∏è –¢–æ–≤–∞—Ä –∞–∫—Ç–∏–≤–µ–Ω (–≤–∏–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ)
                                    </label>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
                                    <input type="number" name="sort_order" class="form-control" value="0">
                                </div>

                                <div class="form-group">
                                    <label class="form-label">–¢–µ–≥–∏ —Ç–æ–≤–∞—Ä–∞</label>
                                    <input type="text" name="tags" class="form-control" 
                                           placeholder="–∞–∫–≤–∞—Ä–∏—É–º, —Ä—ã–±–∫–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è">
                                    <small class="form-hint">–ß–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é</small>
                                </div>

                                <div class="form-group">
                                    <label class="form-label">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (JSON)</label>
                                    <textarea name="attributes" class="form-control" rows="4"
                                              placeholder='{"—Ä–∞–∑–º–µ—Ä": "30x20x25", "–æ–±—ä–µ–º": "15–ª", "–º–∞—Ç–µ—Ä–∏–∞–ª": "—Å—Ç–µ–∫–ª–æ"}'></textarea>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="mega-modal-footer">
                        <button type="button" class="btn btn-secondary" onclick="closeProductModal()">
                            <i class="fas fa-times"></i>
                            –û—Ç–º–µ–Ω–∞
                        </button>
                        <button type="submit" class="btn btn-success btn-lg">
                            <i class="fas fa-save"></i>
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä
                        </button>
                    </div>
                </form>
            </div>
        </div>

        <style>
            .products-management {
                padding: 0;
            }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin-bottom: 30px;
            }

            .stat-card {
                background: #fff;
                padding: 25px;
                border-radius: 15px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
                position: relative;
                overflow: hidden;
                transition: all 0.3s ease;
            }

            .stat-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            }

            .stat-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 4px;
                background: linear-gradient(90deg, #667eea, #764ba2);
            }

            .stat-card.stat-success::before {
                background: linear-gradient(90deg, #2ecc71, #27ae60);
            }

            .stat-card.stat-warning::before {
                background: linear-gradient(90deg, #f39c12, #e67e22);
            }

            .stat-card.stat-danger::before {
                background: linear-gradient(90deg, #e74c3c, #c0392b);
            }

            .stat-value {
                font-size: 32px;
                font-weight: 700;
                margin-bottom: 5px;
                color: #2c3e50;
            }

            .stat-label {
                color: #7f8c8d;
                font-size: 14px;
                font-weight: 500;
            }

            .stat-icon {
                position: absolute;
                top: 20px;
                right: 20px;
                font-size: 24px;
                color: rgba(46, 204, 113, 0.3);
            }

            .actions-bar {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
                flex-wrap: wrap;
                gap: 15px;
            }

            .actions-left, .actions-right {
                display: flex;
                gap: 15px;
                align-items: center;
            }

            .search-group {
                position: relative;
            }

            .search-group input {
                padding-right: 40px;
                min-width: 250px;
            }

            .search-group i {
                position: absolute;
                right: 15px;
                top: 50%;
                transform: translateY(-50%);
                color: #999;
            }

            .bulk-actions {
                background: #f8f9fa;
                padding: 15px 20px;
                border-radius: 10px;
                margin-bottom: 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                border: 1px solid #e9ecef;
            }

            .bulk-info {
                font-weight: 500;
                color: #495057;
            }

            .bulk-buttons {
                display: flex;
                gap: 10px;
            }

            .table-container {
                background: #fff;
                border-radius: 15px;
                overflow: hidden;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

            .table {
                width: 100%;
                border-collapse: collapse;
                font-size: 14px;
            }

            .table th {
                background: linear-gradient(135deg, #f8f9fa, #e9ecef);
                padding: 15px;
                text-align: left;
                font-weight: 600;
                color: #495057;
                border: none;
                position: sticky;
                top: 0;
                z-index: 10;
            }

            .table td {
                padding: 15px;
                border-bottom: 1px solid #f8f9fa;
                vertical-align: middle;
            }

            .table tr:hover {
                background: rgba(102, 126, 234, 0.05);
            }

            .product-thumb {
                width: 60px;
                height: 60px;
                border-radius: 8px;
                overflow: hidden;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .product-thumb:hover {
                transform: scale(1.1);
            }

            .product-thumb img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .no-image {
                width: 100%;
                height: 100%;
                background: #f8f9fa;
                display: flex;
                align-items: center;
                justify-content: center;
                color: #999;
                font-size: 20px;
            }

            .product-info {
                min-width: 200px;
            }

            .product-name {
                font-size: 16px;
                font-weight: 600;
                margin-bottom: 5px;
                cursor: pointer;
                transition: color 0.3s ease;
            }

            .product-name:hover {
                color: #667eea;
            }

            .product-meta {
                font-size: 12px;
                color: #999;
                margin-bottom: 8px;
            }

            .product-meta .sku, .product-meta .id {
                margin-right: 15px;
            }

            .product-excerpt {
                font-size: 13px;
                color: #666;
                line-height: 1.4;
                margin-bottom: 10px;
            }

            .product-badges {
                display: flex;
                gap: 5px;
                flex-wrap: wrap;
            }

            .badge {
                padding: 3px 8px;
                border-radius: 12px;
                font-size: 11px;
                font-weight: 500;
            }

            .badge-warning {
                background: rgba(243, 156, 18, 0.1);
                color: #f39c12;
            }

            .badge-info {
                background: rgba(52, 152, 219, 0.1);
                color: #3498db;
            }

            .badge-danger {
                background: rgba(231, 76, 60, 0.1);
                color: #e74c3c;
            }

            .category-badge {
                padding: 5px 12px;
                background: rgba(102, 126, 234, 0.1);
                color: #667eea;
                border-radius: 15px;
                font-size: 12px;
                font-weight: 500;
            }

            .price-info {
                text-align: right;
            }

            .current-price {
                font-size: 16px;
                font-weight: 700;
                color: #2ecc71;
                margin-bottom: 3px;
            }

            .old-price {
                font-size: 13px;
                color: #999;
                text-decoration: line-through;
                margin-bottom: 3px;
            }

            .discount {
                font-size: 11px;
                color: #e74c3c;
                font-weight: 600;
            }

            .stock-info {
                text-align: center;
            }

            .stock-value {
                padding: 5px 10px;
                border-radius: 15px;
                font-size: 13px;
                font-weight: 600;
            }

            .stock-value.in-stock {
                background: rgba(46, 204, 113, 0.1);
                color: #2ecc71;
            }

            .stock-value.low-stock {
                background: rgba(243, 156, 18, 0.1);
                color: #f39c12;
            }

            .stock-value.out-of-stock {
                background: rgba(231, 76, 60, 0.1);
                color: #e74c3c;
            }

            .stock-warning, .stock-error {
                font-size: 11px;
                margin-top: 3px;
            }

            .stock-warning {
                color: #f39c12;
            }

            .stock-error {
                color: #e74c3c;
            }

            .status-toggle {
                text-align: center;
            }

            .switch {
                position: relative;
                display: inline-block;
                width: 50px;
                height: 26px;
                margin-bottom: 5px;
            }

            .switch input {
                opacity: 0;
                width: 0;
                height: 0;
            }

            .slider {
                position: absolute;
                cursor: pointer;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background-color: #ccc;
                transition: .4s;
                border-radius: 26px;
            }

            .slider:before {
                position: absolute;
                content: "";
                height: 20px;
                width: 20px;
                left: 3px;
                bottom: 3px;
                background-color: white;
                transition: .4s;
                border-radius: 50%;
            }

            input:checked + .slider {
                background-color: #2ecc71;
            }

            input:checked + .slider:before {
                transform: translateX(24px);
            }

            .status-label {
                font-size: 12px;
                font-weight: 500;
            }

            .status-label.active {
                color: #2ecc71;
            }

            .status-label.inactive {
                color: #999;
            }

            .action-buttons {
                display: flex;
                gap: 5px;
                justify-content: center;
                flex-wrap: wrap;
            }

            .btn {
                padding: 8px 12px;
                border: none;
                border-radius: 6px;
                font-size: 12px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.3s ease;
                display: inline-flex;
                align-items: center;
                gap: 5px;
                text-decoration: none;
            }

            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            }

            .btn-primary {
                background: #667eea;
                color: white;
            }

            .btn-success {
                background: #2ecc71;
                color: white;
            }

            .btn-info {
                background: #3498db;
                color: white;
            }

            .btn-warning {
                background: #f39c12;
                color: white;
            }

            .btn-danger {
                background: #e74c3c;
                color: white;
            }

            .btn-secondary {
                background: #95a5a6;
                color: white;
            }

            .btn-outline {
                background: transparent;
                color: #667eea;
                border: 2px solid #667eea;
            }

            .btn-outline:hover {
                background: #667eea;
                color: white;
            }

            .btn-sm {
                padding: 6px 10px;
                font-size: 11px;
            }

            .btn-lg {
                padding: 14px 28px;
                font-size: 16px;
            }

            /* –ú–ï–ì–ê –ú–û–î–ê–õ–ö–ê */
            .mega-modal {
                display: none;
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0,0,0,0.7);
                z-index: 9999;
                align-items: center;
                justify-content: center;
                backdrop-filter: blur(5px);
            }

            .mega-modal.show {
                display: flex;
                animation: modalFadeIn 0.3s ease;
            }

            @keyframes modalFadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }

            .mega-modal-dialog {
                background: #fff;
                border-radius: 20px;
                max-width: 95vw;
                width: 1200px;
                max-height: 90vh;
                overflow: hidden;
                box-shadow: 0 20px 60px rgba(0,0,0,0.3);
                animation: modalSlideUp 0.3s ease;
                display: flex;
                flex-direction: column;
            }

            @keyframes modalSlideUp {
                from { transform: translateY(50px) scale(0.9); }
                to { transform: translateY(0) scale(1); }
            }

            .mega-modal-header {
                padding: 25px 30px;
                border-bottom: 2px solid #f8f9fa;
                background: linear-gradient(135deg, #f8f9fa, #fff);
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

            .mega-modal-title {
                font-size: 24px;
                font-weight: 700;
                color: #2c3e50;
                display: flex;
                align-items: center;
                gap: 12px;
            }

            .mega-modal-close {
                background: none;
                border: none;
                font-size: 28px;
                cursor: pointer;
                color: #999;
                padding: 10px;
                border-radius: 50%;
                width: 50px;
                height: 50px;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: all 0.3s ease;
            }

            .mega-modal-close:hover {
                background: #e74c3c;
                color: white;
                transform: rotate(90deg);
            }

            .mega-modal-body {
                flex: 1;
                display: flex;
                overflow: hidden;
            }

            .modal-tabs {
                width: 250px;
                background: #f8f9fa;
                border-right: 2px solid #e9ecef;
                display: flex;
                flex-direction: column;
            }

            .tab-button {
                padding: 20px;
                border: none;
                background: transparent;
                text-align: left;
                cursor: pointer;
                transition: all 0.3s ease;
                display: flex;
                align-items: center;
                gap: 12px;
                font-size: 14px;
                font-weight: 500;
                color: #666;
                border-bottom: 1px solid #e9ecef;
            }

            .tab-button:hover {
                background: rgba(102, 126, 234, 0.1);
                color: #667eea;
                padding-left: 30px;
            }

            .tab-button.active {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                font-weight: 600;
            }

            .modal-content {
                flex: 1;
                padding: 30px;
                overflow-y: auto;
            }

            .tab-panel {
                display: none;
            }

            .tab-panel.active {
                display: block;
                animation: fadeInUp 0.3s ease;
            }

            @keyframes fadeInUp {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }

            .ai-assistant {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                padding: 20px;
                border-radius: 15px;
                margin-bottom: 25px;
            }

            .ai-title {
                display: flex;
                align-items: center;
                gap: 8px;
                font-size: 16px;
                font-weight: 600;
                margin-bottom: 15px;
            }

            .ai-suggestions {
                display: flex;
                gap: 10px;
                flex-wrap: wrap;
            }

            .ai-suggestion {
                background: rgba(255,255,255,0.2);
                padding: 8px 15px;
                border: none;
                border-radius: 20px;
                color: white;
                font-size: 12px;
                cursor: pointer;
                transition: all 0.3s ease;
            }

            .ai-suggestion:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
            }

            .form-row {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 20px;
                margin-bottom: 20px;
            }

            .form-group {
                margin-bottom: 20px;
            }

            .form-label {
                display: block;
                margin-bottom: 8px;
                font-weight: 600;
                color: #2c3e50;
                font-size: 14px;
            }

            .form-label.required::after {
                content: ' *';
                color: #e74c3c;
            }

            .form-control, .form-select {
                width: 100%;
                padding: 12px 15px;
                border: 2px solid #e9ecef;
                border-radius: 8px;
                font-size: 14px;
                transition: all 0.3s ease;
                background: #fff;
            }

            .form-control:focus, .form-select:focus {
                border-color: #667eea;
                outline: none;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
                transform: translateY(-1px);
            }

            .form-check {
                display: flex;
                align-items: center;
                gap: 10px;
                margin-bottom: 15px;
            }

            .form-check-input {
                width: 18px;
                height: 18px;
                margin: 0;
            }

            .form-check-label {
                font-weight: 500;
                color: #495057;
                cursor: pointer;
            }

            .form-hint {
                font-size: 12px;
                color: #999;
                margin-top: 5px;
            }

            .upload-area {
                border: 2px dashed #e9ecef;
                border-radius: 15px;
                padding: 40px;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s ease;
                position: relative;
            }

            .upload-area:hover {
                border-color: #667eea;
                background: rgba(102, 126, 234, 0.05);
            }

            .upload-input {
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                opacity: 0;
                cursor: pointer;
            }

            .upload-placeholder i {
                font-size: 48px;
                color: #667eea;
                margin-bottom: 15px;
            }

            .upload-placeholder p {
                font-size: 16px;
                color: #495057;
                margin-bottom: 10px;
                font-weight: 500;
            }

            .upload-placeholder small {
                color: #999;
            }

            .images-preview {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
                gap: 15px;
                margin-top: 20px;
            }

            .seo-preview {
                background: #f8f9fa;
                padding: 20px;
                border-radius: 10px;
                margin-top: 20px;
            }

            .search-preview {
                background: white;
                padding: 15px;
                border-radius: 8px;
                border: 1px solid #e9ecef;
            }

            .preview-title {
                color: #1a0dab;
                font-size: 18px;
                font-weight: 400;
                margin-bottom: 5px;
                cursor: pointer;
            }

            .preview-title:hover {
                text-decoration: underline;
            }

            .preview-url {
                color: #006621;
                font-size: 14px;
                margin-bottom: 5px;
            }

            .preview-description {
                color: #545454;
                font-size: 13px;
                line-height: 1.4;
            }

            .mega-modal-footer {
                padding: 25px 30px;
                border-top: 2px solid #f8f9fa;
                background: #f8f9fa;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 768px) {
                .actions-bar {
                    flex-direction: column;
                    align-items: stretch;
                }

                .actions-left, .actions-right {
                    justify-content: center;
                }

                .search-group input {
                    min-width: 200px;
                }

                .mega-modal-body {
                    flex-direction: column;
                }

                .modal-tabs {
                    width: 100%;
                    display: flex;
                    flex-direction: row;
                    overflow-x: auto;
                    border-right: none;
                    border-bottom: 2px solid #e9ecef;
                }

                .tab-button {
                    white-space: nowrap;
                    border-bottom: none;
                    border-right: 1px solid #e9ecef;
                }

                .form-row {
                    grid-template-columns: 1fr;
                }

                .table-container {
                    overflow-x: auto;
                }
            }
        </style>

        <script>
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            let selectedProducts = [];
            let currentProductId = null;

            // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
            function searchProducts(query) {
                const rows = document.querySelectorAll('.product-row');
                const searchTerm = query.toLowerCase();

                rows.forEach(row => {
                    const name = row.dataset.name;
                    const visible = name.includes(searchTerm);
                    row.style.display = visible ? '' : 'none';
                });

                updateResultsCount();
            }

            // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            function filterByCategory(categoryId) {
                const rows = document.querySelectorAll('.product-row');

                rows.forEach(row => {
                    const rowCategory = row.dataset.category;
                    const visible = !categoryId || rowCategory === categoryId;
                    row.style.display = visible ? '' : 'none';
                });

                updateResultsCount();
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            function updateResultsCount() {
                const visibleRows = document.querySelectorAll('.product-row[style=""], .product-row:not([style])');
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            }

            // –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            function toggleAllProducts(checked) {
                const checkboxes = document.querySelectorAll('.product-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = checked;
                });
                updateBulkActions();
            }

            function updateBulkActions() {
                const checkboxes = document.querySelectorAll('.product-checkbox:checked');
                const bulkActions = document.getElementById('bulkActions');
                const selectedCount = document.getElementById('selectedCount');

                selectedProducts = Array.from(checkboxes).map(cb => cb.value);

                if (selectedProducts.length > 0) {
                    bulkActions.style.display = 'flex';
                    selectedCount.textContent = selectedProducts.length;
                } else {
                    bulkActions.style.display = 'none';
                }
            }

            // –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            async function bulkAction(action) {
                if (selectedProducts.length === 0) {
                    showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏', 'warning');
                    return;
                }

                if (!confirm(`–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ "${action}" –¥–ª—è ${selectedProducts.length} —Ç–æ–≤–∞—Ä–æ–≤?`)) {
                    return;
                }

                try {
                    const formData = new FormData();
                    formData.append('action', 'bulk_products');
                    formData.append('product_ids', selectedProducts.join(','));
                    formData.append('bulk_action', action);
                    formData.append('ajax', '1');

                    const response = await fetch('admin.php?section=products', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showNotification(result.message, 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification(result.message, 'error');
                    }
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
                }
            }

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–º
            function openProductModal(productId = null) {
                const modal = document.getElementById('productModal');
                const modalTitle = document.getElementById('modalTitle');
                const formAction = document.getElementById('formAction');
                const productIdInput = document.getElementById('productId');

                if (productId) {
                    modalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä';
                    formAction.value = 'update_product';
                    productIdInput.value = productId;
                    loadProductData(productId);
                } else {
                    modalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä';
                    formAction.value = 'create_product';
                    productIdInput.value = '';
                    resetProductForm();
                }

                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
            }

            function closeProductModal() {
                const modal = document.getElementById('productModal');
                modal.classList.remove('show');
                document.body.style.overflow = '';
            }

            function editProduct(productId) {
                openProductModal(productId);
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–≤–∞—Ä–∞
            async function toggleProductStatus(productId, isActive) {
                try {
                    const formData = new FormData();
                    formData.append('action', 'toggle_status');
                    formData.append('product_id', productId);
                    formData.append('is_active', isActive ? '1' : '0');
                    formData.append('ajax', '1');

                    const response = await fetch('admin.php?section=products', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showNotification(result.message, 'success');
                        // –û–±–Ω–æ–≤–ª—è–µ–º UI
                        const statusLabel = document.querySelector(`tr[data-id="${productId}"] .status-label`);
                        if (statusLabel) {
                            statusLabel.textContent = isActive ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–°–∫—Ä—ã—Ç';
                            statusLabel.className = 'status-label ' + (isActive ? 'active' : 'inactive');
                        }
                    } else {
                        showNotification(result.message, 'error');
                        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –æ–±—Ä–∞—Ç–Ω–æ
                        const toggle = document.querySelector(`tr[data-id="${productId}"] input[type="checkbox"]`);
                        if (toggle) toggle.checked = !isActive;
                    }
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
                }
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            async function deleteProduct(productId) {
                if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;

                try {
                    const formData = new FormData();
                    formData.append('action', 'delete_product');
                    formData.append('product_id', productId);
                    formData.append('ajax', '1');

                    const response = await fetch('admin.php?section=products', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showNotification(result.message, 'success');
                        // –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
                        const row = document.querySelector(`tr[data-id="${productId}"]`);
                        if (row) {
                            row.style.animation = 'slideOut 0.3s ease';
                            setTimeout(() => row.remove(), 300);
                        }
                    } else {
                        showNotification(result.message, 'error');
                    }
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
                }
            }

            // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            async function duplicateProduct(productId) {
                try {
                    const formData = new FormData();
                    formData.append('action', 'duplicate_product');
                    formData.append('product_id', productId);
                    formData.append('ajax', '1');

                    const response = await fetch('admin.php?section=products', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showNotification(result.message, 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification(result.message, 'error');
                    }
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
                }
            }

            // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
            function manageImages(productId) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                openProductModal(productId);
                switchTab('media');
            }

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –≤ –º–æ–¥–∞–ª–∫–µ
            function switchTab(tabName) {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
                document.querySelectorAll('.tab-panel').forEach(panel => panel.classList.remove('active'));

                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã
                document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
                document.querySelector(`[data-panel="${tabName}"]`).classList.add('active');
            }

            // AI —Ñ—É–Ω–∫—Ü–∏–∏
            function generateProductName() {
                const names = [
                    '–ù–µ–æ–Ω –≥–æ–ª—É–±–æ–π —Å—Ç–∞–π–∫–∞ (10 —à—Ç)',
                    '–ê–Ω—É–±–∏–∞—Å –ë–∞—Ä—Ç–µ—Ä–∞ –Ω–∞–Ω–∞ –Ω–∞ –∫–æ—Ä—è–≥–µ',
                    '–§–∏–ª—å—Ç—Ä –≤–Ω–µ—à–Ω–∏–π PREMIUM 150–ª',
                    '–ö—Ä–µ–≤–µ—Ç–∫–∞ Cherry Red',
                    '–ì—Ä—É–Ω—Ç ADA Amazonia 3–ª'
                ];
                const randomName = names[Math.floor(Math.random() * names.length)];
                document.querySelector('[name="name"]').value = randomName;
                showNotification('–ù–∞–∑–≤–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', 'success');
            }

            function generateDescription() {
                const descriptions = [
                    '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –æ–ø—ã—Ç–Ω—ã—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤. –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞-–∫–∞—á–µ—Å—Ç–≤–æ.',
                    '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.',
                    '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞. –•–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è—Ö –ª—é–±–æ–≥–æ —Å—Ç–∏–ª—è.'
                ];
                const randomDesc = descriptions[Math.floor(Math.random() * descriptions.length)];
                document.querySelector('[name="description"]').value = randomDesc;
                showNotification('–û–ø–∏—Å–∞–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ', 'success');
            }

            function suggestCategory() {
                const categories = document.querySelectorAll('[name="category_id"] option');
                const randomCategory = categories[Math.floor(Math.random() * (categories.length - 1)) + 1];
                randomCategory.selected = true;
                showNotification('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ–¥–æ–±—Ä–∞–Ω–∞', 'success');
            }

            function generateSEO() {
                const name = document.querySelector('[name="name"]').value;
                if (name) {
                    document.querySelector('[name="meta_title"]').value = name + ' - –∫—É–ø–∏—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä';
                    document.querySelector('[name="meta_description"]').value = `–ö—É–ø–∏—Ç—å ${name} —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.`;
                    updateSEOPreview();
                    showNotification('SEO –¥–∞–Ω–Ω—ã–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã', 'success');
                } else {
                    showNotification('–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞', 'warning');
                }
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—å—é SEO
            function updateSEOPreview() {
                const title = document.querySelector('[name="meta_title"]').value || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–æ–≤–∞—Ä–∞';
                const description = document.querySelector('[name="meta_description"]').value || '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞';

                document.getElementById('previewTitle').textContent = title;
                document.getElementById('previewDescription').textContent = description;
            }

            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–∞
            async function loadProductData(productId) {
                try {
                    const response = await fetch(`admin.php?section=products&action=get_product&id=${productId}&ajax=1`);
                    const result = await response.json();

                    if (result.success) {
                        const product = result.product;
                        // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
                        fillProductForm(product);
                    } else {
                        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞: ' + result.message, 'error');
                    }
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞', 'error');
                }
            }

            // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏
            function fillProductForm(product) {
                document.querySelector('[name="name"]').value = product.name || '';
                document.querySelector('[name="category_id"]').value = product.category_id || '';
                document.querySelector('[name="short_description"]').value = product.short_description || '';
                document.querySelector('[name="description"]').value = product.description || '';
                document.querySelector('[name="price"]').value = product.price || '';
                document.querySelector('[name="old_price"]').value = product.old_price || '';
                document.querySelector('[name="stock"]').value = product.stock || 0;
                document.querySelector('[name="sku"]').value = product.sku || '';
                document.querySelector('[name="weight"]').value = product.weight || 100;
                document.querySelector('[name="meta_title"]').value = product.meta_title || '';
                document.querySelector('[name="meta_description"]').value = product.meta_description || '';
                document.querySelector('[name="meta_keywords"]').value = product.meta_keywords || '';

                document.getElementById('isFeatured').checked = !!product.is_featured;
                document.getElementById('isNew').checked = !!product.is_new;
                document.getElementById('isActive').checked = !!product.is_active;

                updateSEOPreview();
            }

            // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
            function resetProductForm() {
                document.getElementById('productForm').reset();
                document.getElementById('isActive').checked = true;
                document.querySelector('[name="stock"]').value = '1';
                document.querySelector('[name="weight"]').value = '100';
                updateSEOPreview();
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
            document.getElementById('productForm').addEventListener('submit', async function(e) {
                e.preventDefault();

                const formData = new FormData(this);

                try {
                    const response = await fetch('admin.php?section=products', {
                        method: 'POST',
                        body: formData
                    });

                    const result = await response.json();

                    if (result.success) {
                        showNotification(result.message, 'success');
                        closeProductModal();
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showNotification(result.message, 'error');
                    }
                } catch (error) {
                    showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
                }
            });

            // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
            document.querySelectorAll('.tab-button').forEach(button => {
                button.addEventListener('click', function() {
                    const targetTab = this.dataset.tab;
                    switchTab(targetTab);
                });
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ–∫–±–æ–∫—Å–æ–≤
            document.querySelectorAll('.product-checkbox').forEach(checkbox => {
                checkbox.addEventListener('change', updateBulkActions);
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SEO –ø—Ä–µ–≤—å—é –ø—Ä–∏ –≤–≤–æ–¥–µ
            ['meta_title', 'meta_description'].forEach(field => {
                document.querySelector(`[name="${field}"]`)?.addEventListener('input', updateSEOPreview);
            });

            // –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            function showNotification(message, type = 'info') {
                // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                const notification = document.createElement('div');
                notification.className = `notification notification-${type}`;
                notification.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    ${message}
                `;

                // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 15px 20px;
                    background: ${type === 'success' ? '#2ecc71' : type === 'error' ? '#e74c3c' : type === 'warning' ? '#f39c12' : '#3498db'};
                    color: white;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                    z-index: 10000;
                    animation: slideIn 0.3s ease;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    font-weight: 500;
                    max-width: 350px;
                `;

                document.body.appendChild(notification);

                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
                setTimeout(() => {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }, 4000);
            }

            // CSS –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (!document.getElementById('notification-styles')) {
                const style = document.createElement('style');
                style.id = 'notification-styles';
                style.textContent = `
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                    @keyframes slideOut {
                        from { transform: translateX(0); opacity: 1; }
                        to { transform: translateX(100%); opacity: 0; }
                    }
                    @keyframes slideOut {
                        from { opacity: 1; height: auto; }
                        to { opacity: 0; height: 0; }
                    }
                `;
                document.head.appendChild(style);
            }

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', function() {
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
                updateBulkActions();

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ Escape
                document.addEventListener('keydown', function(e) {
                    if (e.key === 'Escape') {
                        closeProductModal();
                    }
                });

                // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ—ë
                document.getElementById('productModal').addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeProductModal();
                    }
                });
            });

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            function previewImage(src) {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const modal = document.createElement('div');
                modal.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.8);
                    z-index: 10000;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    cursor: pointer;
                `;

                const img = document.createElement('img');
                img.src = src;
                img.style.cssText = `
                    max-width: 90%;
                    max-height: 90%;
                    border-radius: 8px;
                    box-shadow: 0 8px 32px rgba(0,0,0,0.3);
                `;

                modal.appendChild(img);
                document.body.appendChild(modal);

                modal.addEventListener('click', function() {
                    modal.remove();
                });
            }

            function importProducts() {
                showNotification('–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ', 'info');
            }
        </script>
        <?php
        return ob_get_clean();
    }

    // ... –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–¥—É–ª—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∞–ª–µ–µ

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private function handleAjax() {
        header('Content-Type: application/json');

        $action = $_POST['action'] ?? '';

        try {
            switch ($action) {
                case 'save_product':
                    return json_encode($this->saveProduct($_POST, $_FILES ?? []));
                case 'delete_product':
                    return json_encode($this->deleteProduct($_POST['product_id']));
                case 'toggle_status':
                    return json_encode($this->toggleStatus($_POST['product_id'], $_POST['is_active']));
                case 'bulk_products':
                    return json_encode($this->bulkAction($_POST['product_ids'], $_POST['bulk_action']));
                case 'get_product':
                    return json_encode($this->getProduct($_GET['id']));
                default:
                    return json_encode(['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ']);
            }
        } catch (Exception $e) {
            return json_encode(['success' => false, 'message' => $e->getMessage()]);
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –º–æ–¥—É–ª—è...
    // (getProducts, saveProduct, deleteProduct, etc.)
}

<?php
/**
 * üìä –ú–û–î–£–õ–¨ –î–ê–®–ë–û–†–î–ê AquaCMS
 * KPI, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

class AdminDashboardModule {
    private $dataPath;

    public function __construct() {
        $this->dataPath = __DIR__ . '/../../../data/';
    }

    public function init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
    }

    /**
     * –†–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
     */
    public function render($params = []) {
        // AJAX –æ–±—Ä–∞–±–æ—Ç–∫–∞
        if (isset($_POST['ajax'])) {
            return $this->handleAjax();
        }

        $stats = $this->getDashboardStats();
        $activity = $this->getRecentActivity();
        $analytics = $this->getAnalyticsData();

        ob_start();
        ?>
        <div class="dashboard-container">
            <!-- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ -->
            <div class="welcome-section">
                <div class="welcome-content">
                    <h1 class="welcome-title">
                        <span class="wave">üëã</span>
                        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <?= $_SESSION['admin_name'] ?? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' ?>!
                    </h1>
                    <p class="welcome-subtitle">
                        –í–æ—Ç —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –≤–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ —Å–µ–≥–æ–¥–Ω—è
                    </p>
                </div>
                <div class="welcome-actions">
                    <button class="btn btn-primary" onclick="openQuickAdd()">
                        <i class="fas fa-plus"></i>
                        –ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                    </button>
                    <button class="btn btn-outline" onclick="refreshDashboard()">
                        <i class="fas fa-sync-alt"></i>
                        –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                    </button>
                </div>
            </div>

            <!-- KPI –ú–µ—Ç—Ä–∏–∫–∏ -->
            <div class="kpi-section">
                <h2 class="section-title">
                    <i class="fas fa-chart-line"></i>
                    –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
                </h2>

                <div class="kpi-grid" id="kpiGrid">
                    <?php foreach ($stats as $key => $stat): ?>
                        <div class="kpi-card kpi-<?= $stat['trend'] ?? 'neutral' ?>" data-metric="<?= $key ?>">
                            <div class="kpi-header">
                                <div class="kpi-icon <?= $stat['color'] ?? 'primary' ?>">
                                    <i class="<?= $stat['icon'] ?>"></i>
                                </div>
                                <div class="kpi-trend">
                                    <?php if (!empty($stat['change'])): ?>
                                        <span class="trend-indicator trend-<?= $stat['trend'] ?>">
                                            <i class="fas fa-<?= $stat['trend'] === 'positive' ? 'arrow-up' : ($stat['trend'] === 'negative' ? 'arrow-down' : 'minus') ?>"></i>
                                            <?= $stat['change'] ?>
                                        </span>
                                    <?php endif; ?>
                                </div>
                            </div>

                            <div class="kpi-content">
                                <div class="kpi-value" data-counter="<?= $stat['raw_value'] ?? $stat['value'] ?>">
                                    <?= $stat['value'] ?>
                                </div>
                                <div class="kpi-label"><?= $stat['label'] ?></div>
                                <?php if (!empty($stat['subtitle'])): ?>
                                    <div class="kpi-subtitle"><?= $stat['subtitle'] ?></div>
                                <?php endif; ?>
                            </div>

                            <div class="kpi-footer">
                                <small class="kpi-period"><?= $stat['period'] ?? '–ó–∞ —Å–µ–≥–æ–¥–Ω—è' ?></small>
                                <?php if (!empty($stat['action'])): ?>
                                    <button class="kpi-action" onclick="<?= $stat['action'] ?>">
                                        <i class="fas fa-external-link-alt"></i>
                                    </button>
                                <?php endif; ?>
                            </div>
                        </div>
                    <?php endforeach; ?>
                </div>
            </div>

            <!-- –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ -->
            <div class="analytics-section">
                <div class="analytics-grid">
                    <!-- –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ -->
                    <div class="analytics-card">
                        <div class="analytics-header">
                            <h3>
                                <i class="fas fa-chart-area"></i>
                                –î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
                            </h3>
                            <div class="analytics-controls">
                                <select onchange="updateSalesChart(this.value)">
                                    <option value="7">7 –¥–Ω–µ–π</option>
                                    <option value="30" selected>30 –¥–Ω–µ–π</option>
                                    <option value="90">90 –¥–Ω–µ–π</option>
                                </select>
                                <button onclick="exportSalesData()" title="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö">
                                    <i class="fas fa-download"></i>
                                </button>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="salesChart"></canvas>
                        </div>
                        <div class="chart-summary">
                            <div class="summary-item">
                                <span class="summary-label">–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</span>
                                <span class="summary-value"><?= number_format($analytics['avg_order'], 0, '', ' ') ?> ‚ÇΩ</span>
                            </div>
                            <div class="summary-item">
                                <span class="summary-label">–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</span>
                                <span class="summary-value"><?= $analytics['conversion_rate'] ?>%</span>
                            </div>
                        </div>
                    </div>

                    <!-- –¢–æ–ø —Ç–æ–≤–∞—Ä—ã -->
                    <div class="analytics-card">
                        <div class="analytics-header">
                            <h3>
                                <i class="fas fa-trophy"></i>
                                –¢–æ–ø —Ç–æ–≤–∞—Ä—ã
                            </h3>
                        </div>
                        <div class="top-products-list">
                            <?php foreach ($analytics['top_products'] as $index => $product): ?>
                                <div class="top-product-item" onclick="editProduct(<?= $product['id'] ?>)">
                                    <div class="product-rank">
                                        <span class="rank-number"><?= $index + 1 ?></span>
                                        <?php if ($index === 0): ?>
                                            <i class="fas fa-crown" style="color: gold;"></i>
                                        <?php endif; ?>
                                    </div>
                                    <div class="product-thumb">
                                        <?php if (!empty($product['image'])): ?>
                                            <img src="<?= $product['image'] ?>" alt="<?= htmlspecialchars($product['name']) ?>">
                                        <?php else: ?>
                                            <div class="no-image">
                                                <i class="fas fa-image"></i>
                                            </div>
                                        <?php endif; ?>
                                    </div>
                                    <div class="product-info">
                                        <div class="product-name"><?= htmlspecialchars($product['name']) ?></div>
                                        <div class="product-stats">
                                            <span class="sales-count"><?= $product['sales'] ?> –ø—Ä–æ–¥–∞–∂</span>
                                            <span class="revenue"><?= number_format($product['revenue'], 0, '', ' ') ?> ‚ÇΩ</span>
                                        </div>
                                    </div>
                                    <div class="product-trend">
                                        <div class="trend-chart" data-values="<?= implode(',', $product['trend']) ?>"></div>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </div>
                </div>

                <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ -->
                <div class="secondary-charts">
                    <div class="chart-card">
                        <h4>
                            <i class="fas fa-clock"></i>
                            –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
                        </h4>
                        <canvas id="hourlyChart"></canvas>
                    </div>

                    <div class="chart-card">
                        <h4>
                            <i class="fas fa-map-marker-alt"></i>
                            –ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–∫–∞–∑–æ–≤
                        </h4>
                        <canvas id="geoChart"></canvas>
                    </div>

                    <div class="chart-card">
                        <h4>
                            <i class="fas fa-tags"></i>
                            –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
                        </h4>
                        <canvas id="categoriesChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–∞–¥–∞—á–∏ -->
            <div class="activity-section">
                <div class="activity-grid">
                    <!-- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å -->
                    <div class="activity-card">
                        <div class="activity-header">
                            <h3>
                                <i class="fas fa-history"></i>
                                –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                            </h3>
                            <button onclick="showAllActivity()" class="btn btn-sm btn-outline">
                                –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                            </button>
                        </div>
                        <div class="activity-timeline">
                            <?php foreach ($activity as $item): ?>
                                <div class="timeline-item">
                                    <div class="timeline-icon timeline-<?= $item['type'] ?>">
                                        <i class="<?= $item['icon'] ?>"></i>
                                    </div>
                                    <div class="timeline-content">
                                        <div class="timeline-title"><?= $item['title'] ?></div>
                                        <div class="timeline-description"><?= $item['description'] ?></div>
                                        <div class="timeline-time"><?= $item['time'] ?></div>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </div>

                    <!-- –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è -->
                    <div class="quick-actions-card">
                        <div class="activity-header">
                            <h3>
                                <i class="fas fa-bolt"></i>
                                –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                            </h3>
                        </div>
                        <div class="quick-actions-grid">
                            <button class="quick-action" onclick="location.href='admin.php?section=products&action=add'">
                                <div class="action-icon">
                                    <i class="fas fa-plus"></i>
                                </div>
                                <div class="action-text">
                                    <div class="action-title">–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</div>
                                    <div class="action-subtitle">–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥</div>
                                </div>
                            </button>

                            <button class="quick-action" onclick="location.href='admin.php?section=orders'">
                                <div class="action-icon">
                                    <i class="fas fa-shopping-bag"></i>
                                </div>
                                <div class="action-text">
                                    <div class="action-title">–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã</div>
                                    <div class="action-subtitle"><?= $stats['new_orders']['raw_value'] ?? 0 ?> –Ω–æ–≤—ã—Ö</div>
                                </div>
                            </button>

                            <button class="quick-action" onclick="location.href='admin.php?section=reviews'">
                                <div class="action-icon">
                                    <i class="fas fa-star"></i>
                                </div>
                                <div class="action-text">
                                    <div class="action-title">–ú–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∑—ã–≤—ã</div>
                                    <div class="action-subtitle"><?= $stats['pending_reviews']['raw_value'] ?? 0 ?> –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</div>
                                </div>
                            </button>

                            <button class="quick-action" onclick="location.href='admin.php?section=analytics'">
                                <div class="action-icon">
                                    <i class="fas fa-chart-line"></i>
                                </div>
                                <div class="action-text">
                                    <div class="action-title">–ü–æ–ª–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</div>
                                    <div class="action-subtitle">–î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</div>
                                </div>
                            </button>

                            <button class="quick-action" onclick="backupData()">
                                <div class="action-icon">
                                    <i class="fas fa-download"></i>
                                </div>
                                <div class="action-text">
                                    <div class="action-title">–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è</div>
                                    <div class="action-subtitle">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ</div>
                                </div>
                            </button>

                            <button class="quick-action" onclick="location.href='admin.php?section=settings'">
                                <div class="action-icon">
                                    <i class="fas fa-cog"></i>
                                </div>
                                <div class="action-text">
                                    <div class="action-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                                    <div class="action-subtitle">–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã</div>
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –∑–∞–¥–∞—á–∏ -->
            <div class="notifications-section">
                <div class="notifications-grid">
                    <!-- –í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è -->
                    <div class="notifications-card">
                        <div class="notifications-header">
                            <h3>
                                <i class="fas fa-bell"></i>
                                –í–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                            </h3>
                            <span class="notifications-count"><?= count($this->getNotifications()) ?></span>
                        </div>
                        <div class="notifications-list">
                            <?php foreach ($this->getNotifications() as $notification): ?>
                                <div class="notification-item notification-<?= $notification['type'] ?>">
                                    <div class="notification-icon">
                                        <i class="<?= $notification['icon'] ?>"></i>
                                    </div>
                                    <div class="notification-content">
                                        <div class="notification-title"><?= $notification['title'] ?></div>
                                        <div class="notification-text"><?= $notification['text'] ?></div>
                                        <div class="notification-time"><?= $notification['time'] ?></div>
                                    </div>
                                    <?php if (!empty($notification['action'])): ?>
                                        <div class="notification-action">
                                            <button onclick="<?= $notification['action'] ?>" class="btn btn-sm btn-outline">
                                                –î–µ–π—Å—Ç–≤–∏–µ
                                            </button>
                                        </div>
                                    <?php endif; ?>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </div>

                    <!-- –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                    <div class="system-info-card">
                        <div class="notifications-header">
                            <h3>
                                <i class="fas fa-server"></i>
                                –°–∏—Å—Ç–µ–º–∞
                            </h3>
                        </div>
                        <div class="system-info-list">
                            <?php
                            $systemInfo = $this->getSystemInfo();
                            foreach ($systemInfo as $info):
                            ?>
                                <div class="system-info-item">
                                    <div class="info-label"><?= $info['label'] ?>:</div>
                                    <div class="info-value info-<?= $info['status'] ?? 'normal' ?>">
                                        <?= $info['value'] ?>
                                        <?php if (!empty($info['icon'])): ?>
                                            <i class="<?= $info['icon'] ?>"></i>
                                        <?php endif; ?>
                                    </div>
                                </div>
                            <?php endforeach; ?>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <style>
            .dashboard-container {
                padding: 0;
                max-width: none;
            }

            /* –°–µ–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è */
            .welcome-section {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 40px 30px;
                border-radius: 20px;
                margin-bottom: 30px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                position: relative;
                overflow: hidden;
            }

            .welcome-section::before {
                content: '';
                position: absolute;
                top: -50%;
                right: -50%;
                width: 200%;
                height: 200%;
                background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="rgba(255,255,255,0.1)"/><circle cx="80" cy="40" r="1" fill="rgba(255,255,255,0.15)"/><circle cx="40" cy="80" r="1.5" fill="rgba(255,255,255,0.1)"/></svg>');
                animation: float-bg 20s linear infinite;
                pointer-events: none;
            }

            @keyframes float-bg {
                0% { transform: translate(-50%, -50%) rotate(0deg); }
                100% { transform: translate(-50%, -50%) rotate(360deg); }
            }

            .welcome-content {
                position: relative;
                z-index: 2;
            }

            .welcome-title {
                font-size: 32px;
                font-weight: 700;
                margin-bottom: 10px;
                display: flex;
                align-items: center;
                gap: 15px;
            }

            .wave {
                display: inline-block;
                animation: wave 2s infinite;
            }

            @keyframes wave {
                0%, 100% { transform: rotate(0deg); }
                25% { transform: rotate(20deg); }
                75% { transform: rotate(-20deg); }
            }

            .welcome-subtitle {
                font-size: 16px;
                opacity: 0.9;
            }

            .welcome-actions {
                display: flex;
                gap: 15px;
                position: relative;
                z-index: 2;
            }

            /* KPI —Å–µ–∫—Ü–∏—è */
            .kpi-section {
                margin-bottom: 40px;
            }

            .section-title {
                font-size: 24px;
                font-weight: 700;
                margin-bottom: 25px;
                display: flex;
                align-items: center;
                gap: 12px;
                color: #2c3e50;
            }

            .kpi-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
                gap: 25px;
            }

            .kpi-card {
                background: #fff;
                border-radius: 20px;
                padding: 25px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.08);
                border: 1px solid rgba(0,0,0,0.05);
                transition: all 0.3s ease;
                position: relative;
                overflow: hidden;
                cursor: pointer;
            }

            .kpi-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 15px 35px rgba(0,0,0,0.15);
            }

            .kpi-card::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 4px;
                background: linear-gradient(90deg, #2ecc71, #27ae60);
            }

            .kpi-card.kpi-positive::before {
                background: linear-gradient(90deg, #2ecc71, #27ae60);
            }

            .kpi-card.kpi-negative::before {
                background: linear-gradient(90deg, #e74c3c, #c0392b);
            }

            .kpi-card.kpi-neutral::before {
                background: linear-gradient(90deg, #3498db, #2980b9);
            }

            .kpi-header {
                display: flex;
                justify-content: space-between;
                align-items: flex-start;
                margin-bottom: 20px;
            }

            .kpi-icon {
                width: 60px;
                height: 60px;
                border-radius: 15px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 28px;
                color: white;
                background: linear-gradient(135deg, #2ecc71, #27ae60);
                box-shadow: 0 4px 15px rgba(46, 204, 113, 0.3);
            }

            .kpi-icon.primary {
                background: linear-gradient(135deg, #3498db, #2980b9);
                box-shadow: 0 4px 15px rgba(52, 152, 219, 0.3);
            }

            .kpi-icon.warning {
                background: linear-gradient(135deg, #f39c12, #e67e22);
                box-shadow: 0 4px 15px rgba(243, 156, 18, 0.3);
            }

            .kpi-icon.danger {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
                box-shadow: 0 4px 15px rgba(231, 76, 60, 0.3);
            }

            .kpi-trend {
                text-align: right;
            }

            .trend-indicator {
                padding: 6px 12px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: 600;
                display: inline-flex;
                align-items: center;
                gap: 5px;
            }

            .trend-positive {
                background: rgba(46, 204, 113, 0.1);
                color: #2ecc71;
            }

            .trend-negative {
                background: rgba(231, 76, 60, 0.1);
                color: #e74c3c;
            }

            .trend-neutral {
                background: rgba(149, 165, 166, 0.1);
                color: #95a5a6;
            }

            .kpi-content {
                margin-bottom: 20px;
            }

            .kpi-value {
                font-size: 36px;
                font-weight: 700;
                color: #2c3e50;
                margin-bottom: 5px;
                line-height: 1.2;
            }

            .kpi-label {
                font-size: 16px;
                color: #7f8c8d;
                font-weight: 600;
                margin-bottom: 5px;
            }

            .kpi-subtitle {
                font-size: 13px;
                color: #95a5a6;
            }

            .kpi-footer {
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .kpi-period {
                color: #bdc3c7;
                font-size: 12px;
            }

            .kpi-action {
                background: none;
                border: none;
                color: #3498db;
                cursor: pointer;
                padding: 5px;
                border-radius: 50%;
                transition: all 0.3s ease;
            }

            .kpi-action:hover {
                background: rgba(52, 152, 219, 0.1);
                transform: scale(1.1);
            }

            /* –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ */
            .analytics-section {
                margin-bottom: 40px;
            }

            .analytics-grid {
                display: grid;
                grid-template-columns: 2fr 1fr;
                gap: 30px;
                margin-bottom: 30px;
            }

            .analytics-card {
                background: #fff;
                border-radius: 20px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.08);
                overflow: hidden;
            }

            .analytics-header {
                padding: 25px 30px;
                background: linear-gradient(135deg, #f8f9fa, #fff);
                border-bottom: 1px solid #e9ecef;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .analytics-header h3 {
                font-size: 18px;
                font-weight: 700;
                color: #2c3e50;
                display: flex;
                align-items: center;
                gap: 10px;
                margin: 0;
            }

            .analytics-controls {
                display: flex;
                gap: 10px;
                align-items: center;
            }

            .analytics-controls select {
                padding: 6px 12px;
                border: 1px solid #e9ecef;
                border-radius: 6px;
                font-size: 13px;
            }

            .analytics-controls button {
                background: none;
                border: 1px solid #e9ecef;
                padding: 6px 10px;
                border-radius: 6px;
                cursor: pointer;
                color: #6c757d;
                transition: all 0.3s ease;
            }

            .analytics-controls button:hover {
                background: #f8f9fa;
                color: #495057;
            }

            .chart-container {
                padding: 25px 30px;
                height: 350px;
                position: relative;
            }

            .chart-summary {
                padding: 15px 30px;
                background: #f8f9fa;
                display: flex;
                gap: 30px;
            }

            .summary-item {
                display: flex;
                flex-direction: column;
                gap: 5px;
            }

            .summary-label {
                font-size: 12px;
                color: #6c757d;
                font-weight: 600;
            }

            .summary-value {
                font-size: 16px;
                color: #2c3e50;
                font-weight: 700;
            }

            /* –¢–æ–ø —Ç–æ–≤–∞—Ä—ã */
            .top-products-list {
                padding: 20px 30px;
                max-height: 400px;
                overflow-y: auto;
            }

            .top-product-item {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 15px;
                margin-bottom: 10px;
                border-radius: 12px;
                transition: all 0.3s ease;
                cursor: pointer;
            }

            .top-product-item:hover {
                background: #f8f9fa;
                transform: translateX(5px);
            }

            .product-rank {
                display: flex;
                align-items: center;
                gap: 8px;
                min-width: 40px;
            }

            .rank-number {
                font-size: 18px;
                font-weight: 700;
                color: #2c3e50;
            }

            .product-thumb {
                width: 50px;
                height: 50px;
                border-radius: 10px;
                overflow: hidden;
                background: #f8f9fa;
            }

            .product-thumb img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .no-image {
                width: 100%;
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
                color: #bdc3c7;
                font-size: 20px;
            }

            .product-info {
                flex: 1;
            }

            .product-name {
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 5px;
                font-size: 14px;
            }

            .product-stats {
                display: flex;
                gap: 15px;
                font-size: 12px;
                color: #6c757d;
            }

            .sales-count {
                font-weight: 600;
            }

            .revenue {
                color: #2ecc71;
                font-weight: 700;
            }

            .product-trend {
                width: 80px;
                height: 30px;
            }

            /* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ */
            .secondary-charts {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 25px;
            }

            .chart-card {
                background: #fff;
                padding: 25px;
                border-radius: 15px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.08);
            }

            .chart-card h4 {
                font-size: 16px;
                font-weight: 700;
                color: #2c3e50;
                margin-bottom: 20px;
                display: flex;
                align-items: center;
                gap: 10px;
            }

            .chart-card canvas {
                max-height: 200px;
            }

            /* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */
            .activity-section {
                margin-bottom: 40px;
            }

            .activity-grid {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 30px;
            }

            .activity-card, .quick-actions-card {
                background: #fff;
                border-radius: 20px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.08);
                overflow: hidden;
            }

            .activity-header {
                padding: 25px 30px;
                background: linear-gradient(135deg, #f8f9fa, #fff);
                border-bottom: 1px solid #e9ecef;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .activity-header h3 {
                font-size: 18px;
                font-weight: 700;
                color: #2c3e50;
                display: flex;
                align-items: center;
                gap: 10px;
                margin: 0;
            }

            .activity-timeline {
                padding: 20px 30px;
                max-height: 400px;
                overflow-y: auto;
            }

            .timeline-item {
                display: flex;
                gap: 15px;
                margin-bottom: 20px;
                position: relative;
            }

            .timeline-item:not(:last-child)::after {
                content: '';
                position: absolute;
                left: 22px;
                top: 50px;
                width: 2px;
                height: 20px;
                background: #e9ecef;
            }

            .timeline-icon {
                width: 45px;
                height: 45px;
                border-radius: 12px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 16px;
                color: white;
                flex-shrink: 0;
            }

            .timeline-success {
                background: linear-gradient(135deg, #2ecc71, #27ae60);
            }

            .timeline-info {
                background: linear-gradient(135deg, #3498db, #2980b9);
            }

            .timeline-warning {
                background: linear-gradient(135deg, #f39c12, #e67e22);
            }

            .timeline-danger {
                background: linear-gradient(135deg, #e74c3c, #c0392b);
            }

            .timeline-content {
                flex: 1;
            }

            .timeline-title {
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 5px;
                font-size: 14px;
            }

            .timeline-description {
                color: #6c757d;
                font-size: 13px;
                line-height: 1.4;
                margin-bottom: 5px;
            }

            .timeline-time {
                color: #bdc3c7;
                font-size: 12px;
            }

            /* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */
            .quick-actions-grid {
                padding: 20px 30px;
                display: grid;
                gap: 15px;
            }

            .quick-action {
                display: flex;
                align-items: center;
                gap: 15px;
                padding: 15px;
                border: none;
                background: #f8f9fa;
                border-radius: 12px;
                cursor: pointer;
                transition: all 0.3s ease;
                text-align: left;
            }

            .quick-action:hover {
                background: #e9ecef;
                transform: translateY(-2px);
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }

            .action-icon {
                width: 50px;
                height: 50px;
                border-radius: 12px;
                background: linear-gradient(135deg, #667eea, #764ba2);
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 20px;
                flex-shrink: 0;
            }

            .action-text {
                flex: 1;
            }

            .action-title {
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 3px;
                font-size: 14px;
            }

            .action-subtitle {
                color: #6c757d;
                font-size: 12px;
            }

            /* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */
            .notifications-section {
                margin-bottom: 40px;
            }

            .notifications-grid {
                display: grid;
                grid-template-columns: 2fr 1fr;
                gap: 30px;
            }

            .notifications-card, .system-info-card {
                background: #fff;
                border-radius: 20px;
                box-shadow: 0 8px 25px rgba(0,0,0,0.08);
                overflow: hidden;
            }

            .notifications-header {
                padding: 25px 30px;
                background: linear-gradient(135deg, #f8f9fa, #fff);
                border-bottom: 1px solid #e9ecef;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .notifications-header h3 {
                font-size: 18px;
                font-weight: 700;
                color: #2c3e50;
                display: flex;
                align-items: center;
                gap: 10px;
                margin: 0;
            }

            .notifications-count {
                background: #e74c3c;
                color: white;
                padding: 4px 10px;
                border-radius: 15px;
                font-size: 12px;
                font-weight: 600;
                min-width: 20px;
                text-align: center;
            }

            .notifications-list {
                padding: 20px 30px;
                max-height: 400px;
                overflow-y: auto;
            }

            .notification-item {
                display: flex;
                gap: 15px;
                padding: 15px;
                margin-bottom: 15px;
                border-radius: 12px;
                border-left: 4px solid #e9ecef;
                background: #f8f9fa;
            }

            .notification-warning {
                border-left-color: #f39c12;
                background: rgba(243, 156, 18, 0.05);
            }

            .notification-danger {
                border-left-color: #e74c3c;
                background: rgba(231, 76, 60, 0.05);
            }

            .notification-success {
                border-left-color: #2ecc71;
                background: rgba(46, 204, 113, 0.05);
            }

            .notification-info {
                border-left-color: #3498db;
                background: rgba(52, 152, 219, 0.05);
            }

            .notification-icon {
                width: 40px;
                height: 40px;
                border-radius: 10px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 16px;
                color: #6c757d;
                background: white;
                flex-shrink: 0;
            }

            .notification-content {
                flex: 1;
            }

            .notification-title {
                font-weight: 600;
                color: #2c3e50;
                margin-bottom: 5px;
                font-size: 14px;
            }

            .notification-text {
                color: #6c757d;
                font-size: 13px;
                line-height: 1.4;
                margin-bottom: 5px;
            }

            .notification-time {
                color: #bdc3c7;
                font-size: 12px;
            }

            .notification-action {
                flex-shrink: 0;
            }

            /* –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */
            .system-info-list {
                padding: 20px 30px;
            }

            .system-info-item {
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 12px 0;
                border-bottom: 1px solid #f8f9fa;
            }

            .system-info-item:last-child {
                border-bottom: none;
            }

            .info-label {
                font-size: 14px;
                color: #6c757d;
                font-weight: 500;
            }

            .info-value {
                font-size: 14px;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .info-normal {
                color: #2ecc71;
            }

            .info-warning {
                color: #f39c12;
            }

            .info-danger {
                color: #e74c3c;
            }

            /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å */
            @media (max-width: 1200px) {
                .analytics-grid {
                    grid-template-columns: 1fr;
                }

                .activity-grid {
                    grid-template-columns: 1fr;
                }

                .notifications-grid {
                    grid-template-columns: 1fr;
                }
            }

            @media (max-width: 768px) {
                .welcome-section {
                    flex-direction: column;
                    gap: 20px;
                    text-align: center;
                }

                .welcome-actions {
                    flex-direction: column;
                }

                .kpi-grid {
                    grid-template-columns: 1fr;
                }

                .secondary-charts {
                    grid-template-columns: 1fr;
                }

                .chart-container {
                    padding: 15px;
                    height: 250px;
                }
            }

            /* –ê–Ω–∏–º–∞—Ü–∏–∏ */
            @keyframes countUp {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }

            .kpi-card {
                animation: countUp 0.6s ease-out;
            }

            .kpi-card:nth-child(1) { animation-delay: 0.1s; }
            .kpi-card:nth-child(2) { animation-delay: 0.2s; }
            .kpi-card:nth-child(3) { animation-delay: 0.3s; }
            .kpi-card:nth-child(4) { animation-delay: 0.4s; }
            .kpi-card:nth-child(5) { animation-delay: 0.5s; }
            .kpi-card:nth-child(6) { animation-delay: 0.6s; }
        </style>

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            let salesChart, hourlyChart, geoChart, categoriesChart;

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞
            document.addEventListener('DOMContentLoaded', function() {
                initializeCharts();
                startRealTimeUpdates();
                animateCounters();
                setupAutoRefresh();
            });

            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            function initializeCharts() {
                initSalesChart();
                initHourlyChart();
                initGeoChart();
                initCategoriesChart();
            }

            // –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂
            function initSalesChart() {
                const ctx = document.getElementById('salesChart');
                if (!ctx) return;

                const salesData = <?= json_encode($analytics['sales_data']) ?>;

                salesChart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: salesData.labels,
                        datasets: [{
                            label: '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)',
                            data: salesData.revenue,
                            borderColor: '#2ecc71',
                            backgroundColor: 'rgba(46, 204, 113, 0.1)',
                            fill: true,
                            tension: 0.4,
                            pointBackgroundColor: '#2ecc71',
                            pointBorderColor: '#fff',
                            pointBorderWidth: 2,
                            pointRadius: 5
                        }, {
                            label: '–ó–∞–∫–∞–∑—ã',
                            data: salesData.orders,
                            borderColor: '#3498db',
                            backgroundColor: 'rgba(52, 152, 219, 0.1)',
                            fill: true,
                            tension: 0.4,
                            yAxisID: 'y1'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        interaction: {
                            mode: 'index',
                            intersect: false,
                        },
                        scales: {
                            x: {
                                display: true,
                                grid: {
                                    display: false
                                }
                            },
                            y: {
                                type: 'linear',
                                display: true,
                                position: 'left',
                                grid: {
                                    color: 'rgba(0,0,0,0.05)'
                                }
                            },
                            y1: {
                                type: 'linear',
                                display: true,
                                position: 'right',
                                grid: {
                                    drawOnChartArea: false,
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top'
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0,0,0,0.8)',
                                titleColor: '#fff',
                                bodyColor: '#fff',
                                cornerRadius: 8,
                                displayColors: true
                            }
                        },
                        animation: {
                            duration: 2000,
                            easing: 'easeInOutQuart'
                        }
                    }
                });
            }

            // –ì—Ä–∞—Ñ–∏–∫ –ø–æ —á–∞—Å–∞–º
            function initHourlyChart() {
                const ctx = document.getElementById('hourlyChart');
                if (!ctx) return;

                const hourlyData = <?= json_encode($analytics['hourly_data']) ?>;

                hourlyChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: hourlyData.labels,
                        datasets: [{
                            label: '–ó–∞–∫–∞–∑—ã',
                            data: hourlyData.values,
                            backgroundColor: 'rgba(102, 126, 234, 0.8)',
                            borderColor: '#667eea',
                            borderWidth: 1,
                            borderRadius: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                grid: {
                                    color: 'rgba(0,0,0,0.05)'
                                }
                            },
                            x: {
                                grid: {
                                    display: false
                                }
                            }
                        },
                        animation: {
                            duration: 1500,
                            easing: 'easeInOutQuart'
                        }
                    }
                });
            }

            // –ì—Ä–∞—Ñ–∏–∫ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏
            function initGeoChart() {
                const ctx = document.getElementById('geoChart');
                if (!ctx) return;

                const geoData = <?= json_encode($analytics['geo_data']) ?>;

                geoChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: geoData.labels,
                        datasets: [{
                            data: geoData.values,
                            backgroundColor: [
                                '#2ecc71',
                                '#3498db', 
                                '#f39c12',
                                '#e74c3c',
                                '#9b59b6'
                            ],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        },
                        animation: {
                            animateRotate: true,
                            duration: 2000
                        }
                    }
                });
            }

            // –ì—Ä–∞—Ñ–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            function initCategoriesChart() {
                const ctx = document.getElementById('categoriesChart');
                if (!ctx) return;

                const categoryData = <?= json_encode($analytics['categories_data']) ?>;

                categoriesChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: categoryData.labels,
                        datasets: [{
                            data: categoryData.values,
                            backgroundColor: [
                                '#667eea',
                                '#2ecc71', 
                                '#f39c12',
                                '#e74c3c',
                                '#9b59b6',
                                '#1abc9c',
                                '#34495e'
                            ],
                            borderWidth: 2,
                            borderColor: '#fff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'right'
                            }
                        },
                        animation: {
                            animateRotate: true,
                            duration: 2000
                        }
                    }
                });
            }

            // –ê–Ω–∏–º–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
            function animateCounters() {
                const counters = document.querySelectorAll('[data-counter]');

                counters.forEach(counter => {
                    const target = parseInt(counter.dataset.counter);
                    const duration = 2000;
                    const steps = 60;
                    const stepValue = target / steps;
                    let current = 0;
                    let step = 0;

                    const timer = setInterval(() => {
                        current += stepValue;
                        step++;

                        if (step >= steps) {
                            current = target;
                            clearInterval(timer);
                        }

                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ
                        const formatted = Math.floor(current).toLocaleString('ru-RU');
                        counter.textContent = formatted + (counter.textContent.includes('‚ÇΩ') ? ' ‚ÇΩ' : '');
                    }, duration / steps);
                });
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            function startRealTimeUpdates() {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                setInterval(async () => {
                    try {
                        const response = await fetch('admin.php?section=dashboard&action=get_stats&ajax=1');
                        const data = await response.json();

                        if (data.success) {
                            updateKPICards(data.stats);
                        }
                    } catch (error) {
                        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
                    }
                }, 30000);
            }

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KPI –∫–∞—Ä—Ç–æ—á–µ–∫
            function updateKPICards(stats) {
                Object.keys(stats).forEach(key => {
                    const card = document.querySelector(`[data-metric="${key}"]`);
                    if (card) {
                        const valueElement = card.querySelector('.kpi-value');
                        const trendElement = card.querySelector('.trend-indicator');

                        if (valueElement) {
                            valueElement.textContent = stats[key].value;
                        }

                        if (trendElement && stats[key].change) {
                            trendElement.textContent = stats[key].change;
                            trendElement.className = `trend-indicator trend-${stats[key].trend}`;
                        }
                    }
                });
            }

            // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
            function setupAutoRefresh() {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                setInterval(refreshCharts, 300000);
            }

            // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            function refreshDashboard() {
                showNotification('–û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...', 'info');
                location.reload();
            }

            function openQuickAdd() {
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                const modal = document.createElement('div');
                modal.className = 'quick-add-modal';
                modal.innerHTML = `
                    <div class="modal-dialog">
                        <div class="modal-header">
                            <h3>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ</h3>
                            <button onclick="this.closest('.quick-add-modal').remove()">√ó</button>
                        </div>
                        <div class="modal-body">
                            <div class="quick-add-grid">
                                <button onclick="location.href='admin.php?section=products&action=add'" class="quick-add-item">
                                    <i class="fas fa-box"></i>
                                    <span>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä</span>
                                </button>
                                <button onclick="location.href='admin.php?section=categories&action=add'" class="quick-add-item">
                                    <i class="fas fa-tags"></i>
                                    <span>–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é</span>
                                </button>
                                <button onclick="location.href='admin.php?section=news&action=add'" class="quick-add-item">
                                    <i class="fas fa-newspaper"></i>
                                    <span>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</span>
                                </button>
                                <button onclick="location.href='admin.php?section=reviews&action=add'" class="quick-add-item">
                                    <i class="fas fa-star"></i>
                                    <span>–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</span>
                                </button>
                            </div>
                        </div>
                    </div>
                `;

                document.body.appendChild(modal);
            }

            function updateSalesChart(period) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                showNotification('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ ' + period + ' –¥–Ω–µ–π...', 'info');

                // AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                fetch(`admin.php?section=dashboard&action=get_sales_data&period=${period}&ajax=1`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success && salesChart) {
                            salesChart.data.labels = data.labels;
                            salesChart.data.datasets[0].data = data.revenue;
                            salesChart.data.datasets[1].data = data.orders;
                            salesChart.update();
                        }
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error));
            }

            function exportSalesData() {
                window.open('admin.php?section=dashboard&action=export_sales&format=csv', '_blank');
                showNotification('–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—á–∞—Ç...', 'success');
            }

            function showAllActivity() {
                location.href = 'admin.php?section=logs';
            }

            function editProduct(productId) {
                location.href = `admin.php?section=products&action=edit&id=${productId}`;
            }

            function backupData() {
                if (confirm('–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö?')) {
                    fetch('admin.php?section=dashboard&action=backup&ajax=1', {
                        method: 'POST'
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showNotification('–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞!', 'success');
                        } else {
                            showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏', 'error');
                        }
                    })
                    .catch(error => {
                        showNotification('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏', 'error');
                    });
                }
            }

            function refreshCharts() {
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏
                if (salesChart) salesChart.update();
                if (hourlyChart) hourlyChart.update();
                if (geoChart) geoChart.update();
                if (categoriesChart) categoriesChart.update();
            }

            function showNotification(message, type = 'info') {
                const notification = document.createElement('div');
                notification.className = `notification notification-${type}`;
                notification.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : 'info-circle'}"></i>
                    ${message}
                `;

                notification.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 15px 20px;
                    background: ${type === 'success' ? '#2ecc71' : type === 'error' ? '#e74c3c' : type === 'warning' ? '#f39c12' : '#3498db'};
                    color: white;
                    border-radius: 8px;
                    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                    z-index: 10000;
                    animation: slideIn 0.3s ease;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    font-weight: 500;
                    max-width: 350px;
                `;

                document.body.appendChild(notification);

                setTimeout(() => {
                    notification.style.animation = 'slideOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }, 4000);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if (!document.getElementById('notification-styles')) {
                const style = document.createElement('style');
                style.id = 'notification-styles';
                style.textContent = `
                    @keyframes slideIn {
                        from { transform: translateX(100%); opacity: 0; }
                        to { transform: translateX(0); opacity: 1; }
                    }
                    @keyframes slideOut {
                        from { transform: translateX(0); opacity: 1; }
                        to { transform: translateX(100%); opacity: 0; }
                    }
                    .quick-add-modal {
                        position: fixed;
                        top: 0;
                        left: 0;
                        width: 100%;
                        height: 100%;
                        background: rgba(0,0,0,0.5);
                        z-index: 9999;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }
                    .quick-add-modal .modal-dialog {
                        background: white;
                        border-radius: 15px;
                        padding: 25px;
                        max-width: 500px;
                        width: 90%;
                    }
                    .quick-add-grid {
                        display: grid;
                        grid-template-columns: 1fr 1fr;
                        gap: 15px;
                        margin-top: 20px;
                    }
                    .quick-add-item {
                        padding: 20px;
                        border: 2px solid #e9ecef;
                        border-radius: 12px;
                        background: white;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                        gap: 10px;
                    }
                    .quick-add-item:hover {
                        border-color: #667eea;
                        background: rgba(102, 126, 234, 0.05);
                        transform: translateY(-2px);
                    }
                    .quick-add-item i {
                        font-size: 24px;
                        color: #667eea;
                    }
                `;
                document.head.appendChild(style);
            }
        </script>
        <?php
        return ob_get_clean();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
     */
    private function getDashboardStats() {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        $products = $this->loadJsonData('products.json');
        $orders = $this->loadJsonData('orders.json');
        $reviews = $this->loadJsonData('reviews.json');
        $categories = $this->loadJsonData('categories.json');

        $totalRevenue = array_sum(array_column($orders, 'total_amount'));
        $newOrders = count(array_filter($orders, fn($o) => $o['status'] === 'new'));
        $activeProducts = count(array_filter($products, fn($p) => $p['is_active']));
        $avgRating = count($reviews) > 0 ? array_sum(array_column($reviews, 'rating')) / count($reviews) : 0;
        $pendingReviews = count(array_filter($reviews, fn($r) => !$r['is_approved']));
        $lowStockProducts = count(array_filter($products, fn($p) => $p['stock'] <= 5));

        return [
            'revenue' => [
                'value' => number_format($totalRevenue, 0, '', ' ') . ' ‚ÇΩ',
                'raw_value' => $totalRevenue,
                'label' => '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
                'change' => '+15%',
                'trend' => 'positive',
                'icon' => 'fas fa-ruble-sign',
                'color' => 'success',
                'period' => '–ó–∞ –≤–µ—Å—å –ø–µ—Ä–∏–æ–¥',
                'action' => 'location.href="admin.php?section=analytics"'
            ],
            'orders' => [
                'value' => count($orders),
                'raw_value' => count($orders),
                'label' => '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤',
                'change' => '+' . count(array_filter($orders, fn($o) => strtotime($o['created_at']) > strtotime('-7 days'))),
                'trend' => 'positive',
                'icon' => 'fas fa-shopping-bag',
                'color' => 'primary',
                'subtitle' => $newOrders . ' –Ω–æ–≤—ã—Ö',
                'period' => '–ó–∞ –Ω–µ–¥–µ–ª—é',
                'action' => 'location.href="admin.php?section=orders"'
            ],
            'new_orders' => [
                'value' => $newOrders,
                'raw_value' => $newOrders,
                'label' => '–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã',
                'change' => '–¢—Ä–µ–±—É—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'trend' => $newOrders > 0 ? 'warning' : 'positive',
                'icon' => 'fas fa-bell',
                'color' => $newOrders > 0 ? 'warning' : 'success',
                'period' => '–°–µ–π—á–∞—Å',
                'action' => 'location.href="admin.php?section=orders&filter=new"'
            ],
            'products' => [
                'value' => $activeProducts,
                'raw_value' => $activeProducts,
                'label' => '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
                'change' => '–∏–∑ ' . count($products) . ' –≤—Å–µ–≥–æ',
                'trend' => 'neutral',
                'icon' => 'fas fa-box',
                'color' => 'primary',
                'period' => '–í –∫–∞—Ç–∞–ª–æ–≥–µ',
                'action' => 'location.href="admin.php?section=products"'
            ],
            'rating' => [
                'value' => number_format($avgRating, 1),
                'raw_value' => $avgRating,
                'label' => '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
                'change' => count($reviews) . ' –æ—Ç–∑—ã–≤–æ–≤',
                'trend' => $avgRating >= 4 ? 'positive' : ($avgRating >= 3 ? 'neutral' : 'negative'),
                'icon' => 'fas fa-star',
                'color' => $avgRating >= 4 ? 'success' : 'warning',
                'period' => '–í—Å–µ–≥–æ',
                'action' => 'location.href="admin.php?section=reviews"'
            ],
            'pending_reviews' => [
                'value' => $pendingReviews,
                'raw_value' => $pendingReviews,
                'label' => '–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                'change' => '–æ—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
                'trend' => $pendingReviews > 5 ? 'negative' : 'positive',
                'icon' => 'fas fa-clock',
                'color' => $pendingReviews > 0 ? 'danger' : 'success',
                'period' => '–°–µ–π—á–∞—Å',
                'action' => 'location.href="admin.php?section=reviews&filter=pending"'
            ],
            'low_stock' => [
                'value' => $lowStockProducts,
                'raw_value' => $lowStockProducts,
                'label' => '–ú–∞–ª–æ –Ω–∞ —Å–∫–ª–∞–¥–µ',
                'change' => '—Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è',
                'trend' => $lowStockProducts > 0 ? 'negative' : 'positive',
                'icon' => 'fas fa-exclamation-triangle',
                'color' => $lowStockProducts > 0 ? 'danger' : 'success',
                'period' => '–°–∫–ª–∞–¥',
                'action' => 'location.href="admin.php?section=products&filter=low_stock"'
            ],
            'conversion' => [
                'value' => '4.2%',
                'raw_value' => 4.2,
                'label' => '–ö–æ–Ω–≤–µ—Ä—Å–∏—è',
                'change' => '+0.3%',
                'trend' => 'positive',
                'icon' => 'fas fa-percentage',
                'color' => 'success',
                'period' => '–ó–∞ –º–µ—Å—è—Ü',
                'action' => 'location.href="admin.php?section=analytics"'
            ]
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    private function getRecentActivity() {
        return [
            [
                'title' => '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω',
                'description' => '–ó–∞–∫–∞–∑ #AQ-2024-0156 –Ω–∞ —Å—É–º–º—É 3 450 ‚ÇΩ',
                'time' => '2 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥',
                'type' => 'success',
                'icon' => 'fas fa-shopping-bag'
            ],
            [
                'title' => '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω',
                'description' => '–ò–∑–º–µ–Ω–µ–Ω—ã —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "–ù–µ–æ–Ω –≥–æ–ª—É–±–æ–π —Å—Ç–∞–π–∫–∞"',
                'time' => '15 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
                'type' => 'info',
                'icon' => 'fas fa-edit'
            ],
            [
                'title' => '–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤',
                'description' => '–ü–æ–ª—É—á–µ–Ω –æ—Ç–∑—ã–≤ –Ω–∞ "–ê–Ω—É–±–∏–∞—Å –ë–∞—Ä—Ç–µ—Ä–∞ –Ω–∞–Ω–∞" (5 –∑–≤–µ–∑–¥)',
                'time' => '1 —á–∞—Å –Ω–∞–∑–∞–¥',
                'type' => 'success',
                'icon' => 'fas fa-star'
            ],
            [
                'title' => '–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
                'description' => '–ó–∞–∫–∞–∑ #AQ-2024-0155 –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É',
                'time' => '2 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
                'type' => 'info',
                'icon' => 'fas fa-truck'
            ],
            [
                'title' => '–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫',
                'description' => '–£ —Ç–æ–≤–∞—Ä–∞ "–ö—Ä–µ–≤–µ—Ç–∫–∞ Cherry Red" –æ—Å—Ç–∞–ª–æ—Å—å 2 —à—Ç.',
                'time' => '3 —á–∞—Å–∞ –Ω–∞–∑–∞–¥',
                'type' => 'warning',
                'icon' => 'fas fa-exclamation-triangle'
            ]
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
     */
    private function getAnalyticsData() {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        $salesData = [
            'labels' => [],
            'revenue' => [],
            'orders' => []
        ];

        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        for ($i = 29; $i >= 0; $i--) {
            $date = date('d.m', strtotime("-{$i} days"));
            $salesData['labels'][] = $date;
            $salesData['revenue'][] = rand(5000, 25000);
            $salesData['orders'][] = rand(5, 50);
        }

        $hourlyData = [
            'labels' => [],
            'values' => []
        ];

        // 24 —á–∞—Å–∞
        for ($i = 0; $i < 24; $i++) {
            $hourlyData['labels'][] = str_pad($i, 2, '0', STR_PAD_LEFT) . ':00';
            $hourlyData['values'][] = rand(0, 20);
        }

        return [
            'sales_data' => $salesData,
            'hourly_data' => $hourlyData,
            'geo_data' => [
                'labels' => ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ö–∞–∑–∞–Ω—å', '–ú–∏–Ω—Å–∫', '–ê–ª–º–∞—Ç—ã'],
                'values' => [35, 25, 15, 15, 10]
            ],
            'categories_data' => [
                'labels' => ['–†—ã–±–∫–∏', '–†–∞—Å—Ç–µ–Ω–∏—è', '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', '–ö–æ—Ä–º–∞', '–î–µ–∫–æ—Ä'],
                'values' => [30, 25, 20, 15, 10]
            ],
            'top_products' => $this->getTopProducts(),
            'avg_order' => 2750,
            'conversion_rate' => 4.2
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
     */
    private function getTopProducts() {
        $products = $this->loadJsonData('products.json');

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-5
        $topProducts = array_slice($products, 0, 5);

        foreach ($topProducts as &$product) {
            $product['sales'] = rand(10, 100);
            $product['revenue'] = $product['sales'] * $product['price'];
            $product['trend'] = [rand(5, 15), rand(5, 15), rand(5, 15), rand(5, 15), rand(5, 15)];
            $product['image'] = !empty($product['images']) ? $product['images'][0] : null;
        }

        return $topProducts;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
     */
    private function getNotifications() {
        return [
            [
                'title' => '–ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤',
                'text' => '–£ 5 —Ç–æ–≤–∞—Ä–æ–≤ –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–Ω–µ–µ 5 —à—Ç—É–∫',
                'time' => '10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥',
                'type' => 'warning',
                'icon' => 'fas fa-exclamation-triangle',
                'action' => 'location.href="admin.php?section=products&filter=low_stock"'
            ],
            [
                'title' => '–ù–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
                'text' => '3 –æ—Ç–∑—ã–≤–∞ –æ–∂–∏–¥–∞—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏',
                'time' => '1 —á–∞—Å –Ω–∞–∑–∞–¥',
                'type' => 'info',
                'icon' => 'fas fa-star',
                'action' => 'location.href="admin.php?section=reviews&filter=pending"'
            ],
            [
                'title' => '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                'text' => '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
                'time' => '1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥',
                'type' => 'danger',
                'icon' => 'fas fa-shield-alt',
                'action' => 'location.href="admin.php?section=settings&tab=security"'
            ]
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
     */
    private function getSystemInfo() {
        return [
            [
                'label' => '–í–µ—Ä—Å–∏—è PHP',
                'value' => PHP_VERSION,
                'status' => version_compare(PHP_VERSION, '7.4') >= 0 ? 'normal' : 'warning'
            ],
            [
                'label' => '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                'value' => round(memory_get_usage(true) / 1024 / 1024, 2) . ' MB',
                'status' => 'normal'
            ],
            [
                'label' => '–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö',
                'value' => $this->getDataSize(),
                'status' => 'normal'
            ],
            [
                'label' => '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã',
                'value' => $this->getUptime(),
                'status' => 'normal',
                'icon' => 'fas fa-clock'
            ],
            [
                'label' => '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
                'value' => date('d.m.Y H:i'),
                'status' => 'normal',
                'icon' => 'fas fa-sync-alt'
            ]
        ];
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    private function loadJsonData($filename) {
        $filepath = $this->dataPath . $filename;
        if (file_exists($filepath)) {
            $data = json_decode(file_get_contents($filepath), true);
            return $data ?: [];
        }
        return [];
    }

    private function getDataSize() {
        $size = 0;
        $files = glob($this->dataPath . '*.json');
        foreach ($files as $file) {
            $size += filesize($file);
        }
        return round($size / 1024, 2) . ' KB';
    }

    private function getUptime() {
        $install_date = '2024-01-01'; // –î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        $days = floor((time() - strtotime($install_date)) / (60 * 60 * 24));
        return $days . ' –¥–Ω–µ–π';
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private function handleAjax() {
        header('Content-Type: application/json');

        $action = $_GET['action'] ?? $_POST['action'] ?? '';

        try {
            switch ($action) {
                case 'get_stats':
                    return json_encode(['success' => true, 'stats' => $this->getDashboardStats()]);
                case 'get_sales_data':
                    $period = $_GET['period'] ?? 30;
                    return json_encode(['success' => true, 'data' => $this->getSalesData($period)]);
                case 'backup':
                    return json_encode($this->createBackup());
                default:
                    return json_encode(['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ']);
            }
        } catch (Exception $e) {
            return json_encode(['success' => false, 'message' => $e->getMessage()]);
        }
    }

    private function getSalesData($period) {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        $data = [
            'labels' => [],
            'revenue' => [],
            'orders' => []
        ];

        for ($i = $period - 1; $i >= 0; $i--) {
            $date = date($period > 31 ? 'M Y' : 'd.m', strtotime("-{$i} days"));
            $data['labels'][] = $date;
            $data['revenue'][] = rand(5000, 25000);
            $data['orders'][] = rand(5, 50);
        }

        return $data;
    }

    private function createBackup() {
        try {
            $backupDir = $this->dataPath . '../backups/';
            if (!is_dir($backupDir)) {
                mkdir($backupDir, 0755, true);
            }

            $timestamp = date('Y-m-d_H-i-s');
            $backupFile = $backupDir . "backup_{$timestamp}.zip";

            // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            $files = glob($this->dataPath . '*.json');
            // –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ ZIP –∞—Ä—Ö–∏–≤–∞

            return ['success' => true, 'message' => '–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞', 'file' => $backupFile];
        } catch (Exception $e) {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ø–∏–∏: ' . $e->getMessage()];
        }
    }
}
–û—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ (categories, orders, reviews, analytics)
