<?php
/**
 * –ê–∫–≤–∞–°–±–æ—Ä - –û–±—â–∏–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö v3.0 - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ + –≤—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç + —É–ª—É—á—à–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
 */

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
define('SITE_NAME', '–ê–∫–≤–∞–°–±–æ—Ä');
define('SITE_DESCRIPTION', '–ê–∫–≤–∞—Ä–∏—É–º—ã –∏ –∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–∏');
define('ADMIN_PASSWORD', 'admin123');

// –ü–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
define('UPLOAD_DIR', 'uploads/');
define('PRODUCT_IMAGES_DIR', UPLOAD_DIR . 'products/');
define('NEWS_IMAGES_DIR', UPLOAD_DIR . 'news/');

// –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!file_exists(UPLOAD_DIR)) {
    mkdir(UPLOAD_DIR, 0755, true);
}
if (!file_exists(PRODUCT_IMAGES_DIR)) {
    mkdir(PRODUCT_IMAGES_DIR, 0755, true);
}
if (!file_exists(NEWS_IMAGES_DIR)) {
    mkdir(NEWS_IMAGES_DIR, 0755, true);
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ú–ò –î–ê–ù–ù–´–ú–ò ===

function loadDynamicData() {
    $jsonFile = __DIR__ . '/data.json';
    if (file_exists($jsonFile)) {
        $data = json_decode(file_get_contents($jsonFile), true);
        return $data ?: null;
    }
    return null;
}

function saveDynamicData($data) {
    $jsonFile = __DIR__ . '/data.json';
    $result = file_put_contents($jsonFile, json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
    return $result !== false;
}

function initializeDynamicData() {
    $dynamicData = loadDynamicData();
    if (!$dynamicData) {
        // –°–æ–∑–¥–∞–µ–º JSON –∏–∑ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $initialData = [
            'products' => getOriginalProducts(),
            'categories' => getOriginalCategories(),
            'orders' => getOriginalOrders(),
            'reviews' => getOriginalReviews(),
            'news' => getOriginalNews(),
            'settings' => getSiteSettings(),
            'last_updated' => date('Y-m-d H:i:s')
        ];
        saveDynamicData($initialData);
        return $initialData;
    }
    return $dynamicData;
}

// === –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ó–ê–ì–†–£–ó–ö–ò –§–û–¢–û ===

function uploadProductImages($files) {
    $uploadedImages = [];
    $allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    $maxSize = 10 * 1024 * 1024; // 10MB

    if (!isset($files['images'])) {
        return ['success' => true, 'images' => []];
    }

    $images = $files['images'];

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    if (!is_array($images['name'])) {
        $images = [
            'name' => [$images['name']],
            'type' => [$images['type']],
            'tmp_name' => [$images['tmp_name']],
            'error' => [$images['error']],
            'size' => [$images['size']]
        ];
    }

    for ($i = 0; $i < count($images['name']); $i++) {
        if ($images['error'][$i] === UPLOAD_ERR_NO_FILE) continue;

        if ($images['error'][$i] !== UPLOAD_ERR_OK) {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' . $images['name'][$i]];
        }

        if ($images['size'][$i] > $maxSize) {
            return ['success' => false, 'message' => '–§–∞–π–ª ' . $images['name'][$i] . ' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10MB)'];
        }

        if (!in_array($images['type'][$i], $allowedTypes)) {
            return ['success' => false, 'message' => '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ' . $images['name'][$i]];
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        $extension = pathinfo($images['name'][$i], PATHINFO_EXTENSION);
        $fileName = 'product_' . time() . '_' . $i . '_' . uniqid() . '.' . $extension;
        $filePath = PRODUCT_IMAGES_DIR . $fileName;

        if (move_uploaded_file($images['tmp_name'][$i], $filePath)) {
            $uploadedImages[] = PRODUCT_IMAGES_DIR . $fileName;
        } else {
            return ['success' => false, 'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: ' . $images['name'][$i]];
        }
    }

    return ['success' => true, 'images' => $uploadedImages];
}

function deleteProductImage($imagePath) {
    if (file_exists($imagePath)) {
        return unlink($imagePath);
    }
    return true;
}

// === –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –ö–ê–¢–ï–ì–û–†–ò–ô ===
function getCategories() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['categories'])) {
        return $dynamicData['categories'];
    }
    return getOriginalCategories();
}

function getOriginalCategories() {
    return [
        [
            'id' => 1,
            'name' => '–†—ã–±–∫–∏',
            'slug' => 'fish',
            'icon' => 'üê†',
            'description' => '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –∏ –ø—Ä–µ—Å–Ω–æ–≤–æ–¥–Ω—ã–µ —Ä—ã–±–∫–∏',
            'active' => true,
            'sort_order' => 1,
            'seo_title' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏ - –∫—É–ø–∏—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã—Ö —Ä—ã–±–æ–∫. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 2,
            'name' => '–†–∞—Å—Ç–µ–Ω–∏—è',
            'slug' => 'plants',
            'icon' => 'üå±',
            'description' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤',
            'active' => true,
            'sort_order' => 2,
            'seo_title' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è - –∫–∞—Ç–∞–ª–æ–≥ –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ñ–∏–≤—ã–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ª—é–±–æ–≥–æ –∞–∫–≤–∞—Ä–∏—É–º–∞.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 3,
            'name' => '–ê–∫–≤–∞—Ä–∏—É–º—ã',
            'slug' => 'aquariums',
            'icon' => 'üè†',
            'description' => '–ê–∫–≤–∞—Ä–∏—É–º—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤',
            'active' => true,
            'sort_order' => 3,
            'seo_title' => '–ö—É–ø–∏—Ç—å –∞–∫–≤–∞—Ä–∏—É–º - –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –æ—Ç 25 –¥–æ 500 –ª–∏—Ç—Ä–æ–≤. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 4,
            'name' => '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
            'slug' => 'equipment',
            'icon' => '‚öôÔ∏è',
            'description' => '–§–∏–ª—å—Ç—Ä—ã, –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ',
            'active' => true,
            'sort_order' => 4,
            'seo_title' => '–ê–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ - –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–§–∏–ª—å—Ç—Ä—ã, –æ—Å–≤–µ—â–µ–Ω–∏–µ, –Ω–∞–≥—Ä–µ–≤–∞—Ç–µ–ª–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 5,
            'name' => '–ö–æ—Ä–º–∞',
            'slug' => 'food',
            'icon' => 'üçΩÔ∏è',
            'description' => '–°—É—Ö–∏–µ –∏ –∂–∏–≤—ã–µ –∫–æ—Ä–º–∞',
            'active' => true,
            'sort_order' => 5,
            'seo_title' => '–ö–æ—Ä–º –¥–ª—è —Ä—ã–± - –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–º–∞ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã—Ö —Ä—ã–± –∏ –∫—Ä–µ–≤–µ—Ç–æ–∫.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 6,
            'name' => '–î–µ–∫–æ—Ä–∞—Ü–∏–∏',
            'slug' => 'decorations',
            'icon' => 'üóø',
            'description' => '–ö–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏, —É–∫—Ä–∞—à–µ–Ω–∏—è',
            'active' => true,
            'sort_order' => 6,
            'seo_title' => '–î–µ–∫–æ—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ - –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Ä—è–≥–∏, –∫–∞–º–Ω–∏, –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 7,
            'name' => '–ì—Ä—É–Ω—Ç—ã',
            'slug' => 'substrates',
            'icon' => 'üèîÔ∏è',
            'description' => '–ì—Ä—É–Ω—Ç—ã –∏ —Å—É–±—Å—Ç—Ä–∞—Ç—ã',
            'active' => true,
            'sort_order' => 7,
            'seo_title' => '–ì—Ä—É–Ω—Ç –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ - –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ü–∏—Ç–∞—Ç–µ–ª—å–Ω—ã–µ –≥—Ä—É–Ω—Ç—ã, –ø–µ—Å–æ–∫, –≥–∞–ª—å–∫–∞ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ],
        [
            'id' => 8,
            'name' => '–•–∏–º–∏—è',
            'slug' => 'chemistry',
            'icon' => 'üß™',
            'description' => '–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã –¥–ª—è –≤–æ–¥—ã',
            'active' => true,
            'sort_order' => 8,
            'seo_title' => '–•–∏–º–∏—è –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞ - –ê–∫–≤–∞–°–±–æ—Ä',
            'seo_description' => '–ö–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä—ã, —É–¥–æ–±—Ä–µ–Ω–∏—è, —Ç–µ—Å—Ç—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–π –≤–æ–¥—ã.',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ]
    ];
}

// === –£–õ–£–ß–®–ï–ù–ù–´–ô –ú–û–î–£–õ–¨ –¢–û–í–ê–†–û–í ===
function getProducts() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['products'])) {
        return $dynamicData['products'];
    }
    return getOriginalProducts();
}

function getOriginalProducts() {
    $productData = [
        // –†—ã–±–∫–∏ (category_id: 1)
        ['name' => '–ù–µ–æ–Ω –≥–æ–ª—É–±–æ–π —Å—Ç–∞–π–∫–∞ (10 —à—Ç)', 'category_id' => 1, 'price' => 450, 'old_price' => 500, 'stock' => 25],
        ['name' => '–ì—É–ø–ø–∏ –º–∏–∫—Å —Ä–∞—Å—Ü–≤–µ—Ç–æ–∫ (–ø–∞—Ä–∞)', 'category_id' => 1, 'price' => 200, 'old_price' => null, 'stock' => 30],
        ['name' => '–î–∞–Ω–∏–æ —Ä–µ—Ä–∏–æ –ø–æ–ª–æ—Å–∞—Ç—ã–π (5 —à—Ç)', 'category_id' => 1, 'price' => 300, 'old_price' => null, 'stock' => 20],
        ['name' => '–ú–µ—á–µ–Ω–æ—Å–µ—Ü –∫—Ä–∞—Å–Ω—ã–π (–ø–∞—Ä–∞)', 'category_id' => 1, 'price' => 350, 'old_price' => 400, 'stock' => 15],
        ['name' => '–ü–µ—Ç—É—à–æ–∫ –±–æ–π—Ü–æ–≤–∞—è —Ä—ã–±–∫–∞', 'category_id' => 1, 'price' => 500, 'old_price' => null, 'stock' => 12],
        ['name' => '–°–∫–∞–ª—è—Ä–∏—è —Å–µ—Ä–µ–±—Ä–∏—Å—Ç–∞—è –º–æ–ª–æ–¥—å', 'category_id' => 1, 'price' => 800, 'old_price' => 900, 'stock' => 8],
        ['name' => '–ö–æ—Ä–∏–¥–æ—Ä–∞—Å –ø–∞–Ω–¥–∞ (3 —à—Ç)', 'category_id' => 1, 'price' => 600, 'old_price' => null, 'stock' => 18],
        ['name' => '–ê–Ω—Ü–∏—Å—Ç—Ä—É—Å –æ–±—ã–∫–Ω–æ–≤–µ–Ω–Ω—ã–π', 'category_id' => 1, 'price' => 250, 'old_price' => null, 'stock' => 22],
        ['name' => '–ë–∞—Ä–±—É—Å —Å—É–º–∞—Ç—Ä–∞–Ω—Å–∫–∏–π (4 —à—Ç)', 'category_id' => 1, 'price' => 400, 'old_price' => null, 'stock' => 16],
        ['name' => '–î–∏—Å–∫—É—Å –∫—Ä–∞—Å–Ω—ã–π —Ç—É—Ä–∫—É–∞–∑', 'category_id' => 1, 'price' => 2500, 'old_price' => 3000, 'stock' => 3],

        // –†–∞—Å—Ç–µ–Ω–∏—è (category_id: 2)
        ['name' => '–ê–Ω—É–±–∏–∞—Å –ë–∞—Ä—Ç–µ—Ä–∞ –Ω–∞–Ω–∞', 'category_id' => 2, 'price' => 350, 'old_price' => null, 'stock' => 45],
        ['name' => '–≠—Ö–∏–Ω–æ–¥–æ—Ä—É—Å –ê–º–∞–∑–æ–Ω—Å–∫–∏–π', 'category_id' => 2, 'price' => 400, 'old_price' => 450, 'stock' => 32],
        ['name' => '–í–∞–ª–ª–∏—Å–Ω–µ—Ä–∏—è —Å–ø–∏—Ä–∞–ª—å–Ω–∞—è –ø—É—á–æ–∫', 'category_id' => 2, 'price' => 200, 'old_price' => null, 'stock' => 50],
        ['name' => '–ö—Ä–∏–ø—Ç–æ–∫–æ—Ä–∏–Ω–∞ –í–µ–Ω–¥—Ç–∞', 'category_id' => 2, 'price' => 300, 'old_price' => null, 'stock' => 28],
        ['name' => '–õ—é–¥–≤–∏–≥–∏—è –∫—Ä–∞—Å–Ω–∞—è', 'category_id' => 2, 'price' => 250, 'old_price' => null, 'stock' => 35],
        ['name' => '–ú–æ—Ö —è–≤–∞–Ω—Å–∫–∏–π –Ω–∞ –∫–æ—Ä—è–≥–µ', 'category_id' => 2, 'price' => 500, 'old_price' => 600, 'stock' => 12],
        ['name' => '–ö–∞–±–æ–º–±–∞ –∫–∞—Ä–æ–ª–∏–Ω—Å–∫–∞—è –ø—É—á–æ–∫', 'category_id' => 2, 'price' => 180, 'old_price' => null, 'stock' => 40],
        ['name' => '–•–µ–º–∏–∞–Ω—Ç—É—Å –∫—É–±–∞ (–ø–æ—Ä—Ü–∏—è)', 'category_id' => 2, 'price' => 400, 'old_price' => null, 'stock' => 15],
        ['name' => '–†–æ—Ç–∞–ª–∏—è –∏–Ω–¥–∏–π—Å–∫–∞—è', 'category_id' => 2, 'price' => 220, 'old_price' => null, 'stock' => 38],
        ['name' => '–≠–ª–æ–¥–µ—è –∫–∞–Ω–∞–¥—Å–∫–∞—è –ø—É—á–æ–∫', 'category_id' => 2, 'price' => 150, 'old_price' => null, 'stock' => 42],

        // –ê–∫–≤–∞—Ä–∏—É–º—ã (category_id: 3)
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π 50–ª —Å –∫—Ä—ã—à–∫–æ–π', 'category_id' => 3, 'price' => 3500, 'old_price' => 4000, 'stock' => 8],
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º —É–≥–ª–æ–≤–æ–π 80–ª', 'category_id' => 3, 'price' => 5500, 'old_price' => null, 'stock' => 5],
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º –ø–∞–Ω–æ—Ä–∞–º–Ω—ã–π 120–ª', 'category_id' => 3, 'price' => 8500, 'old_price' => 9500, 'stock' => 3],
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º –Ω–∞–Ω–æ 25–ª —Å –æ—Å–≤–µ—â–µ–Ω–∏–µ–º', 'category_id' => 3, 'price' => 2800, 'old_price' => null, 'stock' => 12],
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º —Ç—Ä–∞–≤–Ω–∏–∫ 100–ª', 'category_id' => 3, 'price' => 7200, 'old_price' => null, 'stock' => 6],
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º –º–æ—Ä—Å–∫–æ–π 200–ª', 'category_id' => 3, 'price' => 15000, 'old_price' => 17000, 'stock' => 2],
        ['name' => '–ê–∫–≤–∞—Ä–∏—É–º –∫—Ä–µ–≤–µ—Ç–æ—á–Ω–∏–∫ 30–ª', 'category_id' => 3, 'price' => 2200, 'old_price' => null, 'stock' => 10],

        // –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (category_id: 4)
        ['name' => '–§–∏–ª—å—Ç—Ä –≤–Ω–µ—à–Ω–∏–π EHEIM Classic 2213', 'category_id' => 4, 'price' => 8500, 'old_price' => 9200, 'stock' => 7],
        ['name' => '–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä Schego M2K3', 'category_id' => 4, 'price' => 2800, 'old_price' => null, 'stock' => 15],
        ['name' => '–ù–∞–≥—Ä–µ–≤–∞—Ç–µ–ª—å Aquael 100W', 'category_id' => 4, 'price' => 1200, 'old_price' => null, 'stock' => 25],
        ['name' => '–û—Å–≤–µ—â–µ–Ω–∏–µ LED Chihiros A-Series 60—Å–º', 'category_id' => 4, 'price' => 4500, 'old_price' => 5000, 'stock' => 9],
        ['name' => 'CO2 —Å–∏—Å—Ç–µ–º–∞ JBL ProFlora', 'category_id' => 4, 'price' => 12000, 'old_price' => null, 'stock' => 4],
        ['name' => '–£–§ —Å—Ç–µ—Ä–∏–ª–∏–∑–∞—Ç–æ—Ä 11W', 'category_id' => 4, 'price' => 3200, 'old_price' => null, 'stock' => 11],
        ['name' => '–ü–æ–º–ø–∞ —Ç–µ—á–µ–Ω–∏—è Tunze 6020', 'category_id' => 4, 'price' => 6500, 'old_price' => 7000, 'stock' => 6],

        // –ö–æ—Ä–º–∞ (category_id: 5)
        ['name' => 'TetraMin —Ö–ª–æ–ø—å—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–º 250–º–ª', 'category_id' => 5, 'price' => 350, 'old_price' => null, 'stock' => 50],
        ['name' => '–ê—Ä—Ç–µ–º–∏—è –∂–∏–≤–∞—è Science 100–º–ª', 'category_id' => 5, 'price' => 200, 'old_price' => null, 'stock' => 35],
        ['name' => '–ú–æ—Ç—ã–ª—å –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π 100–≥', 'category_id' => 5, 'price' => 180, 'old_price' => null, 'stock' => 28],
        ['name' => 'Spirulina —Å–ø–∏—Ä—É–ª–∏–Ω–∞ —Ç–∞–±–ª–µ—Ç–∫–∏', 'category_id' => 5, 'price' => 420, 'old_price' => 480, 'stock' => 22],
        ['name' => 'Cyclops –∑–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–π 100–≥', 'category_id' => 5, 'price' => 160, 'old_price' => null, 'stock' => 30],
        ['name' => 'Tubifex –∂–∏–≤–æ–π —Ç—Ä—É–±–æ—á–Ω–∏–∫', 'category_id' => 5, 'price' => 150, 'old_price' => null, 'stock' => 25],

        // –î–µ–∫–æ—Ä–∞—Ü–∏–∏ (category_id: 6)
        ['name' => '–ö–æ—Ä—è–≥–∞ –º–∞–Ω–≥—Ä–æ–≤–∞—è –±–æ–ª—å—à–∞—è 40-50—Å–º', 'category_id' => 6, 'price' => 1200, 'old_price' => null, 'stock' => 8],
        ['name' => '–ö–∞–º–µ–Ω—å –¥—Ä–∞–∫–æ–Ω –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π 2-3–∫–≥', 'category_id' => 6, 'price' => 800, 'old_price' => 900, 'stock' => 12],
        ['name' => '–ü–µ—â–µ—Ä–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è —Å—Ä–µ–¥–Ω—è—è', 'category_id' => 6, 'price' => 450, 'old_price' => null, 'stock' => 18],
        ['name' => '–ó–∞–º–æ–∫ —Å—Ä–µ–¥–Ω–µ–≤–µ–∫–æ–≤—ã–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π', 'category_id' => 6, 'price' => 650, 'old_price' => null, 'stock' => 15],
        ['name' => '–ö–æ—Ä–∞–±–ª—å –ø–∏—Ä–∞—Ç—Å–∫–∏–π –±–æ–ª—å—à–æ–π', 'category_id' => 6, 'price' => 950, 'old_price' => 1100, 'stock' => 7],

        // –ì—Ä—É–Ω—Ç—ã (category_id: 7)
        ['name' => '–ì—Ä—É–Ω—Ç ADA Amazonia 3–ª', 'category_id' => 7, 'price' => 1800, 'old_price' => 2000, 'stock' => 20],
        ['name' => '–ü–µ—Å–æ–∫ –∫–≤–∞—Ä—Ü–µ–≤—ã–π –º–µ–ª–∫–∏–π 5–∫–≥', 'category_id' => 7, 'price' => 350, 'old_price' => null, 'stock' => 45],
        ['name' => '–ì—Ä–∞–≤–∏–π —Ä–µ—á–Ω–æ–π 2-5–º–º 10–∫–≥', 'category_id' => 7, 'price' => 450, 'old_price' => null, 'stock' => 35],
        ['name' => '–õ–∞–≤–∞ –≤—É–ª–∫–∞–Ω–∏—á–µ—Å–∫–∞—è —Ñ—Ä–∞–∫—Ü–∏—è 5-10–º–º', 'category_id' => 7, 'price' => 600, 'old_price' => null, 'stock' => 25],

        // –•–∏–º–∏—è (category_id: 8)
        ['name' => 'Tetra AquaSafe –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä 250–º–ª', 'category_id' => 8, 'price' => 420, 'old_price' => null, 'stock' => 40],
        ['name' => 'AlgaeX —Å—Ä–µ–¥—Å—Ç–≤–æ –æ—Ç –≤–æ–¥–æ—Ä–æ—Å–ª–µ–π', 'category_id' => 8, 'price' => 380, 'old_price' => 420, 'stock' => 28],
        ['name' => 'Sera Filter Biostart –±–∞–∫—Ç–µ—Ä–∏–∏', 'category_id' => 8, 'price' => 350, 'old_price' => null, 'stock' => 32],
        ['name' => 'pH –±—É—Ñ–µ—Ä KH+ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä', 'category_id' => 8, 'price' => 280, 'old_price' => null, 'stock' => 35],
        ['name' => '–¢–µ—Å—Ç –ø–æ–ª–æ—Å–∫–∏ 6–≤1', 'category_id' => 8, 'price' => 450, 'old_price' => 500, 'stock' => 25]
    ];

    $products = [];
    $categories = getOriginalCategories();
    $categoryMap = array_column($categories, 'name', 'id');

    foreach ($productData as $index => $item) {
        $products[] = [
            'id' => $index + 1,
            'name' => $item['name'],
            'slug' => generateSlug($item['name']),
            'description' => getProductDescription($item['name']),
            'short_description' => getShortDescription($item['name']),
            'price' => $item['price'],
            'old_price' => $item['old_price'],
            'category_id' => $item['category_id'],
            'category' => $categoryMap[$item['category_id']] ?? '–†–∞–∑–Ω–æ–µ',
            'sku' => 'AQ-' . str_pad($index + 1, 4, '0', STR_PAD_LEFT),
            'stock' => $item['stock'] ?? rand(0, 50),
            'weight' => rand(50, 2000), // –≥—Ä–∞–º–º—ã
            'dimensions' => [
                'length' => rand(5, 50),
                'width' => rand(5, 30),
                'height' => rand(5, 25)
            ],
            'images' => [], // –ú–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'is_featured' => rand(0, 4) == 0, // 25% –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö
            'is_new' => rand(0, 5) == 0, // 20% –Ω–æ–≤—ã—Ö
            'is_active' => rand(0, 10) > 0, // 90% –∞–∫—Ç–∏–≤–Ω—ã—Ö
            'views' => rand(10, 500),
            'sales' => rand(0, 50),
            'rating' => rand(35, 50) / 10,
            'reviews_count' => rand(0, 25),
            'meta_title' => $item['name'] . ' - –∫—É–ø–∏—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä',
            'meta_description' => '–ö—É–ø–∏—Ç—å ' . $item['name'] . ' —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.',
            'meta_keywords' => '–∞–∫–≤–∞—Ä–∏—É–º, —Ä—ã–±–∫–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è, ' . strtolower($item['name']),
            'created_at' => date('Y-m-d H:i:s', strtotime('-' . rand(1, 365) . ' days')),
            'updated_at' => date('Y-m-d H:i:s', strtotime('-' . rand(1, 30) . ' days'))
        ];
    }

    return $products;
}

// === –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –°–û–ó–î–ê–ù–ò–Ø/–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –¢–û–í–ê–†–û–í ===

function createProduct($data, $files = null) {
    try {
        $dynamicData = initializeDynamicData();
        $products = $dynamicData['products'];

        $newId = empty($products) ? 1 : (max(array_column($products, 'id')) + 1);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        $images = [];
        if ($files && isset($files['images'])) {
            $uploadResult = uploadProductImages($files);
            if (!$uploadResult['success']) {
                return $uploadResult;
            }
            $images = $uploadResult['images'];
        }

        $newProduct = [
            'id' => $newId,
            'name' => trim($data['name'] ?? ''),
            'slug' => generateSlug($data['name'] ?? ''),
            'description' => trim($data['description'] ?? ''),
            'short_description' => trim($data['short_description'] ?? ''),
            'price' => (float)($data['price'] ?? 0),
            'old_price' => !empty($data['old_price']) ? (float)$data['old_price'] : null,
            'category_id' => (int)($data['category_id'] ?? 1),
            'category' => getCategoryById($data['category_id'])['name'] ?? '–†–∞–∑–Ω–æ–µ',
            'sku' => trim($data['sku']) ?: ('AQ-' . str_pad($newId, 4, '0', STR_PAD_LEFT)),
            'stock' => (int)($data['stock'] ?? 0),
            'weight' => (int)($data['weight'] ?? 100),
            'dimensions' => [
                'length' => (int)($data['length'] ?? 10),
                'width' => (int)($data['width'] ?? 10),
                'height' => (int)($data['height'] ?? 10)
            ],
            'images' => $images,
            'is_featured' => !empty($data['is_featured']),
            'is_new' => !empty($data['is_new']),
            'is_active' => !empty($data['is_active']),
            'views' => 0,
            'sales' => 0,
            'rating' => 0,
            'reviews_count' => 0,
            'meta_title' => trim($data['meta_title']) ?: $data['name'] . ' - –∫—É–ø–∏—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä',
            'meta_description' => trim($data['meta_description']) ?: '–ö—É–ø–∏—Ç—å ' . $data['name'] . ' —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.',
            'meta_keywords' => trim($data['meta_keywords']) ?: '–∞–∫–≤–∞—Ä–∏—É–º, —Ä—ã–±–∫–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è',
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['products'][] = $newProduct;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'product' => $newProduct];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

function updateProduct($id, $data, $files = null, $newImages = null) {
    try {
        $dynamicData = initializeDynamicData();
        $products = &$dynamicData['products'];

        $productIndex = array_search($id, array_column($products, 'id'));
        if ($productIndex === false) {
            return ['success' => false, 'message' => '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        }

        $product = &$products[$productIndex];

        // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
        if ($newImages !== null) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ
            foreach ($product['images'] as $oldImage) {
                if (!in_array($oldImage, $newImages)) {
                    deleteProductImage($oldImage);
                }
            }
            $product['images'] = array_values($newImages);
        } else {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –Ω–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if ($files && isset($files['images']) && !empty($files['images']['name'][0])) {
                $uploadResult = uploadProductImages($files);
                if (!$uploadResult['success']) {
                    return $uploadResult;
                }
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                $product['images'] = array_merge($product['images'] ?? [], $uploadResult['images']);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
        $updateableFields = [
            'name', 'description', 'short_description', 'price', 'old_price',
            'category_id', 'stock', 'weight', 'meta_title', 'meta_description', 'meta_keywords', 'sku'
        ];

        foreach ($updateableFields as $field) {
            if (isset($data[$field])) {
                if ($field === 'old_price' && empty($data[$field])) {
                    $product[$field] = null;
                } elseif (in_array($field, ['price', 'old_price'])) {
                    $product[$field] = (float)$data[$field];
                } elseif (in_array($field, ['stock', 'weight', 'category_id'])) {
                    $product[$field] = (int)$data[$field];
                } else {
                    $product[$field] = trim($data[$field]);
                }
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±—É–ª–µ–≤—ã –ø–æ–ª—è
        $boolFields = ['is_featured', 'is_new', 'is_active'];
        foreach ($boolFields as $field) {
            if (array_key_exists($field, $data)) {
                $product[$field] = !empty($data[$field]);
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
        if (isset($data['length'])) $product['dimensions']['length'] = (int)$data['length'];
        if (isset($data['width'])) $product['dimensions']['width'] = (int)$data['width'];
        if (isset($data['height'])) $product['dimensions']['height'] = (int)$data['height'];

        // –û–±–Ω–æ–≤–ª—è–µ–º slug –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–∞–∑–≤–∞–Ω–∏–µ
        if (isset($data['name'])) {
            $product['slug'] = generateSlug($data['name']);
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
        if (isset($data['category_id'])) {
            $category = getCategoryById($data['category_id']);
            $product['category'] = $category ? $category['name'] : '–†–∞–∑–Ω–æ–µ';
        }

        $product['updated_at'] = date('Y-m-d H:i:s');
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'product' => $product];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

function deleteProduct($id) {
    try {
        $dynamicData = initializeDynamicData();
        $products = &$dynamicData['products'];

        $productIndex = array_search($id, array_column($products, 'id'));
        if ($productIndex === false) {
            return ['success' => false, 'message' => '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        }

        $product = $products[$productIndex];

        // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
        if (!empty($product['images'])) {
            foreach ($product['images'] as $image) {
                deleteProductImage($image);
            }
        }

        array_splice($products, $productIndex, 1);

        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'product' => $product];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –ú–ê–°–°–û–í–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –¢–û–í–ê–†–ê–ú–ò ===

function bulkUpdateProducts($ids, $action, $data = []) {
    try {
        $dynamicData = initializeDynamicData();
        $products = &$dynamicData['products'];
        $updated = 0;

        foreach ($products as &$product) {
            if (in_array($product['id'], $ids)) {
                switch ($action) {
                    case 'activate':
                        $product['is_active'] = true;
                        break;
                    case 'deactivate':
                        $product['is_active'] = false;
                        break;
                    case 'delete':
                        // –ü–æ–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                        $product['_delete'] = true;
                        break;
                    case 'update_category':
                        if (isset($data['category_id'])) {
                            $product['category_id'] = (int)$data['category_id'];
                            $category = getCategoryById($data['category_id']);
                            $product['category'] = $category ? $category['name'] : '–†–∞–∑–Ω–æ–µ';
                        }
                        break;
                    case 'update_stock':
                        if (isset($data['stock'])) {
                            $product['stock'] = (int)$data['stock'];
                        }
                        break;
                }
                $product['updated_at'] = date('Y-m-d H:i:s');
                $updated++;
            }
        }

        // –£–¥–∞–ª—è–µ–º –ø–æ–º–µ—á–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        if ($action === 'delete') {
            $products = array_filter($products, function($product) {
                if (isset($product['_delete'])) {
                    // –£–¥–∞–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    if (!empty($product['images'])) {
                        foreach ($product['images'] as $image) {
                            deleteProductImage($image);
                        }
                    }
                    return false;
                }
                return true;
            });
            $products = array_values($products); // –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –º–∞—Å—Å–∏–≤
        }

        $dynamicData['products'] = $products;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => "–û–±–Ω–æ–≤–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: $updated"];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–¢–ï–ì–û–†–ò–Ø–ú–ò ===

function createCategory($data) {
    try {
        $dynamicData = initializeDynamicData();
        $categories = $dynamicData['categories'];

        $newId = empty($categories) ? 1 : (max(array_column($categories, 'id')) + 1);

        $newCategory = [
            'id' => $newId,
            'name' => trim($data['name'] ?? ''),
            'slug' => generateSlug($data['name'] ?? ''),
            'icon' => trim($data['icon']) ?: 'üì¶',
            'description' => trim($data['description'] ?? ''),
            'active' => !empty($data['active']),
            'sort_order' => (int)($data['sort_order'] ?? 999),
            'seo_title' => trim($data['seo_title'] ?? ''),
            'seo_description' => trim($data['seo_description'] ?? ''),
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['categories'][] = $newCategory;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'category' => $newCategory];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

function updateCategory($id, $data) {
    try {
        $dynamicData = initializeDynamicData();
        $categories = &$dynamicData['categories'];

        $categoryIndex = array_search($id, array_column($categories, 'id'));
        if ($categoryIndex === false) {
            return ['success' => false, 'message' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'];
        }

        $category = &$categories[$categoryIndex];

        $updateableFields = ['name', 'icon', 'description', 'sort_order', 'seo_title', 'seo_description'];
        foreach ($updateableFields as $field) {
            if (isset($data[$field])) {
                if ($field === 'sort_order') {
                    $category[$field] = (int)$data[$field];
                } else {
                    $category[$field] = trim($data[$field]);
                }
            }
        }

        if (array_key_exists('active', $data)) {
            $category['active'] = !empty($data['active']);
        }

        if (isset($data['name'])) {
            $category['slug'] = generateSlug($data['name']);
        }

        $category['updated_at'] = date('Y-m-d H:i:s');
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

function deleteCategory($id) {
    try {
        $dynamicData = initializeDynamicData();
        $categories = &$dynamicData['categories'];

        $categoryIndex = array_search($id, array_column($categories, 'id'));
        if ($categoryIndex === false) {
            return ['success' => false, 'message' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'];
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $products = $dynamicData['products'];
        $hasProducts = array_filter($products, fn($p) => $p['category_id'] == $id);

        if (!empty($hasProducts)) {
            return ['success' => false, 'message' => '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å —Ç–æ–≤–∞—Ä–∞–º–∏. –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.'];
        }

        array_splice($categories, $categoryIndex, 1);
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –ó–ê–ö–ê–ó–´ ===
function getOrders() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['orders'])) {
        return $dynamicData['orders'];
    }
    return getOriginalOrders();
}

function getOriginalOrders() {
    $statuses = ['new', 'processing', 'shipped', 'delivered', 'cancelled'];
    $statusLabels = [
        'new' => '–ù–æ–≤—ã–π',
        'processing' => '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
        'shipped' => '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
        'delivered' => '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
        'cancelled' => '–û—Ç–º–µ–Ω–µ–Ω'
    ];

    $orders = [];
    for ($i = 1; $i <= 50; $i++) {
        $status = $statuses[array_rand($statuses)];
        $orderDate = date('Y-m-d H:i:s', strtotime('-' . rand(1, 90) . ' days'));

        $orders[] = [
            'id' => $i,
            'order_number' => 'AQ-' . date('Y', strtotime($orderDate)) . '-' . str_pad($i, 4, '0', STR_PAD_LEFT),
            'customer_name' => '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ' . $i,
            'customer_email' => 'customer' . $i . '@example.com',
            'customer_phone' => '+7 (999) ' . rand(100, 999) . '-' . rand(10, 99) . '-' . rand(10, 99),
            'total_amount' => rand(500, 15000),
            'status' => $status,
            'status_label' => $statusLabels[$status],
            'payment_method' => rand(0, 1) ? 'card' : 'cash',
            'delivery_method' => rand(0, 1) ? 'delivery' : 'pickup',
            'delivery_address' => '–≥. ' . ['–ú–æ—Å–∫–≤–∞', '–°–ü–±', '–ö–∞–∑–∞–Ω—å', '–ú–∏–Ω—Å–∫', '–ê–ª–º–∞—Ç—ã'][rand(0, 4)] . ', —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è ' . rand(1, 100),
            'items_count' => rand(1, 8),
            'notes' => rand(0, 3) == 0 ? '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É ‚Ññ' . $i : '',
            'created_at' => $orderDate,
            'updated_at' => date('Y-m-d H:i:s', strtotime($orderDate . ' +' . rand(1, 5) . ' days'))
        ];
    }

    return $orders;
}

// === –û–¢–ó–´–í–´ ===
function getReviews() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['reviews'])) {
        return $dynamicData['reviews'];
    }
    return getOriginalReviews();
}

function getOriginalReviews() {
    $reviews = [];
    $products = getProducts();

    for ($i = 1; $i <= 75; $i++) {
        $product = $products[array_rand($products)];
        $rating = rand(3, 5);

        $reviews[] = [
            'id' => $i,
            'product_id' => $product['id'],
            'product_name' => $product['name'],
            'customer_name' => '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å ' . $i,
            'customer_email' => 'customer' . $i . '@example.com',
            'rating' => $rating,
            'title' => $rating >= 4 ? '–û—Ç–ª–∏—á–Ω—ã–π —Ç–æ–≤–∞—Ä!' : '–ù–µ–ø–ª–æ—Ö–æ',
            'text' => $rating >= 4 ? '–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –ø–æ–∫—É–ø–∫–æ–π, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!' : '–¢–æ–≤–∞—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é.',
            'is_approved' => rand(0, 5) > 0, // 80% –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö
            'is_featured' => rand(0, 10) == 0, // 10% –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö
            'created_at' => date('Y-m-d H:i:s', strtotime('-' . rand(1, 180) . ' days'))
        ];
    }

    return $reviews;
}

// === –ù–û–í–û–°–¢–ò ===
function getNews() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['news'])) {
        return $dynamicData['news'];
    }
    return getOriginalNews();
}

function getOriginalNews() {
    $newsData = [
        '–ù–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π',
        '–°–∫–∏–¥–∫–∏ –Ω–∞ –∞–∫–≤–∞—Ä–∏—É–º—ã –¥–æ 30%',
        '–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –º–æ—Ä—Å–∫–æ–π –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–∏',
        '–í–µ—Å–µ–Ω–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è',
        '–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ —è–ø–æ–Ω—Å–∫–∏—Ö —Ä—ã–±–æ–∫',
        '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –∑–∞–ø—É—Å–∫—É –∞–∫–≤–∞—Ä–∏—É–º–∞',
        '–ù–æ–≤–∞—è –ª–∏–Ω–µ–π–∫–∞ –∫–æ—Ä–º–æ–≤ –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞',
        '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏'
    ];

    $news = [];
    foreach ($newsData as $index => $title) {
        $news[] = [
            'id' => $index + 1,
            'title' => $title,
            'slug' => generateSlug($title),
            'excerpt' => '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: ' . $title,
            'content' => '<p>–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –æ ' . strtolower($title) . '. –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.</p>',
            'image' => '',
            'is_published' => rand(0, 3) > 0, // 75% –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
            'is_featured' => rand(0, 4) == 0, // 25% –≤–∞–∂–Ω—ã—Ö
            'views' => rand(50, 500),
            'meta_title' => $title . ' - –ê–∫–≤–∞–°–±–æ—Ä',
            'meta_description' => '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: ' . $title,
            'created_at' => date('Y-m-d H:i:s', strtotime('-' . rand(1, 60) . ' days')),
            'updated_at' => date('Y-m-d H:i:s', strtotime('-' . rand(1, 30) . ' days'))
        ];
    }

    return $news;
}

// === –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–°–¢–ò ===
function createNews($data) {
    try {
        $dynamicData = initializeDynamicData();
        $news = $dynamicData['news'];

        $newId = empty($news) ? 1 : (max(array_column($news, 'id')) + 1);

        $newNews = [
            'id' => $newId,
            'title' => trim($data['title'] ?? ''),
            'slug' => generateSlug($data['title'] ?? ''),
            'excerpt' => trim($data['excerpt'] ?? ''),
            'content' => trim($data['content'] ?? ''),
            'image' => trim($data['image'] ?? ''),
            'is_published' => !empty($data['is_published']),
            'is_featured' => !empty($data['is_featured']),
            'views' => 0,
            'meta_title' => trim($data['meta_title']) ?: $data['title'] . ' - –ê–∫–≤–∞–°–±–æ—Ä',
            'meta_description' => trim($data['meta_description']) ?: '–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏: ' . $data['title'],
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['news'][] = $newNews;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'news' => $newNews];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –§–£–ù–ö–¶–ò–ò –ó–ê–ö–ê–ó–û–í ===
function saveOrder($orderData) {
    try {
        $dynamicData = initializeDynamicData();
        $orders = $dynamicData['orders'] ?? [];

        $newId = empty($orders) ? 1 : (max(array_column($orders, 'id')) + 1);

        $newOrder = array_merge($orderData, [
            'id' => $newId,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ]);

        $dynamicData['orders'][] = $newOrder;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–ó–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'order' => $newOrder];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

function updateOrderStatus($id, $status) {
    try {
        $dynamicData = initializeDynamicData();
        $orders = &$dynamicData['orders'];

        $orderIndex = array_search($id, array_column($orders, 'id'));
        if ($orderIndex === false) {
            return ['success' => false, 'message' => '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'];
        }

        $statusLabels = [
            'new' => '–ù–æ–≤—ã–π',
            'processing' => '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è',
            'shipped' => '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω',
            'delivered' => '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'cancelled' => '–û—Ç–º–µ–Ω–µ–Ω'
        ];

        $orders[$orderIndex]['status'] = $status;
        $orders[$orderIndex]['status_label'] = $statusLabels[$status] ?? $status;
        $orders[$orderIndex]['updated_at'] = date('Y-m-d H:i:s');
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!'];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –ù–ê–°–¢–†–û–ô–ö–ò –°–ê–ô–¢–ê ===
function getSiteSettings() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['settings'])) {
        return $dynamicData['settings'];
    }

    return [
        'site_name' => '–ê–∫–≤–∞–°–±–æ—Ä',
        'site_description' => '–ê–∫–≤–∞—Ä–∏—É–º—ã –∏ –∏—Ö –æ–±–∏—Ç–∞—Ç–µ–ª–∏',
        'site_keywords' => '–∞–∫–≤–∞—Ä–∏—É–º, —Ä—ã–±–∫–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ',
        'admin_email' => 'admin@akvasbor.ru',
        'phone' => '+7 (999) 123-45-67',
        'address' => '–†–æ—Å—Å–∏—è, –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –°–ù–ì',
        'working_hours' => '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ 9:00-21:00',
        'currency' => '‚ÇΩ',
        'products_per_page' => 12,
        'min_order_amount' => 500,
        'free_shipping_from' => 2000,
        'social_vk' => '',
        'social_telegram' => '',
        'social_instagram' => '',
        'social_youtube' => '',
        'google_analytics' => '',
        'yandex_metrika' => '',
        'maintenance_mode' => false
    ];
}

// === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ===

function getCategoryById($id) {
    $categories = getCategories();
    foreach ($categories as $category) {
        if ($category['id'] == $id) {
            return $category;
        }
    }
    return null;
}

function getProductById($id) {
    $products = getProducts();
    foreach ($products as $product) {
        if ($product['id'] == $id) {
            return $product;
        }
    }
    return null;
}

function getProductsByCategory($categoryId) {
    $products = getProducts();
    return array_filter($products, function($product) use ($categoryId) {
        return $product['category_id'] == $categoryId && $product['is_active'];
    });
}

function getFeaturedProducts($limit = 9) {
    $products = getProducts();
    $featured = array_filter($products, function($product) {
        return $product['is_featured'] && $product['is_active'];
    });
    return array_slice($featured, 0, $limit);
}

function getNewProducts($limit = 8) {
    $products = getProducts();
    $new = array_filter($products, function($product) {
        return $product['is_new'] && $product['is_active'];
    });
    return array_slice($new, 0, $limit);
}

function searchProducts($query) {
    $products = getProducts();
    $query = mb_strtolower(trim($query));

    if (empty($query)) {
        return [];
    }

    return array_filter($products, function($product) use ($query) {
        return $product['is_active'] && (
            mb_stripos($product['name'], $query) !== false ||
            mb_stripos($product['description'], $query) !== false ||
            mb_stripos($product['short_description'], $query) !== false ||
            mb_stripos($product['category'], $query) !== false ||
            mb_stripos($product['sku'], $query) !== false
        );
    });
}

function getSimilarProducts($productId, $limit = 4) {
    $product = getProductById($productId);
    if (!$product) return [];

    $categoryProducts = getProductsByCategory($product['category_id']);

    // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
    $categoryProducts = array_filter($categoryProducts, fn($p) => $p['id'] != $productId);

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏ –±–µ—Ä–µ–º –ª–∏–º–∏—Ç
    shuffle($categoryProducts);
    return array_slice($categoryProducts, 0, $limit);
}

function getProductReviews($productId) {
    $reviews = getReviews();
    return array_filter($reviews, function($review) use ($productId) {
        return $review['product_id'] == $productId && $review['is_approved'];
    });
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

function generateSlug($text) {
    $text = mb_strtolower($text, 'UTF-8');
    $text = preg_replace('/[^a-z0-9–∞-—è\s-]/u', '', $text);
    $text = preg_replace('/\s+/', '-', trim($text));
    $text = preg_replace('/-+/', '-', $text);
    return trim($text, '-');
}

function getProductDescription($name) {
    $templates = [
        '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∏ –æ–ø—ã—Ç–Ω—ã—Ö –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–æ–≤.',
        '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏.',
        '–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –∞–∫–≤–∞—Ä–∏—É–º–∞. –•–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏—è—Ö.',
        '–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è.',
        '–ë—ã—Å—Ç—Ä–æ—Ä–∞—Å—Ç—É—â–∏–π –≤–∏–¥, –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤ –∞–∫–≤–∞—Ä–∏—É–º–µ.',
        '–ö—Ä–∞—Å–∏–≤–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–æ–≤ –æ—Ç 50 –ª–∏—Ç—Ä–æ–≤. –°–æ–∑–¥–∞–µ—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É.',
        '–ú–µ–¥–ª–µ–Ω–Ω–æ—Ä–∞—Å—Ç—É—â–∏–π –≤–∏–¥ —Å –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–µ–¥–Ω–µ–≥–æ –ø–ª–∞–Ω–∞.',
        '–í—ã–Ω–æ—Å–ª–∏–≤—ã–π —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è.',
        '–≠—Ñ—Ñ–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –Ω–µ–æ–±—ã—á–Ω—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏. –¢—Ä–µ–±—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É—Ö–æ–¥–∞.',
        '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —á–∏—Å—Ç–æ—Ç—É –∏ —Å–æ–∑–¥–∞–µ—Ç –∫–æ–º—Ñ–æ—Ä—Ç –¥–ª—è –æ–±–∏—Ç–∞—Ç–µ–ª–µ–π.'
    ];

    return $templates[array_rand($templates)];
}

function getShortDescription($name) {
    if (stripos($name, '—Ä–∞—Å—Ç–µ–Ω') !== false) {
        return '–ñ–∏–≤–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ';
    } elseif (stripos($name, '—Ä—ã–±–∫') !== false || stripos($name, '—Ä—ã–±') !== false) {
        return '–ó–¥–æ—Ä–æ–≤—ã–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω—ã–µ —Ä—ã–±–∫–∏';
    } elseif (stripos($name, '–∞–∫–≤–∞—Ä–∏—É–º') !== false) {
        return '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–∫–≤–∞—Ä–∏—É–º —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π';
    } elseif (stripos($name, '–∫–æ—Ä–º') !== false) {
        return '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ—Ä–º –¥–ª—è —Ä—ã–±';
    } elseif (stripos($name, '—Ñ–∏–ª—å—Ç—Ä') !== false || stripos($name, '–∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä') !== false) {
        return '–ù–∞–¥–µ–∂–Ω–æ–µ –∞–∫–≤–∞—Ä–∏—É–º–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ';
    } else {
        return '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';
    }
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º—ã –∫–æ—Ä–∑–∏–Ω—ã –∏ –∑–∞–∫–∞–∑–æ–≤
require_once __DIR__ . '/cart_system.php';
require_once __DIR__ . '/date_functions.php';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
initializeDynamicData();
?>
