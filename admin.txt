<?php
/**
 * Файловая JSON база данных для конструктора визиток
 * @author ART-FOTO Team
 * @version 2.0 MEGA
 */

class Database {
    private $dataPath;
    private $uploadsPath;
    private $templatesPath;
    private $projectsPath;

    public function __construct() {
        $this->dataPath = __DIR__ . '/data/';
        $this->uploadsPath = $this->dataPath . 'uploads/';
        $this->templatesPath = $this->dataPath . 'templates/';
        $this->projectsPath = $this->dataPath . 'projects/';

        $this->initDirectories();
    }

    private function initDirectories() {
        $dirs = [
            $this->dataPath,
            $this->uploadsPath,
            $this->templatesPath,
            $this->projectsPath,
            __DIR__ . '/backups/'
        ];

        foreach ($dirs as $dir) {
            if (!is_dir($dir)) {
                mkdir($dir, 0755, true);
            }
        }

        $htaccess = $this->dataPath . '.htaccess';
        if (!file_exists($htaccess)) {
            file_put_contents($htaccess, "Options -Indexes\nDeny from all");
        }
    }

    // Сохранить проект
    public function saveProject($userId, $projectData) {
        $userId = $this->sanitize($userId);
        $userDir = $this->projectsPath . $userId . '/';

        if (!is_dir($userDir)) {
            mkdir($userDir, 0755, true);
        }

        $projectId = $projectData['id'] ?? $this->generateId();
        $projectData['id'] = $projectId;
        $projectData['userId'] = $userId;
        $projectData['updated'] = date('Y-m-d H:i:s');

        if (!isset($projectData['created'])) {
            $projectData['created'] = $projectData['updated'];
        }

        $file = $userDir . $projectId . '.json';
        $result = file_put_contents($file, json_encode($projectData, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

        return [
            'success' => $result !== false,
            'id' => $projectId,
            'message' => 'Проект сохранён'
        ];
    }

    // Получить проект
    public function getProject($userId, $projectId) {
        $userId = $this->sanitize($userId);
        $projectId = $this->sanitize($projectId);
        $file = $this->projectsPath . $userId . '/' . $projectId . '.json';

        if (file_exists($file)) {
            $data = json_decode(file_get_contents($file), true);
            return [
                'success' => true,
                'data' => $data
            ];
        }

        return [
            'success' => false,
            'error' => 'Проект не найден'
        ];
    }

    // Список проектов пользователя
    public function getUserProjects($userId) {
        $userId = $this->sanitize($userId);
        $userDir = $this->projectsPath . $userId . '/';

        if (!is_dir($userDir)) {
            return [
                'success' => true,
                'data' => []
            ];
        }

        $projects = [];
        foreach (glob($userDir . '*.json') as $file) {
            $data = json_decode(file_get_contents($file), true);
            $projects[] = [
                'id' => $data['id'],
                'name' => $data['name'] ?? 'Без названия',
                'preview' => $data['preview'] ?? null,
                'created' => $data['created'] ?? null,
                'updated' => $data['updated'] ?? null,
                'category' => $data['category'] ?? 'other'
            ];
        }

        usort($projects, function($a, $b) {
            return strtotime($b['updated']) - strtotime($a['updated']);
        });

        return [
            'success' => true,
            'data' => $projects
        ];
    }

    // Удалить проект
    public function deleteProject($userId, $projectId) {
        $userId = $this->sanitize($userId);
        $projectId = $this->sanitize($projectId);
        $file = $this->projectsPath . $userId . '/' . $projectId . '.json';

        if (file_exists($file)) {
            $result = unlink($file);
            return [
                'success' => $result,
                'message' => 'Проект удалён'
            ];
        }

        return [
            'success' => false,
            'error' => 'Проект не найден'
        ];
    }

    // Загрузить изображение
    public function uploadImage($userId, $file) {
        $userId = $this->sanitize($userId);
        $userDir = $this->uploadsPath . $userId . '/';

        if (!is_dir($userDir)) {
            mkdir($userDir, 0755, true);
        }

        // Проверка типа файла
        $allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'];
        if (!in_array($file['type'], $allowedTypes)) {
            return [
                'success' => false,
                'error' => 'Недопустимый тип файла'
            ];
        }

        // Проверка размера (макс 10MB)
        if ($file['size'] > 10485760) {
            return [
                'success' => false,
                'error' => 'Файл слишком большой (макс 10MB)'
            ];
        }

        $hash = md5_file($file['tmp_name']);
        $ext = pathinfo($file['name'], PATHINFO_EXTENSION);
        $filename = $hash . '.' . $ext;
        $filepath = $userDir . $filename;

        if (move_uploaded_file($file['tmp_name'], $filepath)) {
            return [
                'success' => true,
                'url' => '/data/uploads/' . $userId . '/' . $filename,
                'filename' => $filename
            ];
        }

        return [
            'success' => false,
            'error' => 'Ошибка загрузки'
        ];
    }

    // Получить шаблоны
    public function getTemplates($category = null) {
        if ($category) {
            $file = $this->templatesPath . $category . '.json';
            if (file_exists($file)) {
                $data = json_decode(file_get_contents($file), true);
                return [
                    'success' => true,
                    'data' => $data
                ];
            }
            return [
                'success' => false,
                'error' => 'Категория не найдена'
            ];
        }

        // Все категории
        $templates = [];
        foreach (glob($this->templatesPath . '*.json') as $file) {
            $categoryName = basename($file, '.json');
            $data = json_decode(file_get_contents($file), true);
            $templates[$categoryName] = $data;
        }

        return [
            'success' => true,
            'data' => $templates
        ];
    }

    // Получить все категории
    public function getCategories() {
        $categories = [
            'medical' => [
                'name' => 'Медицина',
                'icon' => '⚕️',
                'description' => 'Врачи, клиники, медицинские центры'
            ],
            'business' => [
                'name' => 'Бизнес',
                'icon' => '💼',
                'description' => 'Корпоративные визитки для бизнеса'
            ],
            'creative' => [
                'name' => 'Креатив',
                'icon' => '🎨',
                'description' => 'Дизайнеры, фотографы, художники'
            ],
            'restaurant' => [
                'name' => 'Рестораны',
                'icon' => '🍽️',
                'description' => 'Кафе, рестораны, доставка еды'
            ],
            'realty' => [
                'name' => 'Недвижимость',
                'icon' => '🏠',
                'description' => 'Риелторы, агентства недвижимости'
            ],
            'beauty' => [
                'name' => 'Красота',
                'icon' => '💅',
                'description' => 'Салоны красоты, мастера'
            ]
        ];

        return [
            'success' => true,
            'data' => $categories
        ];
    }

    // Создать резервную копию
    public function createBackup() {
        $backupDir = __DIR__ . '/backups/';
        $date = date('Y-m-d_H-i-s');
        $zipFile = $backupDir . "backup_{$date}.zip";

        $zip = new ZipArchive();
        if ($zip->open($zipFile, ZipArchive::CREATE | ZipArchive::OVERWRITE) === TRUE) {

            $files = new RecursiveIteratorIterator(
                new RecursiveDirectoryIterator($this->dataPath),
                RecursiveIteratorIterator::LEAVES_ONLY
            );

            foreach ($files as $file) {
                if (!$file->isDir()) {
                    $filePath = $file->getRealPath();
                    $relativePath = 'data/' . substr($filePath, strlen($this->dataPath));
                    $zip->addFile($filePath, $relativePath);
                }
            }

            $zip->close();

            // Удалить старые бэкапы (оставить последние 10)
            $backups = glob($backupDir . 'backup_*.zip');
            if (count($backups) > 10) {
                usort($backups, function($a, $b) {
                    return filemtime($a) - filemtime($b);
                });
                foreach (array_slice($backups, 0, -10) as $old) {
                    unlink($old);
                }
            }

            return [
                'success' => true,
                'file' => $zipFile,
                'size' => filesize($zipFile)
            ];
        }

        return [
            'success' => false,
            'error' => 'Ошибка создания бэкапа'
        ];
    }

    // Вспомогательные методы
    private function sanitize($string) {
        return preg_replace('/[^a-zA-Z0-9_-]/', '', $string);
    }

    private function generateId() {
        return uniqid('card_', true);
    }
}
