<?php
/**
 * –ê–∫–≤–∞–°–±–æ—Ä - –ü–û–õ–ù–ê–Ø –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å v7.0 –ú–ï–ì–ê-–ú–û–î–£–õ–ò
 * –í—Å–µ –º–æ–¥—É–ª–∏ —Ä–∞–±–æ—Ç–∞—é—Ç + –ø–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è + AJAX + –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
 */
session_start();

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
require_once 'data.php';
require_once 'mega_modules.php';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º –µ—Å–ª–∏ –µ—Å—Ç—å
if (file_exists('date_functions.php')) {
    require_once 'date_functions.php';
}
if (file_exists('cart_system.php')) {
    require_once 'cart_system.php';
}

// –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
if (!function_exists('formatDateRussian')) {
    function formatDateRussian($date, $format = 'full') {
        $timestamp = is_string($date) ? strtotime($date) : $date;
        if ($format === 'short') {
            return date('d.m.Y', $timestamp);
        }
        return date('d.m.Y H:i', $timestamp);
    }
}

// –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
if (!isset($_SESSION['admin_logged_in'])) {
    if (($_POST['admin_password'] ?? '') === ADMIN_PASSWORD) {
        $_SESSION['admin_logged_in'] = true;
        $_SESSION['admin_name'] = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        $_SESSION['admin_role'] = '–°—É–ø–µ—Ä-–∞–¥–º–∏–Ω';

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥
        logAdminAction('AUTH', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à–µ–ª –≤ —Å–∏—Å—Ç–µ–º—É');

        header('Location: admin.php');
        exit;
    } elseif (!empty($_POST['admin_password'])) {
        $login_error = '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å';
    }
}

// –í—ã—Ö–æ–¥
if (($_GET['action'] ?? '') === 'logout') {
    logAdminAction('AUTH', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    session_destroy();
    header('Location: admin.php');
    exit;
}

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
if (!isset($_SESSION['admin_logged_in'])) {
    $error = $login_error ?? '';
    ?>
    <!DOCTYPE html>
    <html lang='ru'>
    <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <title>üê† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å - –ê–∫–≤–∞–°–±–æ—Ä MEGA CRM</title>
        <link href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap' rel='stylesheet'>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body {
                font-family: 'Inter', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            }
            .login-container {
                background: white;
                padding: 40px;
                border-radius: 20px;
                box-shadow: 0 20px 60px rgba(0,0,0,0.2);
                max-width: 400px;
                width: 100%;
                text-align: center;
            }
            .logo { font-size: 60px; margin-bottom: 20px; animation: float 3s ease-in-out infinite; }
            @keyframes float { 0%, 100% { transform: translateY(0px); } 50% { transform: translateY(-10px); } }
            h2 { color: #2c3e50; margin-bottom: 30px; font-size: 28px; }
            .mega-badge {
                background: linear-gradient(45deg, #ff6b6b, #feca57);
                color: white;
                padding: 5px 15px;
                border-radius: 20px;
                font-size: 12px;
                font-weight: bold;
                margin-bottom: 20px;
                display: inline-block;
            }
            input, button {
                width: 100%;
                padding: 15px;
                margin: 10px 0;
                border: 2px solid #e0e6ed;
                border-radius: 10px;
                font-size: 16px;
                transition: all 0.3s ease;
            }
            input:focus {
                border-color: #667eea;
                outline: none;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            button {
                background: linear-gradient(135deg, #667eea, #764ba2);
                color: white;
                border: none;
                cursor: pointer;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 1px;
            }
            button:hover {
                transform: translateY(-2px);
                box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
            }
            .error {
                background: #fee;
                color: #c33;
                padding: 15px;
                border-radius: 10px;
                margin-bottom: 20px;
                border: 1px solid #fcc;
            }
            .hint {
                margin-top: 20px;
                padding: 15px;
                background: #f8f9ff;
                border-radius: 10px;
                color: #666;
                font-size: 14px;
            }
        </style>
    </head>
    <body>
        <div class='login-container'>
            <div class='logo'>üê†</div>
            <div class='mega-badge'>MEGA CRM v7.0</div>
            <h2>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h2>
            <form method='post'>
                <?php if ($error): ?>
                    <div class='error'>‚ùå <?= htmlspecialchars($error) ?></div>
                <?php endif; ?>
                <input type='password' name='admin_password' placeholder='üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å' required autofocus>
                <button type='submit'>–í–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å</button>
                <div class='hint'>
                    üí° <strong>–ü–∞—Ä–æ–ª—å:</strong> admin123<br>
                    üîí –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª MEGA CRM
                </div>
            </form>
        </div>
    </body>
    </html>
    <?php
    exit;
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
$section = $_GET['section'] ?? 'dashboard';
$action = $_POST['action'] ?? $_GET['action'] ?? '';

// –û–±—Ä–∞–±–æ—Ç–∫–∞ AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
if (isset($_POST['ajax']) || isset($_GET['ajax'])) {
    header('Content-Type: application/json');

    try {
        switch ($action) {
            case 'get_stats':
                $stats = getDashboardStats();
                echo json_encode(['success' => true, 'stats' => $stats]);
                break;

            case 'get_advanced_analytics':
                $analytics = getAdvancedAnalyticsMega();
                echo json_encode(['success' => true, 'data' => $analytics]);
                break;

            case 'toggle_product_status':
                $productId = (int)$_POST['product_id'];
                $isActive = $_POST['is_active'] === '1';
                $result = toggleProductStatus($productId, $isActive);
                echo json_encode($result);
                break;

            case 'delete_product':
                $productId = (int)$_POST['product_id'];
                $result = deleteProduct($productId);
                echo json_encode($result);
                break;

            case 'bulk_update_products':
                $ids = json_decode($_POST['product_ids'], true);
                $bulkAction = $_POST['bulk_action'];
                $data = json_decode($_POST['data'] ?? '{}', true);
                $result = bulkUpdateProducts($ids, $bulkAction, $data);
                echo json_encode($result);
                break;

            case 'approve_review':
                $reviewId = (int)$_POST['review_id'];
                $result = approveReview($reviewId);
                echo json_encode($result);
                break;

            case 'delete_review':
                $reviewId = (int)$_POST['review_id'];
                $result = deleteReview($reviewId);
                echo json_encode($result);
                break;

            case 'update_order_status':
                $orderId = (int)$_POST['order_id'];
                $status = $_POST['status'];
                $result = updateOrderStatus($orderId, $status);
                echo json_encode($result);
                break;

            case 'save_settings':
                $settingsData = $_POST;
                $result = updateSiteSettings($settingsData);
                echo json_encode($result);
                break;

            case 'upload_slider_image':
                $result = uploadSliderImage($_FILES['image']);
                echo json_encode($result);
                break;

            case 'save_slider':
                $result = saveSliderMega($_POST);
                echo json_encode($result);
                break;

            default:
                echo json_encode(['success' => false, 'message' => '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ']);
        }
    } catch (Exception $e) {
        echo json_encode(['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()]);
    }
    exit;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö POST –∑–∞–ø—Ä–æ—Å–æ–≤
if ($action && !isset($_POST['ajax'])) {
    switch ($action) {
        case 'save_settings':
            $result = updateSiteSettings($_POST);
            $_SESSION['admin_message'] = [
                'text' => $result['message'],
                'type' => $result['success'] ? 'success' : 'error'
            ];
            header('Location: admin.php?section=settings');
            exit;

        case 'create_product':
            $result = createProductMega($_POST, $_FILES ?? []);
            $_SESSION['admin_message'] = [
                'text' => $result['message'],
                'type' => $result['success'] ? 'success' : 'error'
            ];
            header('Location: admin.php?section=products');
            exit;

        case 'create_category':
            $result = createCategoryMega($_POST, $_FILES ?? []);
            $_SESSION['admin_message'] = [
                'text' => $result['message'],
                'type' => $result['success'] ? 'success' : 'error'
            ];
            header('Location: admin.php?section=categories');
            exit;

        case 'create_news':
            $result = createNewsMega($_POST, $_FILES ?? []);
            $_SESSION['admin_message'] = [
                'text' => $result['message'],
                'type' => $result['success'] ? 'success' : 'error'
            ];
            header('Location: admin.php?section=news');
            exit;

        case 'create_page':
            $result = createStaticPage($_POST);
            $_SESSION['admin_message'] = [
                'text' => $result['message'],
                'type' => $result['success'] ? 'success' : 'error'
            ];
            header('Location: admin.php?section=pages');
            exit;
    }
}

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
$adminData = getAdminData($section);

?><!DOCTYPE html>
<html lang='ru'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title><?= $adminData['title'] ?? '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' ?> - –ê–∫–≤–∞–°–±–æ—Ä MEGA CRM v7.0</title>

    <link href='https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap' rel='stylesheet'>
    <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css'>
    <link rel='icon' href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y=".9em" font-size="90">üê†</text></svg>'>

    <!-- Chart.js –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ -->
    <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>
    <script src='https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js'></script>

    <style>
        :root {
            --primary-color: #667eea;
            --primary-dark: #5a6fd8;
            --secondary-color: #764ba2;
            --success-color: #2ecc71;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --info-color: #3498db;
            --dark-color: #2c3e50;
            --light-color: #ecf0f1;
            --bg-primary: #ffffff;
            --bg-secondary: #f8f9fa;
            --bg-tertiary: #e9ecef;
            --text-primary: #2c3e50;
            --text-secondary: #6c757d;
            --text-muted: #95a5a6;
            --border-color: #dee2e6;
            --border-radius: 8px;
            --border-radius-lg: 12px;
            --border-radius-xl: 20px;
            --shadow-sm: 0 2px 4px rgba(0,0,0,0.05);
            --shadow-md: 0 4px 12px rgba(0,0,0,0.1);
            --shadow-lg: 0 8px 25px rgba(0,0,0,0.15);
            --shadow-xl: 0 12px 40px rgba(0,0,0,0.2);
            --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            --transition-fast: all 0.15s ease;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--bg-secondary);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .admin-layout {
            display: flex;
            min-height: 100vh;
            position: relative;
        }

        /* ===== –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ ===== */
        .sidebar {
            width: 280px;
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: white;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            overflow-x: hidden;
            z-index: 1000;
            transition: var(--transition);
            box-shadow: var(--shadow-xl);
        }

        .sidebar::-webkit-scrollbar {
            width: 6px;
        }

        .sidebar::-webkit-scrollbar-track {
            background: rgba(255,255,255,0.05);
        }

        .sidebar::-webkit-scrollbar-thumb {
            background: rgba(255,255,255,0.2);
            border-radius: 3px;
        }

        .sidebar::-webkit-scrollbar-thumb:hover {
            background: rgba(255,255,255,0.3);
        }

        .sidebar-header {
            padding: 24px 20px;
            border-bottom: 1px solid rgba(255,255,255,0.1);
            background: rgba(255,255,255,0.05);
        }

        .admin-logo {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo-icon {
            font-size: 36px;
            animation: logoFloat 3s ease-in-out infinite;
            filter: drop-shadow(0 2px 8px rgba(0,0,0,0.2));
        }

        @keyframes logoFloat {
            0%, 100% { transform: translateY(0px) scale(1); }
            50% { transform: translateY(-3px) scale(1.05); }
        }

        .logo-text {
            display: flex;
            flex-direction: column;
        }

        .logo-title {
            font-size: 22px;
            font-weight: 700;
            line-height: 1.2;
        }

        .logo-subtitle {
            font-size: 12px;
            opacity: 0.8;
            font-weight: 400;
        }

        .mega-badge {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            color: white;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 10px;
            font-weight: bold;
            margin-top: 4px;
        }

        .sidebar-nav {
            padding: 24px 0 120px 0;
        }

        .nav-section {
            margin-bottom: 32px;
        }

        .nav-title {
            padding: 0 20px 12px;
            font-size: 11px;
            text-transform: uppercase;
            letter-spacing: 1.5px;
            opacity: 0.7;
            font-weight: 600;
            color: rgba(255,255,255,0.8);
        }

        .sidebar-link {
            display: flex;
            align-items: center;
            padding: 14px 20px;
            color: rgba(255,255,255,0.85);
            text-decoration: none;
            transition: var(--transition);
            position: relative;
            border-left: 3px solid transparent;
        }

        .sidebar-link:hover {
            background: rgba(255,255,255,0.1);
            color: white;
            padding-left: 28px;
            border-left-color: rgba(255,255,255,0.3);
        }

        .sidebar-link.active {
            background: rgba(255,255,255,0.15);
            color: white;
            border-left-color: white;
            font-weight: 600;
        }

        .sidebar-link.active::before {
            content: '';
            position: absolute;
            right: 20px;
            top: 50%;
            transform: translateY(-50%);
            width: 6px;
            height: 6px;
            background: white;
            border-radius: 50%;
        }

        .sidebar-link i {
            width: 20px;
            margin-right: 12px;
            text-align: center;
            font-size: 16px;
        }

        .sidebar-link-text {
            font-size: 14px;
            font-weight: 500;
        }

        .sidebar-badge {
            margin-left: auto;
            padding: 3px 8px;
            background: rgba(255,255,255,0.2);
            border-radius: 12px;
            font-size: 11px;
            font-weight: 600;
            min-width: 20px;
            text-align: center;
        }

        .sidebar-badge.badge-warning {
            background: var(--warning-color);
        }

        .sidebar-badge.badge-success {
            background: var(--success-color);
        }

        .sidebar-badge.badge-danger {
            background: var(--danger-color);
        }

        .sidebar-badge.live {
            background: linear-gradient(45deg, #ff6b6b, #feca57);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.7; }
        }

        .sidebar-footer {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 20px;
            border-top: 1px solid rgba(255,255,255,0.1);
            background: rgba(0,0,0,0.1);
        }

        .admin-profile {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .admin-avatar {
            width: 44px;
            height: 44px;
            border-radius: 50%;
            background: rgba(255,255,255,0.2);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            border: 2px solid rgba(255,255,255,0.3);
        }

        .admin-info {
            flex: 1;
            min-width: 0;
        }

        .admin-name {
            font-weight: 600;
            font-size: 14px;
            line-height: 1.2;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .admin-role {
            font-size: 11px;
            opacity: 0.7;
            line-height: 1.2;
        }

        .logout-btn {
            color: rgba(255,255,255,0.7);
            text-decoration: none;
            padding: 10px;
            border-radius: var(--border-radius);
            transition: var(--transition);
            font-size: 16px;
        }

        .logout-btn:hover {
            background: rgba(255,255,255,0.1);
            color: white;
            transform: scale(1.1);
        }

        /* ===== –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ===== */
        .main-content {
            flex: 1;
            margin-left: 280px;
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }

        .top-bar {
            background: var(--bg-primary);
            border-bottom: 1px solid var(--border-color);
            padding: 20px 32px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            position: sticky;
            top: 0;
            z-index: 500;
            box-shadow: var(--shadow-sm);
            backdrop-filter: blur(10px);
            background: rgba(255, 255, 255, 0.95);
        }

        .page-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .page-title i {
            color: var(--primary-color);
        }

        .top-bar-right {
            display: flex;
            align-items: center;
            gap: 16px;
        }

        .btn {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            padding: 10px 20px;
            border: none;
            border-radius: var(--border-radius);
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            cursor: pointer;
            transition: var(--transition);
            white-space: nowrap;
            line-height: 1.4;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--primary-dark));
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-success {
            background: linear-gradient(135deg, var(--success-color), #27ae60);
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .btn-success:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        .btn-danger {
            background: linear-gradient(135deg, var(--danger-color), #c0392b);
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .btn-warning {
            background: linear-gradient(135deg, var(--warning-color), #e67e22);
            color: white;
            box-shadow: var(--shadow-sm);
        }

        .btn-outline {
            background: transparent;
            color: var(--primary-color);
            border: 2px solid var(--primary-color);
        }

        .btn-outline:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-1px);
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
        }

        .btn-lg {
            padding: 14px 28px;
            font-size: 16px;
        }

        .btn-mega {
            background: linear-gradient(45deg, #ff6b6b, #feca57, #48cae4, #51cf66);
            background-size: 300% 300%;
            animation: megaGradient 3s ease infinite;
        }

        @keyframes megaGradient {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        /* ===== –ö–û–ù–¢–ï–ù–¢ –°–¢–†–ê–ù–ò–¶ ===== */
        .page-content {
            flex: 1;
            padding: 32px;
            max-width: 100%;
        }

        /* ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ï –ö–ê–†–¢–û–ß–ö–ò ===== */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 24px;
            margin-bottom: 40px;
        }

        .stat-card {
            background: var(--bg-primary);
            padding: 28px;
            border-radius: var(--border-radius-xl);
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
            transition: var(--transition);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        }

        .stat-card:hover {
            transform: translateY(-4px);
            box-shadow: var(--shadow-lg);
        }

        .stat-card.stat-primary::before {
            background: linear-gradient(90deg, var(--primary-color), var(--info-color));
        }

        .stat-card.stat-success::before {
            background: linear-gradient(90deg, var(--success-color), #27ae60);
        }

        .stat-card.stat-warning::before {
            background: linear-gradient(90deg, var(--warning-color), #e67e22);
        }

        .stat-card.stat-danger::before {
            background: linear-gradient(90deg, var(--danger-color), #c0392b);
        }

        .stat-card.mega-card::before {
            background: linear-gradient(90deg, #ff6b6b, #feca57, #48cae4, #51cf66);
            background-size: 300% 300%;
            animation: megaGradient 3s ease infinite;
        }

        .stat-header {
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            margin-bottom: 16px;
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: var(--border-radius-lg);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 28px;
            color: white;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            box-shadow: var(--shadow-sm);
        }

        .stat-icon.stat-success {
            background: linear-gradient(135deg, var(--success-color), #27ae60);
        }

        .stat-icon.stat-warning {
            background: linear-gradient(135deg, var(--warning-color), #e67e22);
        }

        .stat-icon.stat-danger {
            background: linear-gradient(135deg, var(--danger-color), #c0392b);
        }

        .stat-icon.mega-icon {
            background: linear-gradient(45deg, #ff6b6b, #feca57, #48cae4, #51cf66);
            background-size: 300% 300%;
            animation: megaGradient 3s ease infinite;
        }

        .stat-value {
            font-size: 36px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 8px;
            line-height: 1;
        }

        .stat-label {
            font-size: 16px;
            color: var(--text-secondary);
            margin-bottom: 12px;
            font-weight: 500;
        }

        .stat-change {
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 13px;
            font-weight: 500;
            padding: 4px 8px;
            border-radius: var(--border-radius);
        }

        .stat-change.positive {
            background: rgba(46, 204, 113, 0.1);
            color: var(--success-color);
        }

        .stat-change.negative {
            background: rgba(231, 76, 60, 0.1);
            color: var(--danger-color);
        }

        .stat-change.neutral {
            background: var(--bg-tertiary);
            color: var(--text-muted);
        }

        .stat-trend {
            font-size: 12px;
            margin-left: auto;
        }

        /* ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –ö–ê–†–¢–û–ß–ö–ò –ö–û–ù–¢–ï–ù–¢–ê ===== */
        .content-card {
            background: var(--bg-primary);
            border-radius: var(--border-radius-lg);
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-md);
            overflow: hidden;
            margin-bottom: 32px;
            transition: var(--transition);
        }

        .content-card:hover {
            box-shadow: var(--shadow-lg);
        }

        .content-card.mega-card {
            background: linear-gradient(135deg, #f8f9ff, #fff);
            border-image: linear-gradient(45deg, #ff6b6b, #feca57, #48cae4, #51cf66) 1;
        }

        .content-card-header {
            padding: 24px 28px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: linear-gradient(135deg, #f8f9ff, #fff);
        }

        .content-card-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .content-card-body {
            padding: 28px;
        }

        /* ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –¢–ê–ë–õ–ò–¶–´ ===== */
        .table-container {
            overflow-x: auto;
            border-radius: var(--border-radius-lg);
            border: 1px solid var(--border-color);
            box-shadow: var(--shadow-sm);
        }

        .table {
            width: 100%;
            border-collapse: collapse;
            font-size: 14px;
        }

        .table th {
            background: linear-gradient(135deg, #f8f9ff, var(--bg-secondary));
            padding: 16px;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 2px solid var(--border-color);
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .table td {
            padding: 16px;
            border-bottom: 1px solid var(--border-color);
            vertical-align: middle;
        }

        .table tr {
            transition: var(--transition-fast);
        }

        .table tr:hover {
            background: rgba(102, 126, 234, 0.05);
        }

        .table tr.selected {
            background: rgba(102, 126, 234, 0.1);
        }

        /* ===== –°–¢–ê–¢–£–° –ë–ï–ô–î–ñ–ò ===== */
        .status-badge {
            display: inline-flex;
            align-items: center;
            gap: 6px;
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            line-height: 1;
        }

        .status-new {
            background: rgba(52, 152, 219, 0.1);
            color: var(--info-color);
            border: 1px solid rgba(52, 152, 219, 0.2);
        }

        .status-processing {
            background: rgba(243, 156, 18, 0.1);
            color: var(--warning-color);
            border: 1px solid rgba(243, 156, 18, 0.2);
        }

        .status-completed {
            background: rgba(46, 204, 113, 0.1);
            color: var(--success-color);
            border: 1px solid rgba(46, 204, 113, 0.2);
        }

        .status-cancelled {
            background: rgba(231, 76, 60, 0.1);
            color: var(--danger-color);
            border: 1px solid rgba(231, 76, 60, 0.2);
        }

        .status-active {
            background: rgba(46, 204, 113, 0.1);
            color: var(--success-color);
            border: 1px solid rgba(46, 204, 113, 0.2);
        }

        .status-inactive {
            background: rgba(149, 165, 166, 0.1);
            color: var(--text-muted);
            border: 1px solid rgba(149, 165, 166, 0.2);
        }

        /* ===== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–û–†–ú–´ ===== */
        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-bottom: 24px;
        }

        .form-row-3 {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 20px;
            margin-bottom: 24px;
        }

        .form-group {
            margin-bottom: 24px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--text-primary);
            font-size: 14px;
        }

        .form-input, .form-select, .form-textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: 14px;
            transition: var(--transition);
            font-family: inherit;
            background: var(--bg-primary);
        }

        .form-input:focus, .form-select:focus, .form-textarea:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .form-textarea {
            resize: vertical;
            min-height: 120px;
            line-height: 1.6;
        }

        /* ===== DRAG & DROP –ó–û–ù–ê ===== */
        .dropzone {
            border: 2px dashed var(--border-color);
            border-radius: var(--border-radius-lg);
            padding: 40px 20px;
            text-align: center;
            transition: var(--transition);
            cursor: pointer;
        }

        .dropzone:hover, .dropzone.dragover {
            border-color: var(--primary-color);
            background: rgba(102, 126, 234, 0.05);
        }

        .dropzone-icon {
            font-size: 48px;
            color: var(--text-muted);
            margin-bottom: 16px;
        }

        .dropzone-text {
            color: var(--text-secondary);
            font-size: 16px;
            font-weight: 500;
        }

        .dropzone-hint {
            color: var(--text-muted);
            font-size: 14px;
            margin-top: 8px;
        }

        /* ===== –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–´–ô –ü–†–û–°–ú–û–¢–† –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===== */
        .image-preview {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 16px;
            margin-top: 16px;
        }

        .image-preview-item {
            position: relative;
            border-radius: var(--border-radius);
            overflow: hidden;
            aspect-ratio: 1;
        }

        .image-preview-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-preview-remove {
            position: absolute;
            top: 8px;
            right: 8px;
            background: var(--danger-color);
            color: white;
            border: none;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 12px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            transition: var(--transition);
        }

        .image-preview-item:hover .image-preview-remove {
            opacity: 1;
        }

        /* ===== –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===== */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.6);
            z-index: 2000;
            align-items: center;
            justify-content: center;
            backdrop-filter: blur(5px);
        }

        .modal.show {
            display: flex;
            animation: modalFadeIn 0.3s ease;
        }

        @keyframes modalFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        .modal-dialog {
            background: var(--bg-primary);
            border-radius: var(--border-radius-xl);
            max-width: 600px;
            width: 90%;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: var(--shadow-xl);
            animation: modalSlideUp 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
        }

        .modal-dialog.modal-lg {
            max-width: 800px;
        }

        .modal-dialog.modal-xl {
            max-width: 1200px;
        }

        @keyframes modalSlideUp {
            from { transform: translateY(50px) scale(0.95); opacity: 0; }
            to { transform: translateY(0) scale(1); opacity: 1; }
        }

        .modal-header {
            padding: 24px 28px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            align-items: center;
            justify-content: space-between;
            background: linear-gradient(135deg, #f8f9ff, #fff);
        }

        .modal-title {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-primary);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: var(--text-muted);
            padding: 8px;
            border-radius: var(--border-radius);
            transition: var(--transition);
            line-height: 1;
        }

        .modal-close:hover {
            background: var(--bg-tertiary);
            color: var(--text-primary);
        }

        .modal-body {
            padding: 28px;
        }

        .modal-footer {
            padding: 20px 28px;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 12px;
            background: var(--bg-secondary);
        }

        /* ===== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ===== */
        .notification {
            position: fixed;
            top: 24px;
            right: 24px;
            padding: 16px 20px;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-xl);
            z-index: 9999;
            animation: notificationSlideIn 0.3s ease;
            max-width: 400px;
            display: flex;
            align-items: center;
            gap: 12px;
            font-weight: 500;
        }

        .notification-success {
            background: linear-gradient(135deg, var(--success-color), #27ae60);
            color: white;
        }

        .notification-error {
            background: linear-gradient(135deg, var(--danger-color), #c0392b);
            color: white;
        }

        .notification-warning {
            background: linear-gradient(135deg, var(--warning-color), #e67e22);
            color: white;
        }

        .notification-info {
            background: linear-gradient(135deg, var(--info-color), #2980b9);
            color: white;
        }

        @keyframes notificationSlideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }

        /* ===== –ü–£–°–¢–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø ===== */
        .empty-state {
            text-align: center;
            padding: 80px 20px;
            color: var(--text-muted);
        }

        .empty-state-icon {
            font-size: 64px;
            margin-bottom: 24px;
            opacity: 0.6;
        }

        .empty-state h3 {
            margin-bottom: 12px;
            color: var(--text-secondary);
            font-size: 20px;
        }

        .empty-state p {
            margin-bottom: 24px;
            font-size: 16px;
            line-height: 1.6;
        }

        /* ===== –ê–î–ê–ü–¢–ò–í–ù–û–°–¢–¨ ===== */
        @media (max-width: 1200px) {
            .stats-grid {
                grid-template-columns: repeat(2, 1fr);
            }

            .form-row, .form-row-3 {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                transform: translateX(-100%);
                transition: transform 0.3s ease;
            }

            .sidebar.open {
                transform: translateX(0);
            }

            .main-content {
                margin-left: 0;
            }

            .stats-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }

            .page-content {
                padding: 20px 16px;
            }

            .top-bar {
                padding: 16px 20px;
            }

            .page-title {
                font-size: 24px;
            }

            .modal-dialog {
                width: 95%;
                margin: 20px 10px;
                max-height: 85vh;
            }

            .table-container {
                font-size: 13px;
            }

            .table th,
            .table td {
                padding: 12px 8px;
            }
        }

        /* ===== –õ–û–ê–î–ï–† ===== */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255, 255, 255, 0.9);
            display: none;
            align-items: center;
            justify-content: center;
            z-index: 3000;
            backdrop-filter: blur(5px);
        }

        .loading-overlay.show {
            display: flex;
        }

        .spinner {
            border: 4px solid var(--bg-tertiary);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .mega-spinner {
            border: 4px solid transparent;
            border-top: 4px solid #ff6b6b;
            border-right: 4px solid #feca57;
            border-bottom: 4px solid #48cae4;
            border-left: 4px solid #51cf66;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: megaSpin 1s linear infinite;
        }

        @keyframes megaSpin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* ===== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ===== */
        .text-center { text-align: center; }
        .text-right { text-align: right; }
        .text-muted { color: var(--text-muted); }
        .text-primary { color: var(--primary-color); }
        .text-success { color: var(--success-color); }
        .text-warning { color: var(--warning-color); }
        .text-danger { color: var(--danger-color); }

        .mb-0 { margin-bottom: 0; }
        .mb-1 { margin-bottom: 8px; }
        .mb-2 { margin-bottom: 16px; }
        .mb-3 { margin-bottom: 24px; }
        .mb-4 { margin-bottom: 32px; }

        .mt-0 { margin-top: 0; }
        .mt-1 { margin-top: 8px; }
        .mt-2 { margin-top: 16px; }
        .mt-3 { margin-top: 24px; }
        .mt-4 { margin-top: 32px; }

        .d-flex { display: flex; }
        .align-items-center { align-items: center; }
        .justify-content-between { justify-content: space-between; }
        .justify-content-center { justify-content: center; }
        .flex-wrap { flex-wrap: wrap; }
        .gap-1 { gap: 8px; }
        .gap-2 { gap: 16px; }
        .gap-3 { gap: 24px; }

        .w-100 { width: 100%; }
        .h-100 { height: 100%; }

        .cursor-pointer { cursor: pointer; }

        /* ===== –ê–ù–ò–ú–ê–¶–ò–ò –ü–û–Ø–í–õ–ï–ù–ò–Ø ===== */
        .fade-in {
            animation: fadeIn 0.6s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .slide-up {
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            from { opacity: 0; transform: translateY(40px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* ===== BULK ACTIONS BAR ===== */
        .bulk-actions-bar {
            position: fixed;
            bottom: -100px;
            left: 50%;
            transform: translateX(-50%);
            background: var(--dark-color);
            color: white;
            padding: 16px 24px;
            border-radius: var(--border-radius-lg);
            box-shadow: var(--shadow-xl);
            display: flex;
            align-items: center;
            gap: 16px;
            transition: var(--transition);
            z-index: 1500;
        }

        .bulk-actions-bar.show {
            bottom: 24px;
        }

        .bulk-count {
            font-weight: 600;
        }

        .bulk-actions {
            display: flex;
            gap: 8px;
        }

        /* ===== LIVE UPDATE INDICATOR ===== */
        .live-indicator {
            position: absolute;
            top: 8px;
            right: 8px;
            width: 8px;
            height: 8px;
            background: #51cf66;
            border-radius: 50%;
            animation: livePulse 2s infinite;
        }

        @keyframes livePulse {
            0%, 100% { 
                opacity: 1;
                transform: scale(1);
            }
            50% { 
                opacity: 0.5;
                transform: scale(1.2);
            }
        }
    </style>
</head>
<body class='<?= $section ?>-page'>
    <!-- –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å -->
    <div class='admin-layout'>
        <!-- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å -->
        <aside class='sidebar' id='sidebar'>
            <div class='sidebar-header'>
                <div class='admin-logo'>
                    <div class='logo-icon'>üê†</div>
                    <div class='logo-text'>
                        <div class='logo-title'>–ê–∫–≤–∞–°–±–æ—Ä</div>
                        <div class='logo-subtitle'>
                            MEGA CRM v7.0
                            <div class='mega-badge'>MEGA</div>
                        </div>
                    </div>
                </div>
            </div>

            <nav class='sidebar-nav'>
                <div class='nav-section'>
                    <div class='nav-title'>üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ & KPI</div>
                    <a href='admin.php?section=dashboard' class='sidebar-link <?= $section === 'dashboard' ? 'active' : '' ?>'>
                        <i class='fas fa-chart-pie'></i>
                        <span class='sidebar-link-text'>KPI –î–∞—à–±–æ—Ä–¥</span>
                        <div class='live-indicator'></div>
                    </a>
                    <a href='admin.php?section=analytics' class='sidebar-link <?= $section === 'analytics' ? 'active' : '' ?>'>
                        <i class='fas fa-chart-line'></i>
                        <span class='sidebar-link-text'>–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–¥–∞–∂</span>
                        <span class='sidebar-badge live'>LIVE</span>
                    </a>
                    <a href='admin.php?section=forecasting' class='sidebar-link <?= $section === 'forecasting' ? 'active' : '' ?>'>
                        <i class='fas fa-crystal-ball'></i>
                        <span class='sidebar-link-text'>–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ</span>
                        <span class='sidebar-badge badge-success'>AI</span>
                    </a>
                </div>

                <div class='nav-section'>
                    <div class='nav-title'>üõí –ú–ï–ì–ê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω</div>
                    <a href='admin.php?section=products' class='sidebar-link <?= $section === 'products' ? 'active' : '' ?>'>
                        <i class='fas fa-fish'></i>
                        <span class='sidebar-link-text'>–¢–æ–≤–∞—Ä—ã</span>
                        <span class='sidebar-badge'><?= count(getProducts()) ?></span>
                    </a>
                    <a href='admin.php?section=categories' class='sidebar-link <?= $section === 'categories' ? 'active' : '' ?>'>
                        <i class='fas fa-tags'></i>
                        <span class='sidebar-link-text'>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏</span>
                        <span class='sidebar-badge'><?= count(getCategories()) ?></span>
                    </a>
                    <a href='admin.php?section=orders' class='sidebar-link <?= $section === 'orders' ? 'active' : '' ?>'>
                        <i class='fas fa-shopping-bag'></i>
                        <span class='sidebar-link-text'>–ó–∞–∫–∞–∑—ã</span>
                        <span class='sidebar-badge badge-warning'><?= count(array_filter(getOrders(), fn($o) => $o['status'] === 'new')) ?></span>
                    </a>
                    <a href='admin.php?section=reviews' class='sidebar-link <?= $section === 'reviews' ? 'active' : '' ?>'>
                        <i class='fas fa-star'></i>
                        <span class='sidebar-link-text'>–û—Ç–∑—ã–≤—ã</span>
                        <span class='sidebar-badge badge-danger'><?= count(array_filter(getReviews(), fn($r) => !$r['is_approved'])) ?></span>
                    </a>
                    <a href='admin.php?section=inventory' class='sidebar-link <?= $section === 'inventory' ? 'active' : '' ?>'>
                        <i class='fas fa-warehouse'></i>
                        <span class='sidebar-link-text'>–°–∫–ª–∞–¥</span>
                        <span class='sidebar-badge badge-success'>MEGA</span>
                    </a>
                </div>

                <div class='nav-section'>
                    <div class='nav-title'>üìù –ö–æ–Ω—Ç–µ–Ω—Ç & SEO</div>
                    <a href='admin.php?section=news' class='sidebar-link <?= $section === 'news' ? 'active' : '' ?>'>
                        <i class='fas fa-newspaper'></i>
                        <span class='sidebar-link-text'>–ù–æ–≤–æ—Å—Ç–∏</span>
                        <span class='sidebar-badge'><?= count(getNews()) ?></span>
                    </a>
                    <a href='admin.php?section=pages' class='sidebar-link <?= $section === 'pages' ? 'active' : '' ?>'>
                        <i class='fas fa-file-alt'></i>
                        <span class='sidebar-link-text'>–°—Ç—Ä–∞–Ω–∏—Ü—ã</span>
                    </a>
                    <a href='admin.php?section=slider' class='sidebar-link <?= $section === 'slider' ? 'active' : '' ?>'>
                        <i class='fas fa-images'></i>
                        <span class='sidebar-link-text'>–°–ª–∞–π–¥–µ—Ä</span>
                        <span class='sidebar-badge badge-success'>MEGA</span>
                    </a>
                    <a href='admin.php?section=seo' class='sidebar-link <?= $section === 'seo' ? 'active' : '' ?>'>
                        <i class='fas fa-search'></i>
                        <span class='sidebar-link-text'>SEO</span>
                        <span class='sidebar-badge badge-success'>PRO</span>
                    </a>
                </div>

                <div class='nav-section'>
                    <div class='nav-title'>üéØ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥ & CRM</div>
                    <a href='admin.php?section=customers' class='sidebar-link <?= $section === 'customers' ? 'active' : '' ?>'>
                        <i class='fas fa-users'></i>
                        <span class='sidebar-link-text'>–ö–ª–∏–µ–Ω—Ç—ã</span>
                        <span class='sidebar-badge badge-success'>CRM</span>
                    </a>
                    <a href='admin.php?section=marketing' class='sidebar-link <?= $section === 'marketing' ? 'active' : '' ?>'>
                        <i class='fas fa-bullhorn'></i>
                        <span class='sidebar-link-text'>–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥</span>
                        <span class='sidebar-badge badge-warning'>A/B</span>
                    </a>
                    <a href='admin.php?section=promotions' class='sidebar-link <?= $section === 'promotions' ? 'active' : '' ?>'>
                        <i class='fas fa-gift'></i>
                        <span class='sidebar-link-text'>–ê–∫—Ü–∏–∏</span>
                        <span class='sidebar-badge badge-danger'>HOT</span>
                    </a>
                </div>

                <div class='nav-section'>
                    <div class='nav-title'>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ & –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</div>
                    <a href='admin.php?section=settings' class='sidebar-link <?= $section === 'settings' ? 'active' : '' ?>'>
                        <i class='fas fa-cog'></i>
                        <span class='sidebar-link-text'>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                        <span class='sidebar-badge badge-success'>PRO</span>
                    </a>
                    <a href='admin.php?section=logs' class='sidebar-link <?= $section === 'logs' ? 'active' : '' ?>'>
                        <i class='fas fa-list-alt'></i>
                        <span class='sidebar-link-text'>–õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã</span>
                    </a>
                    <a href='admin.php?section=backups' class='sidebar-link <?= $section === 'backups' ? 'active' : '' ?>'>
                        <i class='fas fa-database'></i>
                        <span class='sidebar-link-text'>–ë—ç–∫–∞–ø—ã</span>
                        <span class='sidebar-badge badge-info'>AUTO</span>
                    </a>
                    <a href='admin.php?section=security' class='sidebar-link <?= $section === 'security' ? 'active' : '' ?>'>
                        <i class='fas fa-shield-alt'></i>
                        <span class='sidebar-link-text'>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å</span>
                        <span class='sidebar-badge badge-danger'>üîí</span>
                    </a>
                </div>
            </nav>

            <div class='sidebar-footer'>
                <div class='admin-profile'>
                    <div class='admin-avatar'>üë§</div>
                    <div class='admin-info'>
                        <div class='admin-name'><?= $_SESSION['admin_name'] ?></div>
                        <div class='admin-role'><?= $_SESSION['admin_role'] ?></div>
                    </div>
                    <a href='admin.php?action=logout' class='logout-btn' title='–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã'>
                        <i class='fas fa-sign-out-alt'></i>
                    </a>
                </div>
            </div>
        </aside>

        <!-- –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
        <main class='main-content'>
            <!-- –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å -->
            <header class='top-bar'>
                <div class='top-bar-left'>
                    <h1 class='page-title'>
                        <i class='<?= getPageIcon($section) ?>'></i>
                        <?= $adminData['title'] ?? '–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å' ?>
                    </h1>
                </div>

                <div class='top-bar-right'>
                    <button class='btn btn-outline' onclick='toggleSidebar()' title='–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–Ω—é'>
                        <i class='fas fa-bars'></i>
                    </button>
                    <a href='index.php' class='btn btn-primary' target='_blank'>
                        <i class='fas fa-external-link-alt'></i>
                        –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç
                    </a>
                    <button class='btn btn-mega' onclick='openMegaPanel()' title='MEGA –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'>
                        <i class='fas fa-rocket'></i>
                        MEGA
                    </button>
                </div>
            </header>

            <!-- –ö–æ–Ω—Ç–µ–Ω—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã -->
            <div class='page-content'>
                <?php if (isset($_SESSION['admin_message'])): ?>
                    <div class='notification notification-<?= $_SESSION['admin_message']['type'] ?>' id='adminNotification'>
                        <i class='fas fa-<?= $_SESSION['admin_message']['type'] === 'success' ? 'check-circle' : 'exclamation-circle' ?>'></i>
                        <?= htmlspecialchars($_SESSION['admin_message']['text']) ?>
                    </div>
                    <?php unset($_SESSION['admin_message']); ?>
                <?php endif; ?>

                <?php renderAdminSection($section, $adminData); ?>
            </div>
        </main>
    </div>

    <!-- Bulk Actions Bar -->
    <div class='bulk-actions-bar' id='bulkActionsBar'>
        <div class='bulk-count'>–í—ã–±—Ä–∞–Ω–æ: <span id='bulkCount'>0</span> —ç–ª–µ–º–µ–Ω—Ç–æ–≤</div>
        <div class='bulk-actions'>
            <button class='btn btn-success btn-sm' onclick='bulkAction("activate")'>
                <i class='fas fa-eye'></i> –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
            </button>
            <button class='btn btn-warning btn-sm' onclick='bulkAction("deactivate")'>
                <i class='fas fa-eye-slash'></i> –°–∫—Ä—ã—Ç—å
            </button>
            <button class='btn btn-danger btn-sm' onclick='bulkAction("delete")'>
                <i class='fas fa-trash'></i> –£–¥–∞–ª–∏—Ç—å
            </button>
            <button class='btn btn-outline btn-sm' onclick='clearBulkSelection()'>
                <i class='fas fa-times'></i> –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
        </div>
    </div>

    <!-- –õ–æ–∞–¥–µ—Ä -->
    <div class='loading-overlay' id='loadingOverlay'>
        <div class='mega-spinner'></div>
    </div>

    <!-- –°–∫—Ä–∏–ø—Ç—ã -->
    <script>
        // === –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò ===

        function showLoading() {
            document.getElementById('loadingOverlay').classList.add('show');
        }

        function hideLoading() {
            document.getElementById('loadingOverlay').classList.remove('show');
        }

        function toggleSidebar() {
            document.getElementById('sidebar').classList.toggle('open');
        }

        function showNotification(message, type = 'info', duration = 5000) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            document.querySelectorAll('.notification').forEach(n => n.remove());

            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;
            notification.innerHTML = `
                <i class='fas fa-${type === 'success' ? 'check-circle' : type === 'error' ? 'exclamation-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'}'></i>
                ${message}
            `;

            document.body.appendChild(notification);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
            setTimeout(() => {
                notification.style.animation = 'notificationSlideOut 0.3s ease';
                setTimeout(() => notification.remove(), 300);
            }, duration);
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        document.addEventListener('DOMContentLoaded', function() {
            const notification = document.getElementById('adminNotification');
            if (notification) {
                setTimeout(() => {
                    notification.style.animation = 'notificationSlideOut 0.3s ease';
                    setTimeout(() => notification.remove(), 300);
                }, 5000);
            }
        });

        // === AJAX –§–£–ù–ö–¶–ò–ò ===

        async function makeAjaxRequest(action, data = {}) {
            showLoading();

            const formData = new FormData();
            formData.append('action', action);
            formData.append('ajax', '1');

            for (let key in data) {
                if (data[key] instanceof File) {
                    formData.append(key, data[key]);
                } else if (typeof data[key] === 'object') {
                    formData.append(key, JSON.stringify(data[key]));
                } else {
                    formData.append(key, data[key]);
                }
            }

            try {
                const response = await fetch('admin.php', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                return result;
            } catch (error) {
                console.error('AJAX Error:', error);
                return { success: false, message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏' };
            } finally {
                hideLoading();
            }
        }

        // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –¢–û–í–ê–†–û–í ===

        async function toggleProductStatus(productId, isActive) {
            const result = await makeAjaxRequest('toggle_product_status', {
                product_id: productId,
                is_active: isActive ? '1' : '0'
            });

            if (result.success) {
                showNotification(result.message, 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message, 'error');
            }
        }

        async function deleteProduct(productId) {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) return;

            const result = await makeAjaxRequest('delete_product', {
                product_id: productId
            });

            if (result.success) {
                showNotification(result.message, 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message, 'error');
            }
        }

        // === BULK OPERATIONS ===

        let selectedItems = new Set();

        function toggleItemSelection(itemId) {
            const checkbox = document.getElementById(`item-${itemId}`);
            if (checkbox.checked) {
                selectedItems.add(itemId);
            } else {
                selectedItems.delete(itemId);
            }
            updateBulkActionsBar();
        }

        function updateBulkActionsBar() {
            const bulkBar = document.getElementById('bulkActionsBar');
            const bulkCount = document.getElementById('bulkCount');

            if (selectedItems.size > 0) {
                bulkCount.textContent = selectedItems.size;
                bulkBar.classList.add('show');
            } else {
                bulkBar.classList.remove('show');
            }
        }

        function clearBulkSelection() {
            selectedItems.clear();
            document.querySelectorAll('.bulk-checkbox').forEach(cb => cb.checked = false);
            updateBulkActionsBar();
        }

        async function bulkAction(action) {
            if (selectedItems.size === 0) {
                showNotification('–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞', 'warning');
                return;
            }

            const actionNames = {
                'activate': '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                'deactivate': '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å',
                'delete': '—É–¥–∞–ª–∏—Ç—å'
            };

            if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${actionNames[action]} ${selectedItems.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤?`)) {
                return;
            }

            const result = await makeAjaxRequest('bulk_update_products', {
                product_ids: Array.from(selectedItems),
                bulk_action: action
            });

            if (result.success) {
                showNotification(result.message, 'success');
                clearBulkSelection();
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message, 'error');
            }
        }

        // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–ó–´–í–û–í ===

        async function approveReview(reviewId) {
            const result = await makeAjaxRequest('approve_review', {
                review_id: reviewId
            });

            if (result.success) {
                showNotification(result.message, 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message, 'error');
            }
        }

        async function deleteReview(reviewId) {
            if (!confirm('–£–¥–∞–ª–∏—Ç—å –æ—Ç–∑—ã–≤?')) return;

            const result = await makeAjaxRequest('delete_review', {
                review_id: reviewId
            });

            if (result.success) {
                showNotification(result.message, 'success');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message, 'error');
            }
        }

        // === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ö–ê–ó–û–í ===

        async function updateOrderStatus(orderId, status) {
            const result = await makeAjaxRequest('update_order_status', {
                order_id: orderId,
                status: status
            });

            if (result.success) {
                showNotification(result.message, 'success');
            } else {
                showNotification(result.message, 'error');
            }
        }

        // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===

        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.add('show');
                document.body.style.overflow = 'hidden';
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.classList.remove('show');
                document.body.style.overflow = '';
            }
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.addEventListener('click', function(e) {
            if (e.target.classList.contains('modal')) {
                e.target.classList.remove('show');
                document.body.style.overflow = '';
            }
        });

        // === DRAG & DROP ===

        function setupDropzone(dropzoneId, callback) {
            const dropzone = document.getElementById(dropzoneId);
            if (!dropzone) return;

            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, preventDefaults, false);
            });

            function preventDefaults(e) {
                e.preventDefault();
                e.stopPropagation();
            }

            ['dragenter', 'dragover'].forEach(eventName => {
                dropzone.addEventListener(eventName, () => dropzone.classList.add('dragover'), false);
            });

            ['dragleave', 'drop'].forEach(eventName => {
                dropzone.addEventListener(eventName, () => dropzone.classList.remove('dragover'), false);
            });

            dropzone.addEventListener('drop', handleDrop, false);

            function handleDrop(e) {
                const files = e.dataTransfer.files;
                if (callback) callback(files);
            }

            // –ö–ª–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
            dropzone.addEventListener('click', () => {
                const input = document.createElement('input');
                input.type = 'file';
                input.multiple = true;
                input.accept = 'image/*';
                input.onchange = (e) => {
                    if (callback) callback(e.target.files);
                };
                input.click();
            });
        }

        // === MEGA PANEL ===

        function openMegaPanel() {
            showNotification('MEGA –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏
        }

        // === –ê–ù–ò–ú–ê–¶–ò–ò ===

        // –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        const style = document.createElement('style');
        style.textContent = `
            @keyframes notificationSlideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        document.head.appendChild(style);

        // –ê–Ω–∏–º–∞—Ü–∏–∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
        };

        const observer = new IntersectionObserver(function(entries) {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.classList.add('fade-in');
                }
            });
        }, observerOptions);

        // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏
        document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('.stat-card, .content-card').forEach(card => {
                observer.observe(card);
            });
        });

        // === –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===

        let statsUpdateInterval;

        function startStatsAutoUpdate() {
            statsUpdateInterval = setInterval(async () => {
                if (window.location.search.includes('section=dashboard') || !window.location.search.includes('section=')) {
                    const result = await makeAjaxRequest('get_stats');
                    if (result.success) {
                        updateStatsDisplay(result.stats);
                    }
                }
            }, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        }

        function updateStatsDisplay(stats) {
            for (let key in stats) {
                const valueElement = document.querySelector(`[data-stat='${key}'] .stat-value`);
                const changeElement = document.querySelector(`[data-stat='${key}'] .stat-change`);

                if (valueElement) {
                    valueElement.textContent = stats[key].value;
                }
                if (changeElement) {
                    changeElement.textContent = stats[key].change;
                    changeElement.className = `stat-change ${stats[key].trend}`;
                }
            }
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        document.addEventListener('DOMContentLoaded', function() {
            startStatsAutoUpdate();
        });

        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏ —É—Ö–æ–¥–µ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', function() {
            if (statsUpdateInterval) {
                clearInterval(statsUpdateInterval);
            }
        });

        // === –ì–û–†–Ø–ß–ò–ï –ö–õ–ê–í–ò–®–ò ===

        document.addEventListener('keydown', function(e) {
            // Ctrl+S - –±—ã—Å—Ç—Ä–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                const saveBtn = document.querySelector('.btn-success[type="submit"], .btn-primary[type="submit"]');
                if (saveBtn) saveBtn.click();
            }

            // Ctrl+N - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if (e.ctrlKey && e.key === 'n') {
                e.preventDefault();
                const addBtn = document.querySelector('[onclick*="Modal"]');
                if (addBtn) addBtn.click();
            }

            // Escape - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (e.key === 'Escape') {
                document.querySelectorAll('.modal.show').forEach(modal => {
                    modal.classList.remove('show');
                });
                document.body.style.overflow = '';
            }
        });
    </script>
</body>
</html>

<?php

// === –î–û–ü–û–õ–ù–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–ê–ù–ù–´–• –ê–î–ú–ò–ù–ö–ò ===

function getAdminData($section) {
    switch ($section) {
        case 'dashboard':
            return [
                'title' => 'KPI –î–∞—à–±–æ—Ä–¥ MEGA',
                'stats' => getDashboardStatsMega(),
                'recent_activity' => getRecentActivity(),
                'analytics' => getAdvancedAnalyticsMega()
            ];
        case 'products':
            return [
                'title' => 'MEGA –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏',
                'products' => getProducts(),
                'categories' => getCategories(),
                'stats' => getProductsStatsMega()
            ];
        case 'categories':
            return [
                'title' => 'MEGA –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏',
                'categories' => getCategories(),
                'stats' => getCategoriesStatsMega()
            ];
        case 'orders':
            return [
                'title' => 'MEGA –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏',
                'orders' => getOrders(),
                'stats' => getOrdersStatsMega()
            ];
        case 'reviews':
            return [
                'title' => 'MEGA –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞–º–∏',
                'reviews' => getReviews(),
                'stats' => getReviewsStatsMega()
            ];
        case 'news':
            return [
                'title' => 'MEGA –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏',
                'news' => getNews(),
                'stats' => getNewsStatsMega()
            ];
        case 'analytics':
            return [
                'title' => 'MEGA –ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–¥–∞–∂',
                'charts_data' => getAnalyticsDataMega()
            ];
        case 'slider':
            return [
                'title' => 'MEGA –°–ª–∞–π–¥–µ—Ä',
                'slides' => getSliderSlides(),
                'stats' => getSliderStats()
            ];
        case 'seo':
            return [
                'title' => 'MEGA SEO',
                'seo_data' => getSeoDataMega()
            ];
        case 'customers':
            return [
                'title' => 'MEGA CRM - –ö–ª–∏–µ–Ω—Ç—ã',
                'customers' => getCustomersMega(),
                'stats' => getCustomersStatsMega()
            ];
        case 'marketing':
            return [
                'title' => 'MEGA –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
                'campaigns' => getMarketingCampaignsMega(),
                'ab_tests' => getABTestsMega()
            ];
        case 'inventory':
            return [
                'title' => 'MEGA –°–∫–ª–∞–¥',
                'inventory' => getInventoryMega(),
                'stats' => getInventoryStatsMega()
            ];
        case 'settings':
            return [
                'title' => 'MEGA –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
                'settings' => getSiteSettings()
            ];
        case 'logs':
            return [
                'title' => 'MEGA –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏',
                'logs' => getAdminLogs()
            ];
        case 'pages':
            return [
                'title' => 'MEGA –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏',
                'pages' => getStaticPages()
            ];
        case 'security':
            return [
                'title' => 'MEGA –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å',
                'security_data' => getSecurityDataMega()
            ];
        case 'backups':
            return [
                'title' => 'MEGA –ë—ç–∫–∞–ø—ã',
                'backups' => getBackupsList()
            ];
        default:
            return [
                'title' => 'MEGA ' . ucfirst($section),
                'description' => "MEGA —Ä–∞–∑–¥–µ–ª '$section' –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
            ];
    }
}

function getPageIcon($section) {
    $icons = [
        'dashboard' => 'fas fa-chart-pie',
        'products' => 'fas fa-fish',
        'categories' => 'fas fa-tags',
        'orders' => 'fas fa-shopping-bag',
        'reviews' => 'fas fa-star',
        'news' => 'fas fa-newspaper',
        'analytics' => 'fas fa-chart-line',
        'settings' => 'fas fa-cog',
        'logs' => 'fas fa-list-alt',
        'pages' => 'fas fa-file-alt',
        'slider' => 'fas fa-images',
        'seo' => 'fas fa-search',
        'customers' => 'fas fa-users',
        'marketing' => 'fas fa-bullhorn',
        'inventory' => 'fas fa-warehouse',
        'security' => 'fas fa-shield-alt',
        'backups' => 'fas fa-database',
        'forecasting' => 'fas fa-crystal-ball',
        'promotions' => 'fas fa-gift'
    ];

    return $icons[$section] ?? 'fas fa-cog';
}

// === –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê –†–ê–ó–î–ï–õ–û–í ===

function renderAdminSection($section, $data) {
    switch ($section) {
        case 'dashboard':
            renderDashboardMega($data);
            break;
        case 'products':
            renderProductsSectionMega($data);
            break;
        case 'categories':
            renderCategoriesSectionMega($data);
            break;
        case 'orders':
            renderOrdersSectionMega($data);
            break;
        case 'reviews':
            renderReviewsSectionMega($data);
            break;
        case 'news':
            renderNewsSectionMega($data);
            break;
        case 'analytics':
            renderAnalyticsSectionMega($data);
            break;
        case 'slider':
            renderSliderSectionMega($data);
            break;
        case 'seo':
            renderSeoSectionMega($data);
            break;
        case 'customers':
            renderCustomersSectionMega($data);
            break;
        case 'marketing':
            renderMarketingSectionMega($data);
            break;
        case 'inventory':
            renderInventorySectionMega($data);
            break;
        case 'settings':
            renderSettingsSectionMega($data);
            break;
        case 'logs':
            renderLogsSectionMega($data);
            break;
        case 'pages':
            renderPagesSectionMega($data);
            break;
        case 'security':
            renderSecuritySectionMega($data);
            break;
        case 'backups':
            renderBackupsSectionMega($data);
            break;
        default:
            renderDefaultSectionMega($section, $data);
    }
}

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–¥–º–∏–Ω–∫–∏
if (isset($_SESSION['admin_logged_in'])) {
    logAdminAction('SYSTEM', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∏–ª MEGA —Ä–∞–∑–¥–µ–ª: ' . $section);
}

<?php
/**
 * –ê–∫–≤–∞–°–±–æ—Ä - –ú–ï–ì–ê –ú–æ–¥—É–ª–∏ v7.0
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –∞–¥–º–∏–Ω–∫–∏
 */

// === –ú–ï–ì–ê –î–ê–®–ë–û–†–î –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ===

function getDashboardStatsMega() {
    $products = getProducts();
    $orders = getOrders();
    $reviews = getReviews();
    $categories = getCategories();

    $totalRevenue = array_sum(array_column($orders, 'total_amount'));
    $newOrders = count(array_filter($orders, fn($o) => $o['status'] === 'new'));
    $activeProducts = count(array_filter($products, fn($p) => $p['is_active']));
    $avgRating = count($reviews) > 0 ? array_sum(array_column($reviews, 'rating')) / count($reviews) : 0;
    $pendingReviews = count(array_filter($reviews, fn($r) => !$r['is_approved']));

    // –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–æ—Å—Ç–∞
    $monthAgo = date('Y-m-d', strtotime('-30 days'));
    $monthlyOrders = array_filter($orders, fn($o) => $o['created_at'] >= $monthAgo);
    $monthlyRevenue = array_sum(array_column($monthlyOrders, 'total_amount'));

    // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
    $forecast = calculateRevenueForecast($orders);
    $conversionRate = calculateConversionRate();

    return [
        'revenue' => [
            'value' => number_format($totalRevenue, 0, '', ' ') . ' ‚ÇΩ',
            'label' => '–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞',
            'change' => '+' . number_format($monthlyRevenue, 0, '', ' ') . ' ‚ÇΩ –∑–∞ –º–µ—Å—è—Ü',
            'trend' => 'positive',
            'icon' => 'fas fa-ruble-sign',
            'forecast' => $forecast['next_month']
        ],
        'orders' => [
            'value' => count($orders),
            'label' => '–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤',
            'change' => '+' . $newOrders . ' –Ω–æ–≤—ã—Ö',
            'trend' => $newOrders > 0 ? 'positive' : 'neutral',
            'icon' => 'fas fa-shopping-bag',
            'conversion' => round($conversionRate, 2) . '%'
        ],
        'products' => [
            'value' => $activeProducts,
            'label' => '–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤',
            'change' => '–∏–∑ ' . count($products) . ' –≤—Å–µ–≥–æ',
            'trend' => 'neutral',
            'icon' => 'fas fa-fish',
            'low_stock' => count(array_filter($products, fn($p) => $p['stock'] <= 5))
        ],
        'rating' => [
            'value' => number_format($avgRating, 1),
            'label' => '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥',
            'change' => count($reviews) . ' –æ—Ç–∑—ã–≤–æ–≤',
            'trend' => $avgRating >= 4 ? 'positive' : ($avgRating >= 3 ? 'neutral' : 'negative'),
            'icon' => 'fas fa-star',
            'nps' => calculateNPS($reviews)
        ],
        'categories' => [
            'value' => count(array_filter($categories, fn($c) => $c['active'])),
            'label' => '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π',
            'change' => '–∏–∑ ' . count($categories) . ' –≤—Å–µ–≥–æ',
            'trend' => 'neutral',
            'icon' => 'fas fa-tags',
            'top_category' => getTopCategory($products, $categories)
        ],
        'pending' => [
            'value' => $pendingReviews,
            'label' => '–û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏',
            'change' => '–æ—Ç–∑—ã–≤—ã –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'trend' => $pendingReviews > 5 ? 'negative' : 'positive',
            'icon' => 'fas fa-clock',
            'avg_response_time' => '2.5 —á–∞—Å–∞'
        ]
    ];
}

function getAdvancedAnalyticsMega() {
    $products = getProducts();
    $orders = getOrders();
    $reviews = getReviews();

    // –ü—Ä–æ–¥–∞–∂–∏ –ø–æ –¥–Ω—è–º (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π) —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    $salesByDay = [];
    for ($i = 29; $i >= 0; $i--) {
        $date = date('Y-m-d', strtotime('-' . $i . ' days'));
        $dayOrders = array_filter($orders, fn($o) => date('Y-m-d', strtotime($o['created_at'])) === $date);
        $salesByDay[] = [
            'date' => $date,
            'date_formatted' => formatDateRussian($date, 'short'),
            'orders' => count($dayOrders),
            'revenue' => array_sum(array_column($dayOrders, 'total_amount')),
            'unique_customers' => count(array_unique(array_column($dayOrders, 'customer_email')))
        ];
    }

    // –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    $categories = getCategories();
    $categoryStats = [];
    foreach ($categories as $category) {
        $categoryProducts = array_filter($products, fn($p) => $p['category_id'] == $category['id']);
        $categoryRevenue = array_sum(array_map(fn($p) => $p['price'] * $p['sales'], $categoryProducts));

        $categoryStats[] = [
            'id' => $category['id'],
            'name' => $category['name'],
            'icon' => $category['icon'],
            'products_count' => count($categoryProducts),
            'total_sales' => array_sum(array_column($categoryProducts, 'sales')),
            'revenue' => $categoryRevenue,
            'avg_price' => count($categoryProducts) > 0 ? array_sum(array_column($categoryProducts, 'price')) / count($categoryProducts) : 0,
            'conversion_rate' => rand(15, 45) / 10 // –ò–º–∏—Ç–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
        ];
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—ã—Ä—É—á–∫–µ
    usort($categoryStats, fn($a, $b) => $b['revenue'] - $a['revenue']);

    // –¢–æ–ø —Ç–æ–≤–∞—Ä—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    $topProducts = $products;
    usort($topProducts, fn($a, $b) => $b['sales'] - $a['sales']);
    $topProducts = array_slice($topProducts, 0, 10);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    foreach ($topProducts as &$product) {
        $product['revenue'] = $product['price'] * $product['sales'];
        $product['profit_margin'] = rand(20, 60); // –ò–º–∏—Ç–∞—Ü–∏—è –º–∞—Ä–∂–∏
        $product['roi'] = rand(150, 300); // –ò–º–∏—Ç–∞—Ü–∏—è ROI
    }

    // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    $customerAnalytics = analyzeCustomers($orders);

    return [
        'sales_by_day' => $salesByDay,
        'category_stats' => $categoryStats,
        'top_products' => $topProducts,
        'customer_analytics' => $customerAnalytics,
        'summary' => [
            'total_products' => count($products),
            'active_products' => count(array_filter($products, fn($p) => $p['is_active'])),
            'total_orders' => count($orders),
            'total_revenue' => array_sum(array_column($orders, 'total_amount')),
            'avg_order_value' => count($orders) > 0 ? array_sum(array_column($orders, 'total_amount')) / count($orders) : 0,
            'total_reviews' => count($reviews),
            'avg_rating' => count($reviews) > 0 ? array_sum(array_column($reviews, 'rating')) / count($reviews) : 0,
            'growth_rate' => calculateGrowthRate($orders),
            'churn_rate' => calculateChurnRate($orders)
        ]
    ];
}

// === –°–û–ó–î–ê–ù–ò–ï –ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–í–ê–†–û–í –ú–ï–ì–ê ===

function createProductMega($data, $files = null) {
    try {
        $dynamicData = initializeDynamicData();
        $products = $dynamicData['products'];

        $newId = empty($products) ? 1 : (max(array_column($products, 'id')) + 1);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        $images = [];
        if ($files && isset($files['images'])) {
            $uploadResult = uploadProductImagesMega($files);
            if (!$uploadResult['success']) {
                return $uploadResult;
            }
            $images = $uploadResult['images'];
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        $seoData = generateProductSEO($data['name'], $data['description'] ?? '');

        $newProduct = [
            'id' => $newId,
            'name' => trim($data['name'] ?? ''),
            'slug' => generateSlug($data['name'] ?? ''),
            'description' => trim($data['description'] ?? ''),
            'short_description' => trim($data['short_description'] ?? ''),
            'price' => (float)($data['price'] ?? 0),
            'old_price' => !empty($data['old_price']) ? (float)$data['old_price'] : null,
            'cost_price' => !empty($data['cost_price']) ? (float)$data['cost_price'] : null, // –ú–ï–ì–ê: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
            'category_id' => (int)($data['category_id'] ?? 1),
            'category' => getCategoryById($data['category_id'])['name'] ?? '–†–∞–∑–Ω–æ–µ',
            'sku' => trim($data['sku']) ?: ('AQ-' . str_pad($newId, 4, '0', STR_PAD_LEFT)),
            'barcode' => trim($data['barcode'] ?? ''), // –ú–ï–ì–ê: —à—Ç—Ä–∏—Ö-–∫–æ–¥
            'stock' => (int)($data['stock'] ?? 0),
            'min_stock' => (int)($data['min_stock'] ?? 5), // –ú–ï–ì–ê: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫
            'weight' => (int)($data['weight'] ?? 100),
            'dimensions' => [
                'length' => (int)($data['length'] ?? 10),
                'width' => (int)($data['width'] ?? 10),
                'height' => (int)($data['height'] ?? 10)
            ],
            'images' => $images,
            'is_featured' => !empty($data['is_featured']),
            'is_new' => !empty($data['is_new']),
            'is_active' => !empty($data['is_active']),
            'is_digital' => !empty($data['is_digital']), // –ú–ï–ì–ê: —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä
            'views' => 0,
            'sales' => 0,
            'rating' => 0,
            'reviews_count' => 0,
            'inventory_tracking' => !empty($data['inventory_tracking']), // –ú–ï–ì–ê: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            'tax_class' => trim($data['tax_class'] ?? 'standard'), // –ú–ï–ì–ê: –Ω–∞–ª–æ–≥–æ–≤—ã–π –∫–ª–∞—Å—Å
            'shipping_class' => trim($data['shipping_class'] ?? 'standard'), // –ú–ï–ì–ê: –∫–ª–∞—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            'warranty_period' => (int)($data['warranty_period'] ?? 0), // –ú–ï–ì–ê: –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥
            'attributes' => json_decode($data['attributes'] ?? '{}', true), // –ú–ï–ì–ê: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
            'variations' => json_decode($data['variations'] ?? '[]', true), // –ú–ï–ì–ê: –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
            'related_products' => json_decode($data['related_products'] ?? '[]', true), // –ú–ï–ì–ê: —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
            'cross_sell_products' => json_decode($data['cross_sell_products'] ?? '[]', true), // –ú–ï–ì–ê: –∫—Ä–æ—Å—Å-–ø—Ä–æ–¥–∞–∂–∏
            'meta_title' => $seoData['title'],
            'meta_description' => $seoData['description'],
            'meta_keywords' => $seoData['keywords'],
            'seo_score' => $seoData['score'], // –ú–ï–ì–ê: SEO —Ä–µ–π—Ç–∏–Ω–≥
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['products'][] = $newProduct;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            // –ú–ï–ì–ê: –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            logProductChange($newId, 'created', '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω', $newProduct);

            // –ú–ï–ì–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            sendProductNotification('created', $newProduct);

            return ['success' => true, 'message' => '–¢–æ–≤–∞—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!', 'product' => $newProduct];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

function uploadProductImagesMega($files) {
    $uploadedImages = [];
    $allowedTypes = ['image/jpeg', 'image/png', 'image/webp', 'image/gif'];
    $maxSize = 10 * 1024 * 1024; // 10MB
    $maxImages = 10; // –ú–ï–ì–ê: –º–∞–∫—Å–∏–º—É–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

    if (!isset($files['images'])) {
        return ['success' => true, 'images' => []];
    }

    $images = $files['images'];

    // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤
    if (!is_array($images['name'])) {
        $images = [
            'name' => [$images['name']],
            'type' => [$images['type']],
            'tmp_name' => [$images['tmp_name']],
            'error' => [$images['error']],
            'size' => [$images['size']]
        ];
    }

    // –ú–ï–ì–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (count($images['name']) > $maxImages) {
        return ['success' => false, 'message' => "–ú–∞–∫—Å–∏–º—É–º $maxImages –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞ —Ä–∞–∑"];
    }

    for ($i = 0; $i < count($images['name']); $i++) {
        if ($images['error'][$i] === UPLOAD_ERR_NO_FILE) continue;

        if ($images['error'][$i] !== UPLOAD_ERR_OK) {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' . $images['name'][$i]];
        }

        if ($images['size'][$i] > $maxSize) {
            return ['success' => false, 'message' => '–§–∞–π–ª ' . $images['name'][$i] . ' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 10MB)'];
        }

        if (!in_array($images['type'][$i], $allowedTypes)) {
            return ['success' => false, 'message' => '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ' . $images['name'][$i]];
        }

        // –ú–ï–ì–ê: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        $extension = pathinfo($images['name'][$i], PATHINFO_EXTENSION);
        $fileName = 'product_' . time() . '_' . $i . '_' . uniqid() . '.' . $extension;
        $filePath = PRODUCT_IMAGES_DIR . $fileName;

        if (move_uploaded_file($images['tmp_name'][$i], $filePath)) {
            // –ú–ï–ì–ê: –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
            $thumbnails = createImageThumbnails($filePath);

            $imageData = [
                'original' => PRODUCT_IMAGES_DIR . $fileName,
                'thumbnails' => $thumbnails,
                'alt' => pathinfo($images['name'][$i], PATHINFO_FILENAME),
                'size' => $images['size'][$i],
                'uploaded_at' => date('Y-m-d H:i:s')
            ];

            $uploadedImages[] = $imageData;
        } else {
            return ['success' => false, 'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: ' . $images['name'][$i]];
        }
    }

    return ['success' => true, 'images' => $uploadedImages];
}

function createImageThumbnails($originalPath) {
    $thumbnails = [];
    $sizes = [
        'thumb' => ['width' => 150, 'height' => 150],
        'medium' => ['width' => 300, 'height' => 300],
        'large' => ['width' => 800, 'height' => 800]
    ];

    $imageInfo = getimagesize($originalPath);
    if (!$imageInfo) return $thumbnails;

    $originalImage = null;
    switch ($imageInfo['mime']) {
        case 'image/jpeg':
            $originalImage = imagecreatefromjpeg($originalPath);
            break;
        case 'image/png':
            $originalImage = imagecreatefrompng($originalPath);
            break;
        case 'image/webp':
            $originalImage = imagecreatefromwebp($originalPath);
            break;
        case 'image/gif':
            $originalImage = imagecreatefromgif($originalPath);
            break;
    }

    if (!$originalImage) return $thumbnails;

    foreach ($sizes as $sizeName => $dimensions) {
        $thumbnail = imagecreatetruecolor($dimensions['width'], $dimensions['height']);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è PNG
        if ($imageInfo['mime'] === 'image/png') {
            imagealphablending($thumbnail, false);
            imagesavealpha($thumbnail, true);
        }

        imagecopyresampled(
            $thumbnail,
            $originalImage,
            0, 0, 0, 0,
            $dimensions['width'],
            $dimensions['height'],
            $imageInfo[0],
            $imageInfo[1]
        );

        $thumbnailPath = str_replace(
            '.' . pathinfo($originalPath, PATHINFO_EXTENSION),
            '_' . $sizeName . '.' . pathinfo($originalPath, PATHINFO_EXTENSION),
            $originalPath
        );

        switch ($imageInfo['mime']) {
            case 'image/jpeg':
                imagejpeg($thumbnail, $thumbnailPath, 85);
                break;
            case 'image/png':
                imagepng($thumbnail, $thumbnailPath, 8);
                break;
            case 'image/webp':
                imagewebp($thumbnail, $thumbnailPath, 85);
                break;
        }

        $thumbnails[$sizeName] = $thumbnailPath;
        imagedestroy($thumbnail);
    }

    imagedestroy($originalImage);
    return $thumbnails;
}

// === –°–û–ó–î–ê–ù–ò–ï –ö–ê–¢–ï–ì–û–†–ò–ô –ú–ï–ì–ê ===

function createCategoryMega($data, $files = null) {
    try {
        $dynamicData = initializeDynamicData();
        $categories = $dynamicData['categories'];

        $newId = empty($categories) ? 1 : (max(array_column($categories, 'id')) + 1);

        // –ú–ï–ì–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        $categoryImage = '';
        if ($files && isset($files['category_image']) && $files['category_image']['error'] === UPLOAD_ERR_OK) {
            $uploadResult = uploadCategoryImage($files['category_image']);
            if ($uploadResult['success']) {
                $categoryImage = $uploadResult['path'];
            }
        }

        // –ú–ï–ì–ê: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO –¥–∞–Ω–Ω—ã–µ
        $seoData = generateCategorySEO($data['name'], $data['description'] ?? '');

        $newCategory = [
            'id' => $newId,
            'name' => trim($data['name'] ?? ''),
            'slug' => generateSlug($data['name'] ?? ''),
            'icon' => trim($data['icon']) ?: 'üì¶',
            'description' => trim($data['description'] ?? ''),
            'image' => $categoryImage, // –ú–ï–ì–ê: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'active' => !empty($data['active']),
            'sort_order' => (int)($data['sort_order'] ?? 999),
            'parent_id' => (int)($data['parent_id'] ?? 0), // –ú–ï–ì–ê: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            'level' => calculateCategoryLevel($data['parent_id'] ?? 0), // –ú–ï–ì–ê: —É—Ä–æ–≤–µ–Ω—å –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
            'commission_rate' => (float)($data['commission_rate'] ?? 0), // –ú–ï–ì–ê: –∫–æ–º–∏—Å—Å–∏—è
            'featured' => !empty($data['featured']), // –ú–ï–ì–ê: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            'seo_title' => $seoData['title'],
            'seo_description' => $seoData['description'],
            'seo_keywords' => $seoData['keywords'],
            'template' => trim($data['template'] ?? 'default'), // –ú–ï–ì–ê: —à–∞–±–ª–æ–Ω –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            'filters' => json_decode($data['filters'] ?? '[]', true), // –ú–ï–ì–ê: —Ñ–∏–ª—å—Ç—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'attributes' => json_decode($data['attributes'] ?? '{}', true), // –ú–ï–ì–ê: –∞—Ç—Ä–∏–±—É—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['categories'][] = $newCategory;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            // –ú–ï–ì–ê: –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            updateCategoriesCache();

            logAdminAction('CATEGORIES', '–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ' . $newCategory['name']);
            return ['success' => true, 'message' => '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'category' => $newCategory];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–°–¢–ï–ô –ú–ï–ì–ê ===

function createNewsMega($data, $files = null) {
    try {
        $dynamicData = initializeDynamicData();
        $news = $dynamicData['news'] ?? [];

        $newId = empty($news) ? 1 : (max(array_column($news, 'id')) + 1);

        // –ú–ï–ì–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–æ–≤–æ—Å—Ç–∏
        $newsImages = [];
        $featuredImage = '';

        if ($files && isset($files['featured_image']) && $files['featured_image']['error'] === UPLOAD_ERR_OK) {
            $uploadResult = uploadNewsImage($files['featured_image']);
            if ($uploadResult['success']) {
                $featuredImage = $uploadResult['path'];
            }
        }

        if ($files && isset($files['gallery'])) {
            $galleryResult = uploadNewsGallery($files['gallery']);
            if ($galleryResult['success']) {
                $newsImages = $galleryResult['images'];
            }
        }

        // –ú–ï–ì–ê: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SEO –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
        $seoData = generateNewsSEO($data['title'], $data['excerpt'] ?? '');
        $readingTime = calculateReadingTime($data['content'] ?? '');
        $contentAnalysis = analyzeNewsContent($data['content'] ?? '');

        $newNews = [
            'id' => $newId,
            'title' => trim($data['title'] ?? ''),
            'slug' => generateSlug($data['title'] ?? ''),
            'excerpt' => trim($data['excerpt'] ?? ''),
            'content' => trim($data['content'] ?? ''),
            'featured_image' => $featuredImage,
            'gallery' => $newsImages, // –ú–ï–ì–ê: –≥–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            'author' => trim($data['author'] ?? $_SESSION['admin_name'] ?? '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
            'category' => trim($data['category'] ?? '–û–±—â–∏–µ'), // –ú–ï–ì–ê: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–æ–≤–æ—Å—Ç–∏
            'tags' => array_filter(array_map('trim', explode(',', $data['tags'] ?? ''))), // –ú–ï–ì–ê: —Ç–µ–≥–∏
            'is_published' => !empty($data['is_published']),
            'is_featured' => !empty($data['is_featured']),
            'is_breaking' => !empty($data['is_breaking']), // –ú–ï–ì–ê: —Å—Ä–æ—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å
            'publish_at' => $data['publish_at'] ?? date('Y-m-d H:i:s'), // –ú–ï–ì–ê: –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            'views' => 0,
            'likes' => 0, // –ú–ï–ì–ê: –ª–∞–π–∫–∏
            'shares' => 0, // –ú–ï–ì–ê: —Ä–µ–ø–æ—Å—Ç—ã
            'comments_count' => 0,
            'comments_enabled' => !empty($data['comments_enabled']), // –ú–ï–ì–ê: –≤–∫–ª—é—á–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            'reading_time' => $readingTime, // –ú–ï–ì–ê: –≤—Ä–µ–º—è —á—Ç–µ–Ω–∏—è
            'content_score' => $contentAnalysis['score'], // –ú–ï–ì–ê: –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            'social_media' => [ // –ú–ï–ì–ê: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ü—Å–µ—Ç–µ–π
                'facebook' => trim($data['facebook_text'] ?? ''),
                'twitter' => trim($data['twitter_text'] ?? ''),
                'telegram' => trim($data['telegram_text'] ?? '')
            ],
            'meta_title' => $seoData['title'],
            'meta_description' => $seoData['description'],
            'meta_keywords' => $seoData['keywords'],
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['news'][] = $newNews;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            // –ú–ï–ì–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Å—Ç–∏–Ω–≥ –≤ —Å–æ—Ü—Å–µ—Ç–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
            if (!empty($data['auto_post_social'])) {
                scheduleNewsToSocialMedia($newNews);
            }

            // –ú–ï–ì–ê: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            if (!empty($data['send_notifications']) && $newNews['is_published']) {
                sendNewsNotifications($newNews);
            }

            logAdminAction('NEWS', '–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–æ—Å—Ç—å: ' . $newNews['title']);
            return ['success' => true, 'message' => '–ù–æ–≤–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'news' => $newNews];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –°–õ–ê–ô–î–ï–† –ú–ï–ì–ê ===

function getSliderSlides() {
    $dynamicData = loadDynamicData();
    if ($dynamicData && isset($dynamicData['slider'])) {
        return $dynamicData['slider'];
    }

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–ª–∞–π–¥—ã
    return [
        [
            'id' => 1,
            'title' => '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä',
            'subtitle' => '–õ—É—á—à–∏–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–∏',
            'description' => '–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä —Ä—ã–±–æ–∫, —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏',
            'image' => '',
            'mobile_image' => '',
            'link' => '?page=catalog',
            'button_text' => '–°–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–∞–ª–æ–≥',
            'button_style' => 'primary',
            'text_position' => 'left',
            'text_color' => '#ffffff',
            'overlay_opacity' => 0.3,
            'animation' => 'slideInLeft',
            'is_active' => true,
            'sort_order' => 1,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ]
    ];
}

function uploadSliderImage($file) {
    $uploadDir = UPLOAD_DIR . 'slider/';
    if (!file_exists($uploadDir)) {
        mkdir($uploadDir, 0755, true);
    }

    $allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
    $maxSize = 15 * 1024 * 1024; // 15MB –¥–ª—è —Å–ª–∞–π–¥–µ—Ä–∞

    if (!in_array($file['type'], $allowedTypes)) {
        return ['success' => false, 'message' => '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞'];
    }

    if ($file['size'] > $maxSize) {
        return ['success' => false, 'message' => '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å. 15MB)'];
    }

    $extension = pathinfo($file['name'], PATHINFO_EXTENSION);
    $fileName = 'slide_' . time() . '_' . uniqid() . '.' . $extension;
    $filePath = $uploadDir . $fileName;

    if (move_uploaded_file($file['tmp_name'], $filePath)) {
        // –ú–ï–ì–ê: –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        $variants = createSliderImageVariants($filePath);

        return [
            'success' => true,
            'path' => $uploadDir . $fileName,
            'variants' => $variants
        ];
    } else {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞'];
    }
}

function saveSliderMega($data) {
    try {
        $dynamicData = initializeDynamicData();
        $slides = $dynamicData['slider'] ?? [];

        $newId = empty($slides) ? 1 : (max(array_column($slides, 'id')) + 1);

        $newSlide = [
            'id' => $newId,
            'title' => trim($data['title'] ?? ''),
            'subtitle' => trim($data['subtitle'] ?? ''),
            'description' => trim($data['description'] ?? ''),
            'image' => trim($data['image'] ?? ''),
            'mobile_image' => trim($data['mobile_image'] ?? ''),
            'video_url' => trim($data['video_url'] ?? ''), // –ú–ï–ì–ê: –≤–∏–¥–µ–æ —Å–ª–∞–π–¥
            'link' => trim($data['link'] ?? ''),
            'button_text' => trim($data['button_text'] ?? ''),
            'button_style' => trim($data['button_style'] ?? 'primary'),
            'text_position' => trim($data['text_position'] ?? 'left'),
            'text_color' => trim($data['text_color'] ?? '#ffffff'),
            'overlay_opacity' => (float)($data['overlay_opacity'] ?? 0.3),
            'animation' => trim($data['animation'] ?? 'slideInLeft'),
            'duration' => (int)($data['duration'] ?? 5000), // –ú–ï–ì–ê: –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞
            'is_active' => !empty($data['is_active']),
            'sort_order' => (int)($data['sort_order'] ?? 999),
            'target_audience' => trim($data['target_audience'] ?? 'all'), // –ú–ï–ì–ê: —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è
            'schedule' => [ // –ú–ï–ì–ê: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞
                'start_date' => $data['start_date'] ?? null,
                'end_date' => $data['end_date'] ?? null,
                'days_of_week' => json_decode($data['days_of_week'] ?? '[]', true)
            ],
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s')
        ];

        $dynamicData['slider'][] = $newSlide;
        $dynamicData['last_updated'] = date('Y-m-d H:i:s');

        if (saveDynamicData($dynamicData)) {
            return ['success' => true, 'message' => '–°–ª–∞–π–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'slide' => $newSlide];
        } else {
            return ['success' => false, 'message' => '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö'];
        }
    } catch (Exception $e) {
        return ['success' => false, 'message' => '–û—à–∏–±–∫–∞: ' . $e->getMessage()];
    }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –ú–ï–ì–ê ===

function calculateRevenueForecast($orders) {
    // –ü—Ä–æ—Å—Ç–æ–π –ª–∏–Ω–µ–π–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤
    $monthlyData = [];
    for ($i = 11; $i >= 0; $i--) {
        $monthStart = date('Y-m-01', strtotime("-$i months"));
        $monthEnd = date('Y-m-t', strtotime("-$i months"));
        $monthOrders = array_filter($orders, function($o) use ($monthStart, $monthEnd) {
            return $o['created_at'] >= $monthStart && $o['created_at'] <= $monthEnd;
        });
        $monthlyData[] = array_sum(array_column($monthOrders, 'total_amount'));
    }

    $avgGrowth = 0;
    for ($i = 1; $i < count($monthlyData); $i++) {
        if ($monthlyData[$i-1] > 0) {
            $avgGrowth += ($monthlyData[$i] - $monthlyData[$i-1]) / $monthlyData[$i-1];
        }
    }
    $avgGrowth = $avgGrowth / (count($monthlyData) - 1);

    $lastMonth = end($monthlyData);
    $forecast = $lastMonth * (1 + $avgGrowth);

    return [
        'next_month' => number_format($forecast, 0, '', ' ') . ' ‚ÇΩ',
        'growth_rate' => round($avgGrowth * 100, 1) . '%',
        'confidence' => rand(75, 95) . '%'
    ];
}

function calculateConversionRate() {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
    return rand(15, 35) / 10;
}

function calculateNPS($reviews) {
    if (empty($reviews)) return 0;

    $promoters = count(array_filter($reviews, fn($r) => $r['rating'] >= 4));
    $detractors = count(array_filter($reviews, fn($r) => $r['rating'] <= 2));

    return round((($promoters - $detractors) / count($reviews)) * 100);
}

function getTopCategory($products, $categories) {
    $categoryStats = [];
    foreach ($categories as $category) {
        $categoryProducts = array_filter($products, fn($p) => $p['category_id'] == $category['id']);
        $totalSales = array_sum(array_column($categoryProducts, 'sales'));
        if ($totalSales > 0) {
            $categoryStats[] = [
                'name' => $category['name'],
                'icon' => $category['icon'],
                'sales' => $totalSales
            ];
        }
    }

    if (empty($categoryStats)) return '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö';

    usort($categoryStats, fn($a, $b) => $b['sales'] - $a['sales']);
    return $categoryStats[0]['icon'] . ' ' . $categoryStats[0]['name'];
}

function analyzeCustomers($orders) {
    $customers = [];
    foreach ($orders as $order) {
        $email = $order['customer_email'];
        if (!isset($customers[$email])) {
            $customers[$email] = [
                'email' => $email,
                'name' => $order['customer_name'],
                'orders_count' => 0,
                'total_spent' => 0,
                'first_order' => $order['created_at'],
                'last_order' => $order['created_at']
            ];
        }
        $customers[$email]['orders_count']++;
        $customers[$email]['total_spent'] += $order['total_amount'];
        if ($order['created_at'] > $customers[$email]['last_order']) {
            $customers[$email]['last_order'] = $order['created_at'];
        }
    }

    return [
        'total_customers' => count($customers),
        'repeat_customers' => count(array_filter($customers, fn($c) => $c['orders_count'] > 1)),
        'avg_orders_per_customer' => count($customers) > 0 ? array_sum(array_column($customers, 'orders_count')) / count($customers) : 0,
        'avg_customer_value' => count($customers) > 0 ? array_sum(array_column($customers, 'total_spent')) / count($customers) : 0
    ];
}

function calculateGrowthRate($orders) {
    $thisMonth = date('Y-m');
    $lastMonth = date('Y-m', strtotime('-1 month'));

    $thisMonthOrders = array_filter($orders, fn($o) => substr($o['created_at'], 0, 7) === $thisMonth);
    $lastMonthOrders = array_filter($orders, fn($o) => substr($o['created_at'], 0, 7) === $lastMonth);

    $thisMonthRevenue = array_sum(array_column($thisMonthOrders, 'total_amount'));
    $lastMonthRevenue = array_sum(array_column($lastMonthOrders, 'total_amount'));

    if ($lastMonthRevenue == 0) return 0;

    return round((($thisMonthRevenue - $lastMonthRevenue) / $lastMonthRevenue) * 100, 1);
}

function calculateChurnRate($orders) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    return rand(5, 15) / 10;
}

function generateProductSEO($name, $description) {
    $title = $name . ' - –∫—É–ø–∏—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä';
    $desc = '–ö—É–ø–∏—Ç—å ' . $name . ' —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –†–æ—Å—Å–∏–∏. –ì–∞—Ä–∞–Ω—Ç–∏—è –∫–∞—á–µ—Å—Ç–≤–∞.' . 
            ($description ? ' ' . mb_substr(strip_tags($description), 0, 100) : '');
    $keywords = '–∞–∫–≤–∞—Ä–∏—É–º, —Ä—ã–±–∫–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è, ' . strtolower($name);

    // –ü—Ä–æ—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞ SEO (–∏–º–∏—Ç–∞—Ü–∏—è)
    $score = rand(70, 95);

    return [
        'title' => $title,
        'description' => $desc,
        'keywords' => $keywords,
        'score' => $score
    ];
}

function generateCategorySEO($name, $description) {
    $title = $name . ' - –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ê–∫–≤–∞–°–±–æ—Ä';
    $desc = '–ë–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ' . $name . '. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –†–æ—Å—Å–∏–∏.' .
            ($description ? ' ' . mb_substr(strip_tags($description), 0, 100) : '');
    $keywords = '–∞–∫–≤–∞—Ä–∏—É–º, ' . strtolower($name) . ', —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∞–∫–≤–∞—Ä–∏—É–º–∞';

    return [
        'title' => $title,
        'description' => $desc,
        'keywords' => $keywords
    ];
}

function generateNewsSEO($title, $excerpt) {
    $seoTitle = $title . ' - –ê–∫–≤–∞–°–±–æ—Ä';
    $desc = $excerpt ?: '–ß–∏—Ç–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—å–∏ –æ–± –∞–∫–≤–∞—Ä–∏—É–º–∏—Å—Ç–∏–∫–µ –æ—Ç –ê–∫–≤–∞–°–±–æ—Ä';
    $keywords = '–∞–∫–≤–∞—Ä–∏—É–º, –Ω–æ–≤–æ—Å—Ç–∏, ' . strtolower($title);

    return [
        'title' => $seoTitle,
        'description' => mb_substr($desc, 0, 160),
        'keywords' => $keywords
    ];
}

function calculateReadingTime($content) {
    $wordCount = str_word_count(strip_tags($content));
    $readingTime = ceil($wordCount / 200); // 200 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
    return $readingTime;
}

function analyzeNewsContent($content) {
    $wordCount = str_word_count(strip_tags($content));
    $score = 50;

    // –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    if ($wordCount >= 300) $score += 20;
    if ($wordCount >= 500) $score += 10;
    if (substr_count($content, '<h') >= 2) $score += 10; // –ï—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (substr_count($content, '<img') >= 1) $score += 10; // –ï—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    return [
        'score' => min($score, 100),
        'word_count' => $wordCount,
        'readability' => rand(70, 90)
    ];
}

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–ì–ê ===

function getProductsStatsMega() {
    $products = getProducts();

    return [
        'total' => count($products),
        'active' => count(array_filter($products, fn($p) => $p['is_active'])),
        'featured' => count(array_filter($products, fn($p) => $p['is_featured'])),
        'low_stock' => count(array_filter($products, fn($p) => $p['stock'] <= 5)),
        'out_of_stock' => count(array_filter($products, fn($p) => $p['stock'] <= 0)),
        'new_products' => count(array_filter($products, fn($p) => $p['is_new'])),
        'avg_price' => count($products) > 0 ? array_sum(array_column($products, 'price')) / count($products) : 0,
        'total_value' => array_sum(array_map(fn($p) => $p['price'] * $p['stock'], $products))
    ];
}

function getCategoriesStatsMega() {
    $categories = getCategories();
    $products = getProducts();

    $categoriesWithProducts = 0;
    foreach ($categories as $category) {
        $hasProducts = array_filter($products, fn($p) => $p['category_id'] == $category['id']);
        if (!empty($hasProducts)) $categoriesWithProducts++;
    }

    return [
        'total' => count($categories),
        'active' => count(array_filter($categories, fn($c) => $c['active'])),
        'with_products' => $categoriesWithProducts,
        'empty_categories' => count($categories) - $categoriesWithProducts
    ];
}

function getOrdersStatsMega() {
    $orders = getOrders();

    $thisMonth = date('Y-m');
    $lastMonth = date('Y-m', strtotime('-1 month'));

    $thisMonthOrders = array_filter($orders, fn($o) => substr($o['created_at'], 0, 7) === $thisMonth);
    $lastMonthOrders = array_filter($orders, fn($o) => substr($o['created_at'], 0, 7) === $lastMonth);

    return [
        'total' => count($orders),
        'new' => count(array_filter($orders, fn($o) => $o['status'] === 'new')),
        'processing' => count(array_filter($orders, fn($o) => $o['status'] === 'processing')),
        'completed' => count(array_filter($orders, fn($o) => $o['status'] === 'delivered')),
        'cancelled' => count(array_filter($orders, fn($o) => $o['status'] === 'cancelled')),
        'total_amount' => array_sum(array_column($orders, 'total_amount')),
        'this_month' => count($thisMonthOrders),
        'last_month' => count($lastMonthOrders),
        'avg_order_value' => count($orders) > 0 ? array_sum(array_column($orders, 'total_amount')) / count($orders) : 0
    ];
}

function getReviewsStatsMega() {
    $reviews = getReviews();

    $ratingDistribution = [1 => 0, 2 => 0, 3 => 0, 4 => 0, 5 => 0];
    foreach ($reviews as $review) {
        $ratingDistribution[$review['rating']]++;
    }

    return [
        'total' => count($reviews),
        'approved' => count(array_filter($reviews, fn($r) => $r['is_approved'])),
        'pending' => count(array_filter($reviews, fn($r) => !$r['is_approved'])),
        'average_rating' => count($reviews) > 0 ? array_sum(array_column($reviews, 'rating')) / count($reviews) : 0,
        'rating_distribution' => $ratingDistribution,
        'nps_score' => calculateNPS($reviews)
    ];
}

function getNewsStatsMega() {
    $news = getNews();

    return [
        'total' => count($news),
        'published' => count(array_filter($news, fn($n) => $n['is_published'])),
        'drafts' => count(array_filter($news, fn($n) => !$n['is_published'])),
        'featured' => count(array_filter($news, fn($n) => $n['is_featured'])),
        'total_views' => array_sum(array_column($news, 'views')),
        'avg_views' => count($news) > 0 ? array_sum(array_column($news, 'views')) / count($news) : 0
    ];
}

// === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–ì–ê –§–£–ù–ö–¶–ò–ò ===

function logProductChange($productId, $action, $description, $data = null) {
    $logEntry = [
        'timestamp' => date('Y-m-d H:i:s'),
        'product_id' => $productId,
        'action' => $action,
        'description' => $description,
        'user' => $_SESSION['admin_name'] ?? '–°–∏—Å—Ç–µ–º–∞',
        'data' => $data
    ];

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
    $historyFile = __DIR__ . '/logs/products_history.json';
    $history = [];
    if (file_exists($historyFile)) {
        $history = json_decode(file_get_contents($historyFile), true) ?: [];
    }

    array_unshift($history, $logEntry);
    $history = array_slice($history, 0, 1000); // –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–∞–ø–∏—Å–µ–π

    file_put_contents($historyFile, json_encode($history, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}

function sendProductNotification($action, $product) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ Telegram, email –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –∏ —Ç.–¥.
    logAdminAction('NOTIFICATIONS', "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ: {$product['name']} ($action)");
}

function scheduleNewsToSocialMedia($news) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç–∏
    logAdminAction('SOCIAL', "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –ø–æ—Å—Ç –≤ —Å–æ—Ü—Å–µ—Ç–∏: {$news['title']}");
}

function sendNewsNotifications($news) {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    logAdminAction('NOTIFICATIONS', "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ—Å—Ç–∏: {$news['title']}");
}

function updateCategoriesCache() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    $categories = getCategories();
    $cacheFile = __DIR__ . '/cache/categories.json';

    if (!file_exists(dirname($cacheFile))) {
        mkdir(dirname($cacheFile), 0755, true);
    }

    file_put_contents($cacheFile, json_encode($categories, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));
}

<?php
// –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ mega_modules.php

// === –†–ï–ù–î–ï–†–ò–ù–ì –ú–ï–ì–ê –î–ê–®–ë–û–†–î–ê ===
function renderDashboardMega($data) {
    $stats = $data['stats'];
    $activity = $data['recent_activity'] ?? [];
    $analytics = $data['analytics'] ?? [];
    ?>
    <!-- –ú–ï–ì–ê KPI –ö–∞—Ä—Ç–æ—á–∫–∏ -->
    <div class='stats-grid'>
        <?php foreach ($stats as $key => $stat): ?>
            <div class='stat-card mega-card stat-<?= $stat['trend'] === 'positive' ? 'success' : ($stat['trend'] === 'negative' ? 'danger' : 'primary') ?>' data-stat='<?= $key ?>'>
                <div class='stat-header'>
                    <div class='stat-icon mega-icon'>
                        <i class='<?= $stat['icon'] ?>'></i>
                    </div>
                    <div class='stat-trend'>
                        <i class='fas fa-<?= $stat['trend'] === 'positive' ? 'arrow-up' : ($stat['trend'] === 'negative' ? 'arrow-down' : 'minus') ?>'></i>
                    </div>
                    <div class='live-indicator'></div>
                </div>

                <div class='stat-value'><?= $stat['value'] ?></div>
                <div class='stat-label'><?= $stat['label'] ?></div>
                <div class='stat-change <?= $stat['trend'] ?>'>
                    <i class='fas fa-<?= $stat['trend'] === 'positive' ? 'arrow-up' : ($stat['trend'] === 'negative' ? 'arrow-down' : 'minus') ?>'></i>
                    <?= $stat['change'] ?>
                </div>

                <!-- –ú–ï–ì–ê: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ -->
                <?php if (isset($stat['forecast'])): ?>
                    <div style='margin-top: 8px; font-size: 12px; color: var(--info-color);'>
                        <i class='fas fa-crystal-ball'></i> –ü—Ä–æ–≥–Ω–æ–∑: <?= $stat['forecast'] ?>
                    </div>
                <?php endif; ?>

                <?php if (isset($stat['nps'])): ?>
                    <div style='margin-top: 4px; font-size: 12px; color: var(--success-color);'>
                        <i class='fas fa-thumbs-up'></i> NPS: <?= $stat['nps'] ?>
                    </div>
                <?php endif; ?>
            </div>
        <?php endforeach; ?>
    </div>

    <!-- –ú–ï–ì–ê –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥ -->
    <div style='display: grid; grid-template-columns: 2fr 1fr; gap: 32px; margin-bottom: 40px;'>
        <!-- –ñ–∏–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ -->
        <div class='content-card mega-card'>
            <div class='content-card-header'>
                <h3 class='content-card-title'>
                    <i class='fas fa-chart-line'></i>
                    –ú–ï–ì–ê –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
                    <span class='sidebar-badge live'>LIVE</span>
                </h3>
                <div class='d-flex gap-2'>
                    <select class='form-select' onchange='updateAnalyticsChart(this.value)'>
                        <option value='7'>–ù–µ–¥–µ–ª—è</option>
                        <option value='30' selected>–ú–µ—Å—è—Ü</option>
                        <option value='90'>–ö–≤–∞—Ä—Ç–∞–ª</option>
                        <option value='365'>–ì–æ–¥</option>
                    </select>
                    <button class='btn btn-outline btn-sm' onclick='exportChartData()'>
                        <i class='fas fa-download'></i>
                    </button>
                </div>
            </div>
            <div class='content-card-body'>
                <canvas id='megaSalesChart' style='max-height: 400px;'></canvas>
                <div style='margin-top: 16px; display: grid; grid-template-columns: repeat(4, 1fr); gap: 16px; text-align: center;'>
                    <div>
                        <div style='font-size: 20px; font-weight: 700; color: var(--success-color);'>
                            <?= number_format(array_sum(array_column($analytics['sales_by_day'] ?? [], 'revenue')), 0, '', ' ') ?> ‚ÇΩ
                        </div>
                        <div style='font-size: 12px; color: var(--text-muted);'>–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞</div>
                    </div>
                    <div>
                        <div style='font-size: 20px; font-weight: 700; color: var(--primary-color);'>
                            <?= array_sum(array_column($analytics['sales_by_day'] ?? [], 'orders')) ?>
                        </div>
                        <div style='font-size: 12px; color: var(--text-muted);'>–ó–∞–∫–∞–∑–æ–≤</div>
                    </div>
                    <div>
                        <div style='font-size: 20px; font-weight: 700; color: var(--info-color);'>
                            <?= array_sum(array_column($analytics['sales_by_day'] ?? [], 'unique_customers')) ?>
                        </div>
                        <div style='font-size: 12px; color: var(--text-muted);'>–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                    </div>
                    <div>
                        <div style='font-size: 20px; font-weight: 700; color: var(--warning-color);'>
                            <?= count($analytics['sales_by_day'] ?? []) > 0 ? number_format(array_sum(array_column($analytics['sales_by_day'], 'revenue')) / count($analytics['sales_by_day']), 0, '', ' ') : 0 ?> ‚ÇΩ
                        </div>
                        <div style='font-size: 12px; color: var(--text-muted);'>–°—Ä–µ–¥–Ω–∏–π –¥–Ω–µ–≤–Ω–æ–π –¥–æ—Ö–æ–¥</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- AI –ò–Ω—Å–∞–π—Ç—ã -->
        <div class='content-card mega-card'>
            <div class='content-card-header'>
                <h3 class='content-card-title'>
                    <i class='fas fa-robot'></i>
                    AI –ò–Ω—Å–∞–π—Ç—ã
                    <span class='sidebar-badge badge-success'>AI</span>
                </h3>
            </div>
            <div class='content-card-body'>
                <div style='display: grid; gap: 16px;'>
                    <div style='padding: 16px; background: linear-gradient(135deg, #667eea, #764ba2); color: white; border-radius: var(--border-radius-lg);'>
                        <div style='display: flex; align-items: center; gap: 8px; margin-bottom: 8px;'>
                            <i class='fas fa-lightbulb'></i>
                            <strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–Ω—è</strong>
                        </div>
                        <p style='margin: 0; font-size: 14px;'>–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–†—ã–±–∫–∏" –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–æ—Å—Ç –ø—Ä–æ–¥–∞–∂ –Ω–∞ 25%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç.</p>
                    </div>

                    <div style='padding: 16px; background: rgba(46, 204, 113, 0.1); border-left: 4px solid var(--success-color); border-radius: var(--border-radius);'>
                        <div style='display: flex; align-items: center; gap: 8px; margin-bottom: 8px;'>
                            <i class='fas fa-trend-up'></i>
                            <strong>–¢—Ä–µ–Ω–¥</strong>
                        </div>
                        <p style='margin: 0; font-size: 14px;'>–ü—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏ –Ω–∞ 15% –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤.</p>
                    </div>

                    <div style='padding: 16px; background: rgba(243, 156, 18, 0.1); border-left: 4px solid var(--warning-color); border-radius: var(--border-radius);'>
                        <div style='display: flex; align-items: center; gap: 8px; margin-bottom: 8px;'>
                            <i class='fas fa-exclamation-triangle'></i>
                            <strong>–í–Ω–∏–º–∞–Ω–∏–µ</strong>
                        </div>
                        <p style='margin: 0; font-size: 14px;'>5 —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã.</p>
                    </div>
                </div>

                <button class='btn btn-mega btn-block mt-3' onclick='openMegaAnalytics()'>
                    <i class='fas fa-magic'></i>
                    –ü–æ–¥—Ä–æ–±–Ω–∞—è AI –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
                </button>
            </div>
        </div>
    </div>

    <!-- –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å -->
    <div class='content-card'>
        <div class='content-card-header'>
            <h3 class='content-card-title'>
                <i class='fas fa-clock'></i>
                –ú–ï–ì–ê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            </h3>
            <button class='btn btn-outline btn-sm' onclick='refreshActivity()'>
                <i class='fas fa-sync-alt'></i>
                –û–±–Ω–æ–≤–∏—Ç—å
            </button>
        </div>
        <div class='content-card-body'>
            <div style='display: grid; gap: 16px;'>
                <?php foreach ($activity as $item): ?>
                    <div style='display: flex; align-items: center; gap: 16px; padding: 16px; background: var(--bg-secondary); border-radius: var(--border-radius-lg); border-left: 4px solid var(--<?= $item['type'] === 'success' ? 'success' : ($item['type'] === 'primary' ? 'primary' : 'info') ?>-color); transition: var(--transition);' 
                         onmouseenter='this.style.transform="scale(1.02)"'
                         onmouseleave='this.style.transform="scale(1)"'>
                        <div style='width: 40px; height: 40px; border-radius: 50%; background: var(--<?= $item['type'] === 'success' ? 'success' : ($item['type'] === 'primary' ? 'primary' : 'info') ?>-color); display: flex; align-items: center; justify-content: center; color: white;'>
                            <i class='<?= $item['icon'] ?>'></i>
                        </div>
                        <div style='flex: 1;'>
                            <div style='font-weight: 600; margin-bottom: 4px;'><?= $item['action'] ?></div>
                            <div style='color: var(--text-secondary); font-size: 14px;'><?= $item['details'] ?></div>
                        </div>
                        <div style='color: var(--text-muted); font-size: 13px; white-space: nowrap;'>
                            <?= $item['time'] ?>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–ï–ì–ê –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
        document.addEventListener('DOMContentLoaded', function() {
            const salesData = <?= json_encode($analytics['sales_by_day'] ?? []) ?>;
            const ctx = document.getElementById('megaSalesChart').getContext('2d');

            const gradient = ctx.createLinearGradient(0, 0, 0, 400);
            gradient.addColorStop(0, 'rgba(46, 204, 113, 0.8)');
            gradient.addColorStop(1, 'rgba(46, 204, 113, 0.1)');

            new Chart(ctx, {
                type: 'line',
                data: {
                    labels: salesData.map(item => item.date_formatted),
                    datasets: [{
                        label: '–í—ã—Ä—É—á–∫–∞',
                        data: salesData.map(item => item.revenue),
                        borderColor: 'rgb(46, 204, 113)',
                        backgroundColor: gradient,
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#fff',
                        pointBorderColor: 'rgb(46, 204, 113)',
                        pointBorderWidth: 3,
                        pointRadius: 6,
                        pointHoverRadius: 8
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            backgroundColor: 'rgba(0,0,0,0.8)',
                            titleColor: '#fff',
                            bodyColor: '#fff',
                            borderColor: 'rgb(46, 204, 113)',
                            borderWidth: 1,
                            cornerRadius: 10,
                            displayColors: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true,
                            grid: {
                                color: 'rgba(0,0,0,0.1)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return new Intl.NumberFormat('ru-RU').format(value) + ' ‚ÇΩ';
                                }
                            }
                        },
                        x: {
                            grid: {
                                display: false
                            }
                        }
                    },
                    interaction: {
                        intersect: false,
                        mode: 'index'
                    }
                }
            });
        });

        function updateAnalyticsChart(period) {
            showNotification(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∑–∞ ${period} –¥–Ω–µ–π`, 'info');
            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç AJAX –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        }

        function exportChartData() {
            showNotification('–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞', 'success');
            // –õ–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        }

        function openMegaAnalytics() {
            showNotification('–û—Ç–∫—Ä—ã—Ç–∏–µ –ú–ï–ì–ê –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Å AI', 'info');
            // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        }

        function refreshActivity() {
            showNotification('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', 'info');
            setTimeout(() => location.reload(), 1000);
        }
    </script>
    <?php
}

// === –†–ï–ù–î–ï–†–ò–ù–ì –ú–ï–ì–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–û–í–ê–†–ê–ú–ò ===
function renderProductsSectionMega($data) {
    $products = $data['products'];
    $categories = $data['categories'];
    $stats = $data['stats'];
    ?>
    <!-- –ú–ï–ì–ê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ -->
    <div class='stats-grid' style='grid-template-columns: repeat(4, 1fr); margin-bottom: 32px;'>
        <div class='stat-card mega-card stat-primary'>
            <div class='stat-icon mega-icon'><i class='fas fa-fish'></i></div>
            <div class='stat-value'><?= $stats['total'] ?></div>
            <div class='stat-label'>–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤</div>
            <div class='stat-change positive'>
                +<?= $stats['new_products'] ?> –Ω–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü
            </div>
        </div>
        <div class='stat-card mega-card stat-success'>
            <div class='stat-icon mega-icon'><i class='fas fa-eye'></i></div>
            <div class='stat-value'><?= $stats['active'] ?></div>
            <div class='stat-label'>–ê–∫—Ç–∏–≤–Ω—ã—Ö</div>
            <div class='stat-change neutral'>
                <?= round(($stats['active']/$stats['total'])*100, 1) ?>% –æ—Ç –æ–±—â–µ–≥–æ
            </div>
        </div>
        <div class='stat-card mega-card stat-warning'>
            <div class='stat-icon mega-icon'><i class='fas fa-exclamation-triangle'></i></div>
            <div class='stat-value'><?= $stats['low_stock'] ?></div>
            <div class='stat-label'>–ú–∞–ª–æ —Ç–æ–≤–∞—Ä–∞</div>
            <div class='stat-change <?= $stats['low_stock'] > 10 ? 'negative' : 'positive' ?>'>
                –¢—Ä–µ–±—É—é—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            </div>
        </div>
        <div class='stat-card mega-card stat-success'>
            <div class='stat-icon mega-icon'><i class='fas fa-ruble-sign'></i></div>
            <div class='stat-value'><?= number_format($stats['total_value'], 0, '', ' ') ?> ‚ÇΩ</div>
            <div class='stat-label'>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</div>
            <div class='stat-change positive'>
                –°–∫–ª–∞–¥—Å–∫–∏–µ –∑–∞–ø–∞—Å—ã
            </div>
        </div>
    </div>

    <!-- –ú–ï–ì–ê –î–µ–π—Å—Ç–≤–∏—è -->
    <div class='d-flex justify-content-between align-items-center mb-4 flex-wrap gap-3'>
        <div class='d-flex gap-2 flex-wrap'>
            <button class='btn btn-mega btn-lg' onclick='openModal("addProductMegaModal")'>
                <i class='fas fa-plus'></i>
                –ú–ï–ì–ê –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
            </button>
            <button class='btn btn-success' onclick='openBulkImport()'>
                <i class='fas fa-upload'></i>
                –ò–º–ø–æ—Ä—Ç Excel
            </button>
            <button class='btn btn-outline' onclick='exportProducts()'>
                <i class='fas fa-download'></i>
                –≠–∫—Å–ø–æ—Ä—Ç
            </button>
            <button class='btn btn-warning' onclick='openInventoryCheck()'>
                <i class='fas fa-warehouse'></i>
                –†–µ–≤–∏–∑–∏—è —Å–∫–ª–∞–¥–∞
            </button>
        </div>

        <!-- –ú–ï–ì–ê –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã -->
        <div class='d-flex gap-2 flex-wrap'>
            <div style='position: relative;'>
                <input type='text' placeholder='üîç –ú–ï–ì–ê –ø–æ–∏—Å–∫...' class='form-input' style='width: 250px; padding-left: 40px;' onkeyup='megaSearchProducts(this.value)' id='megaSearch'>
                <i class='fas fa-search' style='position: absolute; left: 15px; top: 50%; transform: translateY(-50%); color: var(--text-muted);'></i>
            </div>
            <select class='form-select' onchange='filterByCategory(this.value)' style='min-width: 150px;'>
                <option value=''>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</option>
                <?php foreach ($categories as $category): ?>
                    <option value='<?= $category['id'] ?>'><?= $category['icon'] ?> <?= htmlspecialchars($category['name']) ?></option>
                <?php endforeach; ?>
            </select>
            <select class='form-select' onchange='filterByStatus(this.value)'>
                <option value=''>–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                <option value='active'>–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
                <option value='inactive'>–°–∫—Ä—ã—Ç—ã–µ</option>
                <option value='featured'>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ</option>
                <option value='low_stock'>–ú–∞–ª–æ —Ç–æ–≤–∞—Ä–∞</option>
                <option value='out_of_stock'>–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</option>
            </select>
        </div>
    </div>

    <!-- –ú–ï–ì–ê –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ -->
    <div class='content-card mega-card'>
        <div class='content-card-header'>
            <div class='d-flex justify-content-between align-items-center w-100'>
                <h3 class='content-card-title'>
                    <i class='fas fa-table'></i>
                    –ú–ï–ì–ê –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
                    <span class='sidebar-badge live'><?= count($products) ?></span>
                </h3>
                <div class='d-flex gap-2'>
                    <button class='btn btn-outline btn-sm' onclick='toggleViewMode()' id='viewModeBtn'>
                        <i class='fas fa-th'></i> –ö–∞—Ä—Ç–æ—á–∫–∏
                    </button>
                    <button class='btn btn-outline btn-sm' onclick='selectAllProducts()'>
                        <i class='fas fa-check-square'></i> –í—ã–±—Ä–∞—Ç—å –≤—Å–µ
                    </button>
                </div>
            </div>
        </div>
        <div class='table-container'>
            <table class='table' id='productsTable'>
                <thead>
                    <tr>
                        <th style='width: 40px;'>
                            <input type='checkbox' onchange='toggleAllProducts(this.checked)'>
                        </th>
                        <th style='width: 80px;'>–§–æ—Ç–æ</th>
                        <th>–¢–æ–≤–∞—Ä</th>
                        <th>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</th>
                        <th>–¶–µ–Ω–∞ / –°–µ–±–µ—Å—Ç.</th>
                        <th>–û—Å—Ç–∞—Ç–æ–∫</th>
                        <th>–ü—Ä–æ–¥–∞–∂–∏</th>
                        <th>–†–µ–π—Ç–∏–Ω–≥</th>
                        <th>–°—Ç–∞—Ç—É—Å</th>
                        <th style='width: 150px;'>–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($products as $product): ?>
                        <tr data-category='<?= $product['category_id'] ?>' data-name='<?= strtolower($product['name']) ?>' data-status='<?= $product['is_active'] ? 'active' : 'inactive' ?>' class='product-row'>
                            <td>
                                <input type='checkbox' class='bulk-checkbox' id='item-<?= $product['id'] ?>' onchange='toggleItemSelection(<?= $product['id'] ?>)'>
                            </td>
                            <td>
                                <div style='width: 60px; height: 60px; border-radius: var(--border-radius); overflow: hidden; background: var(--bg-tertiary); display: flex; align-items: center; justify-content: center; position: relative;'>
                                    <?php if (!empty($product['images'])): ?>
                                        <img src='<?= htmlspecialchars($product['images'][0]['original'] ?? $product['images'][0]) ?>' alt='<?= htmlspecialchars($product['name']) ?>' style='width: 100%; height: 100%; object-fit: cover;'>
                                    <?php else: ?>
                                        <i class='fas fa-image' style='color: var(--text-muted); font-size: 24px;'></i>
                                    <?php endif; ?>
                                    <?php if ($product['is_featured']): ?>
                                        <div style='position: absolute; top: 2px; right: 2px; background: gold; color: white; border-radius: 50%; width: 16px; height: 16px; display: flex; align-items: center; justify-content: center; font-size: 10px;'>‚≠ê</div>
                                    <?php endif; ?>
                                </div>
                            </td>
                            <td>
                                <div style='max-width: 200px;'>
                                    <div style='font-weight: 600; margin-bottom: 4px; cursor: pointer; color: var(--primary-color);' onclick='editProduct(<?= $product['id'] ?>)'>
                                        <?= htmlspecialchars(mb_substr($product['name'], 0, 40)) ?><?= mb_strlen($product['name']) > 40 ? '...' : '' ?>
                                    </div>
                                    <div style='font-size: 11px; color: var(--text-muted); margin-bottom: 2px;'>
                                        <i class='fas fa-barcode'></i> <?= $product['sku'] ?>
                                    </div>
                                    <div style='font-size: 11px; color: var(--text-muted);'>
                                        <i class='fas fa-eye'></i> <?= $product['views'] ?> | 
                                        <i class='fas fa-chart-line'></i> ID: <?= $product['id'] ?>
                                    </div>
                                    <div style='margin-top: 4px; display: flex; gap: 4px; flex-wrap: wrap;'>
                                        <?php if ($product['is_featured']): ?>
                                            <span class='status-badge' style='background: gold; color: white; font-size: 10px;'>üî•</span>
                                        <?php endif; ?>
                                        <?php if ($product['is_new']): ?>
                                            <span class='status-badge status-new' style='font-size: 10px;'>NEW</span>
                                        <?php endif; ?>
                                        <?php if (($product['cost_price'] ?? 0) > 0): ?>
                                            <span class='status-badge status-completed' style='font-size: 10px;'>
                                                <?= round((($product['price'] - $product['cost_price']) / $product['price']) * 100) ?>% üìà
                                            </span>
                                        <?php endif; ?>
                                    </div>
                                </div>
                            </td>
                            <td>
                                <span class='status-badge status-new'>
                                    <?= htmlspecialchars($product['category']) ?>
                                </span>
                            </td>
                            <td>
                                <div>
                                    <div style='font-weight: 600; color: var(--success-color);'>
                                        <?= number_format($product['price'], 0, '', ' ') ?> ‚ÇΩ
                                    </div>
                                    <?php if ($product['old_price']): ?>
                                        <div style='font-size: 11px; color: var(--text-muted); text-decoration: line-through;'>
                                            <?= number_format($product['old_price'], 0, '', ' ') ?> ‚ÇΩ
                                        </div>
                                    <?php endif; ?>
                                    <?php if (($product['cost_price'] ?? 0) > 0): ?>
                                        <div style='font-size: 11px; color: var(--info-color);'>
                                            üí∞ <?= number_format($product['cost_price'], 0, '', ' ') ?> ‚ÇΩ
                                        </div>
                                    <?php endif; ?>
                                </div>
                            </td>
                            <td>
                                <div onclick='editStock(<?= $product['id'] ?>, <?= $product['stock'] ?>)' style='cursor: pointer;'>
                                    <span class='status-badge <?= $product['stock'] <= 0 ? 'status-cancelled' : ($product['stock'] <= 5 ? 'status-processing' : 'status-completed') ?>'>
                                        <?= $product['stock'] ?> —à—Ç
                                    </span>
                                    <?php if ($product['stock'] <= ($product['min_stock'] ?? 5)): ?>
                                        <div style='font-size: 10px; color: var(--danger-color); margin-top: 2px;'>
                                            <i class='fas fa-exclamation-triangle'></i> –ü–æ–ø–æ–ª–Ω–∏—Ç—å!
                                        </div>
                                    <?php endif; ?>
                                </div>
                            </td>
                            <td>
                                <div style='text-align: center;'>
                                    <div style='font-weight: 600; color: var(--info-color);'><?= $product['sales'] ?></div>
                                    <div style='font-size: 10px; color: var(--text-muted);'>–ø—Ä–æ–¥–∞–Ω–æ</div>
                                    <?php if ($product['sales'] > 0): ?>
                                        <div style='font-size: 10px; color: var(--success-color);'>
                                            <?= number_format($product['price'] * $product['sales'], 0, '', ' ') ?> ‚ÇΩ
                                        </div>
                                    <?php endif; ?>
                                </div>
                            </td>
                            <td>
                                <div style='text-align: center;'>
                                    <div style='color: gold; font-size: 14px;'>
                                        <?= str_repeat('‚òÖ', floor($product['rating'])) ?><?= str_repeat('‚òÜ', 5 - floor($product['rating'])) ?>
                                    </div>
                                    <div style='font-size: 11px; color: var(--text-muted);'>
                                        <?= $product['rating'] ?> (<?= $product['reviews_count'] ?>)
                                    </div>
                                </div>
                            </td>
                            <td>
                                <label style='display: flex; align-items: center; cursor: pointer;'>
                                    <input type='checkbox' <?= $product['is_active'] ? 'checked' : '' ?>
                                           onchange='toggleProductStatus(<?= $product['id'] ?>, this.checked)'
                                           style='margin-right: 8px;'>
                                    <span class='status-badge <?= $product['is_active'] ? 'status-active' : 'status-inactive' ?>'>
                                        <?= $product['is_active'] ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–°–∫—Ä—ã—Ç' ?>
                                    </span>
                                </label>
                            </td>
                            <td>
                                <div class='d-flex gap-1 flex-wrap'>
                                    <button class='btn btn-primary btn-sm' onclick='editProduct(<?= $product['id'] ?>)' title='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'>
                                        <i class='fas fa-edit'></i>
                                    </button>
                                    <button class='btn btn-success btn-sm' onclick='duplicateProduct(<?= $product['id'] ?>)' title='–î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å'>
                                        <i class='fas fa-copy'></i>
                                    </button>
                                    <button class='btn btn-info btn-sm' onclick='viewProductAnalytics(<?= $product['id'] ?>)' title='–ê–Ω–∞–ª–∏—Ç–∏–∫–∞'>
                                        <i class='fas fa-chart-bar'></i>
                                    </button>
                                    <button class='btn btn-danger btn-sm' onclick='deleteProduct(<?= $product['id'] ?>)' title='–£–¥–∞–ª–∏—Ç—å'>
                                        <i class='fas fa-trash'></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    </div>

    <!-- –ú–ï–ì–ê –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ -->
    <div class='modal' id='addProductMegaModal'>
        <div class='modal-dialog modal-xl'>
            <form method='post' enctype='multipart/form-data' id='megaProductForm'>
                <input type='hidden' name='action' value='create_product'>
                <div class='modal-header'>
                    <h3 class='modal-title'>
                        <i class='fas fa-plus'></i>
                        –ú–ï–ì–ê –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
                        <span class='sidebar-badge live'>v7.0</span>
                    </h3>
                    <button type='button' class='modal-close' onclick='closeModal("addProductMegaModal")'>&times;</button>
                </div>
                <div class='modal-body'>
                    <!-- –¢–∞–±—ã -->
                    <div style='display: flex; gap: 8px; margin-bottom: 24px; border-bottom: 1px solid var(--border-color);'>
                        <button type='button' class='btn btn-outline btn-sm tab-btn active' onclick='switchTab("basic")' data-tab='basic'>
                            <i class='fas fa-info-circle'></i> –û—Å–Ω–æ–≤–Ω–æ–µ
                        </button>
                        <button type='button' class='btn btn-outline btn-sm tab-btn' onclick='switchTab("images")' data-tab='images'>
                            <i class='fas fa-images'></i> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        </button>
                        <button type='button' class='btn btn-outline btn-sm tab-btn' onclick='switchTab("inventory")' data-tab='inventory'>
                            <i class='fas fa-warehouse'></i> –°–∫–ª–∞–¥
                        </button>
                        <button type='button' class='btn btn-outline btn-sm tab-btn' onclick='switchTab("seo")' data-tab='seo'>
                            <i class='fas fa-search'></i> SEO
                        </button>
                        <button type='button' class='btn btn-outline btn-sm tab-btn' onclick='switchTab("advanced")' data-tab='advanced'>
                            <i class='fas fa-cog'></i> –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ
                        </button>
                    </div>

                    <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
                    <div class='tab-content' id='tab-basic'>
                        <div class='form-row'>
                            <div class='form-group'>
                                <label class='form-label'>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ *</label>
                                <input type='text' name='name' class='form-input' required onkeyup='generateSlugAndSEO(this.value)'>
                                <div style='font-size: 12px; color: var(--text-muted); margin-top: 4px;'>
                                    URL: <span id='productSlug'>/product/</span>
                                </div>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                                <select name='category_id' class='form-select' required>
                                    <option value=''>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
                                    <?php foreach ($categories as $category): ?>
                                        <option value='<?= $category['id'] ?>'><?= $category['icon'] ?> <?= htmlspecialchars($category['name']) ?></option>
                                    <?php endforeach; ?>
                                </select>
                            </div>
                        </div>

                        <div class='form-row-3'>
                            <div class='form-group'>
                                <label class='form-label'>–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏ (‚ÇΩ) *</label>
                                <input type='number' name='price' class='form-input' min='0' step='0.01' required onkeyup='calculateMargin()'>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞ (‚ÇΩ)</label>
                                <input type='number' name='old_price' class='form-input' min='0' step='0.01'>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (‚ÇΩ)</label>
                                <input type='number' name='cost_price' class='form-input' min='0' step='0.01' onkeyup='calculateMargin()'>
                                <div style='font-size: 12px; color: var(--success-color); margin-top: 4px;'>
                                    –ú–∞—Ä–∂–∞: <span id='marginPercent'>0%</span>
                                </div>
                            </div>
                        </div>

                        <div class='form-group'>
                            <label class='form-label'>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea name='short_description' class='form-textarea' rows='2' placeholder='–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞'></textarea>
                        </div>

                        <div class='form-group'>
                            <label class='form-label'>–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea name='description' class='form-textarea' rows='6' id='productDescription'></textarea>
                            <div style='font-size: 12px; color: var(--text-muted); margin-top: 4px;'>
                                –°–ª–æ–≤: <span id='wordCount'>0</span> | SEO —Ä–µ–π—Ç–∏–Ω–≥: <span id='seoScore'>-</span>
                            </div>
                        </div>
                    </div>

                    <!-- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è -->
                    <div class='tab-content' id='tab-images' style='display: none;'>
                        <div class='form-group'>
                            <label class='form-label'>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ (–¥–æ 10 —Ñ–∞–π–ª–æ–≤)</label>
                            <div class='dropzone' id='imageDropzone'>
                                <div class='dropzone-icon'>
                                    <i class='fas fa-cloud-upload-alt'></i>
                                </div>
                                <div class='dropzone-text'>
                                    –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
                                </div>
                                <div class='dropzone-hint'>
                                    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: JPG, PNG, WebP, GIF –¥–æ 10MB
                                </div>
                            </div>
                            <input type='file' name='images[]' multiple accept='image/*' style='display: none;' id='imageInput'>
                            <div class='image-preview' id='imagePreview'></div>
                        </div>
                    </div>

                    <!-- –°–∫–ª–∞–¥ -->
                    <div class='tab-content' id='tab-inventory' style='display: none;'>
                        <div class='form-row'>
                            <div class='form-group'>
                                <label class='form-label'>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *</label>
                                <input type='number' name='stock' class='form-input' min='0' value='0' required>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Å—Ç–∞—Ç–æ–∫</label>
                                <input type='number' name='min_stock' class='form-input' min='0' value='5'>
                                <div style='font-size: 12px; color: var(--text-muted); margin-top: 4px;'>
                                    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
                                </div>
                            </div>
                        </div>

                        <div class='form-row'>
                            <div class='form-group'>
                                <label class='form-label'>–ê—Ä—Ç–∏–∫—É–ª (SKU)</label>
                                <input type='text' name='sku' class='form-input' placeholder='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –ø—É—Å—Ç–æ'>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–®—Ç—Ä–∏—Ö-–∫–æ–¥</label>
                                <input type='text' name='barcode' class='form-input'>
                            </div>
                        </div>

                        <div class='form-row-3'>
                            <div class='form-group'>
                                <label class='form-label'>–î–ª–∏–Ω–∞ (—Å–º)</label>
                                <input type='number' name='length' class='form-input' min='0' value='10'>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–®–∏—Ä–∏–Ω–∞ (—Å–º)</label>
                                <input type='number' name='width' class='form-input' min='0' value='10'>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–í—ã—Å–æ—Ç–∞ (—Å–º)</label>
                                <input type='number' name='height' class='form-input' min='0' value='10'>
                            </div>
                        </div>

                        <div class='form-group'>
                            <label class='form-label'>–í–µ—Å (–≥—Ä–∞–º–º—ã)</label>
                            <input type='number' name='weight' class='form-input' min='0' value='100'>
                        </div>
                    </div>

                    <!-- SEO -->
                    <div class='tab-content' id='tab-seo' style='display: none;'>
                        <div class='form-group'>
                            <label class='form-label'>SEO –∑–∞–≥–æ–ª–æ–≤–æ–∫</label>
                            <input type='text' name='meta_title' class='form-input' id='seoTitle' maxlength='60'>
                            <div style='font-size: 12px; color: var(--text-muted); margin-top: 4px;'>
                                –î–ª–∏–Ω–∞: <span id='titleLength'>0</span>/60 —Å–∏–º–≤–æ–ª–æ–≤
                            </div>
                        </div>

                        <div class='form-group'>
                            <label class='form-label'>SEO –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                            <textarea name='meta_description' class='form-textarea' rows='3' id='seoDescription' maxlength='160'></textarea>
                            <div style='font-size: 12px; color: var(--text-muted); margin-top: 4px;'>
                                –î–ª–∏–Ω–∞: <span id='descLength'>0</span>/160 —Å–∏–º–≤–æ–ª–æ–≤
                            </div>
                        </div>

                        <div class='form-group'>
                            <label class='form-label'>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</label>
                            <input type='text' name='meta_keywords' class='form-input' placeholder='–∞–∫–≤–∞—Ä–∏—É–º, —Ä—ã–±–∫–∏, —Ä–∞—Å—Ç–µ–Ω–∏—è'>
                        </div>

                        <!-- SEO –ø—Ä–µ–≤—å—é -->
                        <div style='margin-top: 20px; padding: 20px; background: var(--bg-secondary); border-radius: var(--border-radius-lg);'>
                            <h4>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ Google:</h4>
                            <div style='margin-top: 12px;'>
                                <div style='color: #1a0dab; font-size: 18px; font-weight: 500;' id='seoPreviewTitle'>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –ê–∫–≤–∞–°–±–æ—Ä</div>
                                <div style='color: #006621; font-size: 14px; margin-top: 2px;'>akvasbor.ru ‚Ä∫ product ‚Ä∫ slug</div>
                                <div style='color: #545454; font-size: 14px; margin-top: 4px; line-height: 1.4;' id='seoPreviewDesc'>–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...</div>
                            </div>
                        </div>
                    </div>

                    <!-- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ -->
                    <div class='tab-content' id='tab-advanced' style='display: none;'>
                        <div class='form-row'>
                            <div class='form-group'>
                                <label class='form-label'>–ì–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (–º–µ—Å—è—Ü—ã)</label>
                                <input type='number' name='warranty_period' class='form-input' min='0' value='0'>
                            </div>
                            <div class='form-group'>
                                <label class='form-label'>–ö–ª–∞—Å—Å –¥–æ—Å—Ç–∞–≤–∫–∏</label>
                                <select name='shipping_class' class='form-select'>
                                    <option value='standard'>–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è</option>
                                    <option value='express'>–≠–∫—Å–ø—Ä–µ—Å—Å</option>
                                    <option value='fragile'>–•—Ä—É–ø–∫–∏–π –≥—Ä—É–∑</option>
                                    <option value='heavy'>–¢—è–∂–µ–ª—ã–π –≥—Ä—É–∑</option>
                                </select>
                            </div>
                        </div>

                        <div style='display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin-bottom: 20px;'>
                            <label style='display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 12px; background: var(--bg-secondary); border-radius: var(--border-radius);'>
                                <input type='checkbox' name='is_featured'>
                                <span>üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä</span>
                            </label>
                            <label style='display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 12px; background: var(--bg-secondary); border-radius: var(--border-radius);'>
                                <input type='checkbox' name='is_new'>
                                <span>‚ú® –ù–æ–≤–∏–Ω–∫–∞</span>
                            </label>
                            <label style='display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 12px; background: var(--bg-secondary); border-radius: var(--border-radius);'>
                                <input type='checkbox' name='is_active' checked>
                                <span>üëÅÔ∏è –ê–∫—Ç–∏–≤–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ</span>
                            </label>
                            <label style='display: flex; align-items: center; gap: 8px; cursor: pointer; padding: 12px; background: var(--bg-secondary); border-radius: var(--border-radius);'>
                                <input type='checkbox' name='inventory_tracking' checked>
                                <span>üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏</span>
                            </label>
                        </div>
                    </div>
                </div>
                <div class='modal-footer'>
                    <button type='button' class='btn btn-outline' onclick='closeModal("addProductMegaModal")'>–û—Ç–º–µ–Ω–∞</button>
                    <button type='button' class='btn btn-warning' onclick='saveProductDraft()'>
                        <i class='fas fa-save'></i>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫
                    </button>
                    <button type='submit' class='btn btn-mega'>
                        <i class='fas fa-rocket'></i>
                        –°–æ–∑–¥–∞—Ç—å –ú–ï–ì–ê —Ç–æ–≤–∞—Ä
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // –ú–ï–ì–ê —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        function megaSearchProducts(query) {
            const rows = document.querySelectorAll('.product-row');
            const searchTerm = query.toLowerCase();

            rows.forEach(row => {
                const name = row.dataset.name;
                const visible = name.includes(searchTerm);
                row.style.display = visible ? '' : 'none';
            });

            // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if (searchTerm) {
                setTimeout(() => {
                    rows.forEach(row => {
                        if (row.style.display !== 'none') {
                            row.style.backgroundColor = 'rgba(46, 204, 113, 0.1)';
                            setTimeout(() => {
                                row.style.backgroundColor = '';
                            }, 1000);
                        }
                    });
                }, 100);
            }
        }

        function filterByCategory(categoryId) {
            const rows = document.querySelectorAll('.product-row');

            rows.forEach(row => {
                const rowCategory = row.dataset.category;
                const visible = !categoryId || rowCategory === categoryId;
                row.style.display = visible ? '' : 'none';
            });
        }

        function filterByStatus(status) {
            const rows = document.querySelectorAll('.product-row');

            rows.forEach(row => {
                let visible = true;

                switch(status) {
                    case 'active':
                        visible = row.dataset.status === 'active';
                        break;
                    case 'inactive':
                        visible = row.dataset.status === 'inactive';
                        break;
                    case 'featured':
                        visible = row.querySelector('.fa-star') !== null;
                        break;
                    case 'low_stock':
                        visible = row.querySelector('.status-processing') !== null;
                        break;
                    case 'out_of_stock':
                        visible = row.querySelector('.status-cancelled') !== null;
                        break;
                }

                row.style.display = visible ? '' : 'none';
            });
        }

        function toggleAllProducts(checked) {
            document.querySelectorAll('.bulk-checkbox').forEach(cb => {
                cb.checked = checked;
                if (checked) {
                    selectedItems.add(parseInt(cb.id.replace('item-', '')));
                } else {
                    selectedItems.clear();
                }
            });
            updateBulkActionsBar();
        }

        function editProduct(productId) {
            showNotification('–û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ #' + productId, 'info');
            // –û—Ç–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        }

        function duplicateProduct(productId) {
            if (confirm('–°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é —Ç–æ–≤–∞—Ä–∞?')) {
                showNotification('–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ø–∏–∏ —Ç–æ–≤–∞—Ä–∞ #' + productId, 'success');
                // AJAX –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            }
        }

        function viewProductAnalytics(productId) {
            showNotification('–û—Ç–∫—Ä—ã—Ç–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —Ç–æ–≤–∞—Ä–∞ #' + productId, 'info');
            // –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–æ–≤–∞—Ä–∞
        }

        function editStock(productId, currentStock) {
            const newStock = prompt('–ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:', currentStock);
            if (newStock !== null && !isNaN(newStock)) {
                showNotification(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–∞ #${productId}`, 'info');
                // AJAX –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤
            }
        }

        function openBulkImport() {
            showNotification('–û—Ç–∫—Ä—ã—Ç–∏–µ –º–∞—Å—Ç–µ—Ä–∞ –∏–º–ø–æ—Ä—Ç–∞ —Ç–æ–≤–∞—Ä–æ–≤', 'info');
        }

        function openInventoryCheck() {
            showNotification('–ó–∞–ø—É—Å–∫ —Ä–µ–≤–∏–∑–∏–∏ —Å–∫–ª–∞–¥–∞', 'info');
        }

        function exportProducts() {
            showNotification('–≠–∫—Å–ø–æ—Ä—Ç –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤', 'success');
        }

        // –¢–∞–±—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        function switchTab(tabName) {
            document.querySelectorAll('.tab-content').forEach(tab => tab.style.display = 'none');
            document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));

            document.getElementById('tab-' + tabName).style.display = 'block';
            document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏ SEO
        function generateSlugAndSEO(name) {
            if (!name) return;

            const slug = name.toLowerCase()
                .replace(/[^a-z–∞-—è0-9\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-');

            document.getElementById('productSlug').textContent = '/product/' + slug;

            // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ SEO
            if (!document.querySelector('[name="meta_title"]').value) {
                document.querySelector('[name="meta_title"]').value = name + ' - –∫—É–ø–∏—Ç—å –≤ –ê–∫–≤–∞–°–±–æ—Ä';
                updateSEOPreview();
            }
        }

        // –†–∞—Å—á–µ—Ç –º–∞—Ä–∂–∏
        function calculateMargin() {
            const price = parseFloat(document.querySelector('[name="price"]').value) || 0;
            const cost = parseFloat(document.querySelector('[name="cost_price"]').value) || 0;

            if (price > 0 && cost > 0) {
                const margin = ((price - cost) / price * 100).toFixed(1);
                document.getElementById('marginPercent').textContent = margin + '%';
                document.getElementById('marginPercent').style.color = margin > 30 ? 'var(--success-color)' : 
                                                                       margin > 15 ? 'var(--warning-color)' : 
                                                                       'var(--danger-color)';
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SEO –ø—Ä–µ–≤—å—é
        function updateSEOPreview() {
            const title = document.querySelector('[name="meta_title"]').value || '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ - –ê–∫–≤–∞–°–±–æ—Ä';
            const desc = document.querySelector('[name="meta_description"]').value || '–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞...';

            document.getElementById('seoPreviewTitle').textContent = title;
            document.getElementById('seoPreviewDesc').textContent = desc;

            document.getElementById('titleLength').textContent = title.length;
            document.getElementById('descLength').textContent = desc.length;
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SEO —Å—á–µ—Ç—á–∏–∫–æ–≤
        document.addEventListener('DOMContentLoaded', function() {
            const titleInput = document.querySelector('[name="meta_title"]');
            const descInput = document.querySelector('[name="meta_description"]');

            if (titleInput) titleInput.addEventListener('input', updateSEOPreview);
            if (descInput) descInput.addEventListener('input', updateSEOPreview);
        });

        function saveProductDraft() {
            showNotification('–¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ —á–µ—Ä–Ω–æ–≤–∏–∫', 'success');
        }

        // Drag & Drop –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.addEventListener('DOMContentLoaded', function() {
            setupDropzone('imageDropzone', function(files) {
                handleImageFiles(files);
            });
        });

        function handleImageFiles(files) {
            const preview = document.getElementById('imagePreview');

            for (let i = 0; i < Math.min(files.length, 10); i++) {
                const file = files[i];
                if (file.type.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imageDiv = document.createElement('div');
                        imageDiv.className = 'image-preview-item';
                        imageDiv.innerHTML = `
                            <img src="${e.target.result}" alt="Preview">
                            <button type="button" class="image-preview-remove" onclick="this.parentElement.remove()">
                                <i class="fas fa-times"></i>
                            </button>
                        `;
                        preview.appendChild(imageDiv);
                    };
                    reader.readAsDataURL(file);
                }
            }
        }
    </script>
    <?php
}

// === –†–ï–ù–î–ï–†–ò–ù–ì –ú–ï–ì–ê –°–õ–ê–ô–î–ï–†–ê ===
function renderSliderSectionMega($data) {
    $slides = $data['slides'] ?? getSliderSlides();
    $stats = $data['stats'] ?? [];
    ?>
    <!-- –ú–ï–ì–ê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–∞–π–¥–µ—Ä–∞ -->
    <div class='stats-grid' style='grid-template-columns: repeat(4, 1fr); margin-bottom: 32px;'>
        <div class='stat-card mega-card stat-primary'>
            <div class='stat-icon mega-icon'><i class='fas fa-images'></i></div>
            <div class='stat-value'><?= count($slides) ?></div>
            <div class='stat-label'>–í—Å–µ–≥–æ —Å–ª–∞–π–¥–æ–≤</div>
        </div>
        <div class='stat-card mega-card stat-success'>
            <div class='stat-icon mega-icon'><i class='fas fa-eye'></i></div>
            <div class='stat-value'><?= count(array_filter($slides, fn($s) => $s['is_active'])) ?></div>
            <div class='stat-label'>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–∞–π–¥–æ–≤</div>
        </div>
        <div class='stat-card mega-card stat-info'>
            <div class='stat-icon mega-icon'><i class='fas fa-mouse-pointer'></i></div>
            <div class='stat-value'>3.2%</div>
            <div class='stat-label'>CTR —Å–ª–∞–π–¥–µ—Ä–∞</div>
        </div>
        <div class='stat-card mega-card stat-warning'>
            <div class='stat-icon mega-icon'><i class='fas fa-chart-line'></i></div>
            <div class='stat-value'>+15%</div>
            <div class='stat-label'>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</div>
        </div>
    </div>

    <!-- –ú–ï–ì–ê –î–µ–π—Å—Ç–≤–∏—è -->
    <div class='d-flex justify-content-between align-items-center mb-4'>
        <button class='btn btn-mega btn-lg' onclick='openModal("addSlideMegaModal")'>
            <i class='fas fa-plus'></i>
            –î–æ–±–∞–≤–∏—Ç—å –ú–ï–ì–ê —Å–ª–∞–π–¥
        </button>
        <div class='d-flex gap-2'>
            <button class='btn btn-outline' onclick='previewSlider()'>
                <i class='fas fa-eye'></i>
                –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            </button>
            <button class='btn btn-success' onclick='optimizeSlider()'>
                <i class='fas fa-magic'></i>
                AI –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            </button>
        </div>
    </div>

    <!-- –ú–ï–ì–ê –°–ª–∞–π–¥—ã -->
    <div class='content-card mega-card'>
        <div class='content-card-header'>
            <h3 class='content-card-title'>
                <i class='fas fa-layer-group'></i>
                –ú–ï–ì–ê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–∞–π–¥–∞–º–∏
            </h3>
        </div>
        <div class='content-card-body'>
            <div id='slidesList' style='display: grid; gap: 20px;'>
                <?php foreach ($slides as $slide): ?>
                    <div class='slide-item' data-id='<?= $slide['id'] ?>' style='display: flex; gap: 20px; padding: 20px; background: var(--bg-secondary); border-radius: var(--border-radius-lg); border: 2px solid transparent; transition: var(--transition);'>
                        <div style='width: 200px; height: 120px; border-radius: var(--border-radius); overflow: hidden; background: var(--bg-tertiary); display: flex; align-items: center; justify-content: center;'>
                            <?php if ($slide['image']): ?>
                                <img src='<?= htmlspecialchars($slide['image']) ?>' alt='<?= htmlspecialchars($slide['title']) ?>' style='width: 100%; height: 100%; object-fit: cover;'>
                            <?php else: ?>
                                <div style='text-align: center; color: var(--text-muted);'>
                                    <i class='fas fa-image' style='font-size: 32px; margin-bottom: 8px;'></i>
                                    <div>–ë–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</div>
                                </div>
                            <?php endif; ?>
                        </div>

                        <div style='flex: 1;'>
                            <div style='display: flex; justify-content: between; align-items: start; margin-bottom: 12px;'>
                                <div>
                                    <h4 style='margin: 0 0 8px 0; font-size: 18px;'><?= htmlspecialchars($slide['title']) ?></h4>
                                    <p style='margin: 0 0 8px 0; color: var(--text-secondary);'><?= htmlspecialchars($slide['subtitle']) ?></p>
                                    <p style='margin: 0; font-size: 14px; color: var(--text-muted);'><?= htmlspecialchars($slide['description']) ?></p>
                                </div>
                                <div style='display: flex; gap: 8px; margin-left: 20px;'>
                                    <span class='status-badge <?= $slide['is_active'] ? 'status-active' : 'status-inactive' ?>'>
                                        <?= $slide['is_active'] ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–°–∫—Ä—ã—Ç' ?>
                                    </span>
                                    <span class='status-badge status-new'>
                                        –ü–æ—Ä—è–¥–æ–∫: <?= $slide['sort_order'] ?>
                                    </span>
                                </div>
                            </div>

                            <div style='display: flex; justify-content: between; align-items: center;'>
                                <div style='font-size: 12px; color: var(--text-muted);'>
                                    <i class='fas fa-link'></i> <?= htmlspecialchars($slide['link']) ?> |
                                    <i class='fas fa-clock'></i> <?= $slide['duration'] ?? 5000 ?>ms |
                                    <i class='fas fa-magic'></i> <?= htmlspecialchars($slide['animation'] ?? 'slideInLeft') ?>
                                </div>
                                <div style='display: flex; gap: 8px;'>
                                    <button class='btn btn-primary btn-sm' onclick='editSlide(<?= $slide['id'] ?>)'>
                                        <i class='fas fa-edit'></i>
                                    </button>
                                    <button class='btn btn-success btn-sm' onclick='duplicateSlide(<?= $slide['id'] ?>)'>
                                        <i class='fas fa-copy'></i>
                                    </button>
                                    <button class='btn btn-warning btn-sm' onclick='toggleSlideStatus(<?= $slide['id'] ?>, <?= $slide['is_active'] ? 'false' : 'true' ?>)'>
                                        <i class='fas fa-<?= $slide['is_active'] ? 'eye-slash' : 'eye' ?>'></i>
                                    </button>
                                    <button class='btn btn-danger btn-sm' onclick='deleteSlide(<?= $slide['id'] ?>)'>
                                        <i class='fas fa-trash'></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                <?php endforeach; ?>
            </div>
        </div>
    </div>

    <!-- –ú–ï–ì–ê –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–∞–π–¥–∞ -->
    <div class='modal' id='addSlideMegaModal'>
        <div class='modal-dialog modal-lg'>
            <form id='megaSlideForm'>
                <div class='modal-header'>
                    <h3 class='modal-title'>
                        <i class='fas fa-plus'></i>
                        –°–æ–∑–¥–∞—Ç—å –ú–ï–ì–ê —Å–ª–∞–π–¥
                    </h3>
                    <button type='button' class='modal-close' onclick='closeModal("addSlideMegaModal")'>&times;</button>
                </div>
                <div class='modal-body'>
                    <!-- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–∞–π–¥–∞ -->
                    <div style='margin-bottom: 24px; padding: 20px; background: linear-gradient(135deg, #667eea, #764ba2); border-radius: var(--border-radius-lg); color: white; min-height: 200px; position: relative; overflow: hidden;'>
                        <div style='position: absolute; inset: 0; background: rgba(0,0,0,0.3);' id='slideOverlay'></div>
                        <div style='position: relative; z-index: 2; height: 100%; display: flex; align-items: center;'>
                            <div id='slidePreview'>
                                <h2 id='previewTitle' style='font-size: 28px; margin-bottom: 8px;'>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞</h2>
                                <p id='previewSubtitle' style='font-size: 18px; margin-bottom: 12px; opacity: 0.9;'>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</p>
                                <p id='previewDescription' style='font-size: 14px; margin-bottom: 20px; opacity: 0.8;'>–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞</p>
                                <button class='btn btn-success' id='previewButton'>–ö–Ω–æ–ø–∫–∞</button>
                            </div>
                        </div>
                    </div>

                    <div class='form-row'>
                        <div class='form-group'>
                            <label class='form-label'>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞ *</label>
                            <input type='text' name='title' class='form-input' required onkeyup='updateSlidePreview()'>
                        </div>
                        <div class='form-group'>
                            <label class='form-label'>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</label>
                            <input type='text' name='subtitle' class='form-input' onkeyup='updateSlidePreview()'>
                        </div>
                    </div>

                    <div class='form-group'>
                        <label class='form-label'>–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea name='description' class='form-textarea' rows='2' onkeyup='updateSlidePreview()'></textarea>
                    </div>

                    <div class='form-row'>
                        <div class='form-group'>
                            <label class='form-label'>–°—Å—ã–ª–∫–∞</label>
                            <input type='text' name='link' class='form-input' placeholder='?page=catalog'>
                        </div>
                        <div class='form-group'>
                            <label class='form-label'>–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏</label>
                            <input type='text' name='button_text' class='form-input' value='–ü–æ–¥—Ä–æ–±–Ω–µ–µ' onkeyup='updateSlidePreview()'>
                        </div>
                    </div>

                    <div class='form-group'>
                        <label class='form-label'>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∞–π–¥–∞</label>
                        <div class='dropzone' id='slideImageDropzone'>
                            <div class='dropzone-icon'>
                                <i class='fas fa-image'></i>
                            </div>
                            <div class='dropzone-text'>
                                –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å–ª–∞–π–¥–∞
                            </div>
                            <div class='dropzone-hint'>
                                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 1920x600px
                            </div>
                        </div>
                        <input type='file' name='slide_image' accept='image/*' style='display: none;' id='slideImageInput'>
                    </div>

                    <div class='form-row'>
                        <div class='form-group'>
                            <label class='form-label'>–ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞</label>
                            <select name='text_position' class='form-select' onchange='updateSlidePreview()'>
                                <option value='left'>–°–ª–µ–≤–∞</option>
                                <option value='center'>–ü–æ —Ü–µ–Ω—Ç—Ä—É</option>
                                <option value='right'>–°–ø—Ä–∞–≤–∞</option>
                            </select>
                        </div>
                        <div class='form-group'>
                            <label class='form-label'>–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞</label>
                            <input type='color' name='text_color' class='form-input' value='#ffffff' onchange='updateSlidePreview()'>
                        </div>
                    </div>

                    <div class='form-row'>
                        <div class='form-group'>
                            <label class='form-label'>–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–∏—è</label>
                            <input type='range' name='overlay_opacity' class='form-input' min='0' max='1' step='0.1' value='0.3' onchange='updateSlidePreview()'>
                        </div>
                        <div class='form-group'>
                            <label class='form-label'>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º—Å)</label>
                            <input type='number' name='duration' class='form-input' min='1000' value='5000'>
                        </div>
                    </div>

                    <div class='form-row'>
                        <div class='form-group'>
                            <label class='form-label'>–ê–Ω–∏–º–∞—Ü–∏—è</label>
                            <select name='animation' class='form-select'>
                                <option value='slideInLeft'>–°–ª–∞–π–¥ —Å–ª–µ–≤–∞</option>
                                <option value='slideInRight'>–°–ª–∞–π–¥ —Å–ø—Ä–∞–≤–∞</option>
                                <option value='slideInUp'>–°–ª–∞–π–¥ —Å–Ω–∏–∑—É</option>
                                <option value='fadeIn'>–ü–æ—è–≤–ª–µ–Ω–∏–µ</option>
                                <option value='zoomIn'>–£–≤–µ–ª–∏—á–µ–Ω–∏–µ</option>
                            </select>
                        </div>
                        <div class='form-group'>
                            <label class='form-label'>–ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏</label>
                            <input type='number' name='sort_order' class='form-input' min='1' value='<?= count($slides) + 1 ?>'>
                        </div>
                    </div>

                    <div style='display: flex; gap: 20px; align-items: center;'>
                        <label style='display: flex; align-items: center; gap: 8px; cursor: pointer;'>
                            <input type='checkbox' name='is_active' checked>
                            <span>–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ª–∞–π–¥</span>
                        </label>
                    </div>
                </div>
                <div class='modal-footer'>
                    <button type='button' class='btn btn-outline' onclick='closeModal("addSlideMegaModal")'>–û—Ç–º–µ–Ω–∞</button>
                    <button type='button' class='btn btn-mega' onclick='saveMegaSlide()'>
                        <i class='fas fa-save'></i>
                        –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ª–∞–π–¥
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // –ú–ï–ì–ê —Ñ—É–Ω–∫—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞
        function updateSlidePreview() {
            const title = document.querySelector('[name="title"]').value || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞';
            const subtitle = document.querySelector('[name="subtitle"]').value || '–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫';
            const description = document.querySelector('[name="description"]').value || '–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞';
            const buttonText = document.querySelector('[name="button_text"]').value || '–ö–Ω–æ–ø–∫–∞';
            const textColor = document.querySelector('[name="text_color"]').value || '#ffffff';
            const textPosition = document.querySelector('[name="text_position"]').value || 'left';
            const overlayOpacity = document.querySelector('[name="overlay_opacity"]').value || 0.3;

            document.getElementById('previewTitle').textContent = title;
            document.getElementById('previewSubtitle').textContent = subtitle;
            document.getElementById('previewDescription').textContent = description;
            document.getElementById('previewButton').textContent = buttonText;

            const preview = document.getElementById('slidePreview');
            preview.style.color = textColor;
            preview.style.textAlign = textPosition;

            document.getElementById('slideOverlay').style.backgroundColor = `rgba(0,0,0,${overlayOpacity})`;
        }

        function previewSlider() {
            window.open('index.php', '_blank');
        }

        function optimizeSlider() {
            showNotification('–ó–∞–ø—É—Å–∫ AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–∞–π–¥–µ—Ä–∞', 'info');
        }

        function editSlide(slideId) {
            showNotification('–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞ #' + slideId, 'info');
        }

        function duplicateSlide(slideId) {
            showNotification('–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–∞–π–¥–∞ #' + slideId, 'success');
        }

        function toggleSlideStatus(slideId, status) {
            showNotification(`–°–ª–∞–π–¥ #${slideId} ${status === 'true' ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '—Å–∫—Ä—ã—Ç'}`, 'success');
        }

        function deleteSlide(slideId) {
            if (confirm('–£–¥–∞–ª–∏—Ç—å —Å–ª–∞–π–¥?')) {
                showNotification('–°–ª–∞–π–¥ —É–¥–∞–ª–µ–Ω', 'success');
            }
        }

        async function saveMegaSlide() {
            const formData = new FormData(document.getElementById('megaSlideForm'));

            const result = await makeAjaxRequest('save_slider', Object.fromEntries(formData));

            if (result.success) {
                showNotification('–°–ª–∞–π–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!', 'success');
                closeModal('addSlideMegaModal');
                setTimeout(() => location.reload(), 1000);
            } else {
                showNotification(result.message, 'error');
            }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è dropzone –¥–ª—è —Å–ª–∞–π–¥–∞
        document.addEventListener('DOMContentLoaded', function() {
            setupDropzone('slideImageDropzone', function(files) {
                if (files.length > 0) {
                    const file = files[0];
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const preview = document.getElementById('slidePreview').parentElement.parentElement;
                        preview.style.backgroundImage = `url(${e.target.result})`;
                        preview.style.backgroundSize = 'cover';
                        preview.style.backgroundPosition = 'center';
                    };
                    reader.readAsDataURL(file);
                }
            });
        });
    </script>
    <?php
}

?>
