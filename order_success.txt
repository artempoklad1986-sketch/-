<?php
// Отладка
error_reporting(E_ALL);
ini_set('display_errors', 1);

/**
 * Функция для надежного запуска сессии
 */
function initSession() {
    // Настройки сессии ПЕРЕД запуском
    if (session_status() === PHP_SESSION_NONE) {
        ini_set('session.cookie_lifetime', 86400); // 24 часа
        ini_set('session.gc_maxlifetime', 86400);
        ini_set('session.cookie_httponly', 1);
        ini_set('session.cookie_samesite', 'Lax');

        if (!session_start()) {
            error_log("ОШИБКА: Не удалось запустить сессию");
            return false;
        }
        error_log("Сессия запущена: " . session_id());
    } else {
        error_log("Сессия уже активна: " . session_id());
    }
    return true;
}

/**
 * Загрузка данных из JSON файла
 */
function loadJsonData($filename) {
    $filepath = __DIR__ . '/data/' . $filename;
    if (!file_exists($filepath)) {
        error_log("JSON файл не найден: $filepath");
        return [];
    }
    $content = file_get_contents($filepath);
    $data = json_decode($content, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        error_log("Ошибка парсинга JSON в $filename: " . json_last_error_msg());
        return [];
    }
    return $data ?: [];
}

/**
 * Сохранение данных в JSON файл
 */
function saveJsonData($filename, $data) {
    $filepath = __DIR__ . '/data/' . $filename;
    $dir = dirname($filepath);
    if (!is_dir($dir)) {
        if (!mkdir($dir, 0755, true)) {
            error_log("Не удалось создать директорию: $dir");
            return false;
        }
    }
    $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE);
    if ($json === false) {
        error_log("Ошибка кодирования JSON для $filename: " . json_last_error_msg());
        return false;
    }
    $result = file_put_contents($filepath, $json);
    if ($result === false) {
        error_log("Не удалось записать файл: $filepath");
        return false;
    }
    return $result;
}

/**
 * Получение товаров с фильтрацией
 */
function getProducts($filters = []) {
    $products = loadJsonData('products.json');

    if (!empty($filters['category_id'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['category_id']) && $product['category_id'] == $filters['category_id'];
        });
    }

    if (!empty($filters['search'])) {
        $search = mb_strtolower($filters['search']);
        $products = array_filter($products, function($product) use ($search) {
            $name = mb_strtolower($product['name'] ?? '');
            $latin = mb_strtolower($product['latin_name'] ?? '');
            $desc = mb_strtolower($product['description'] ?? '');
            return mb_strpos($name, $search) !== false ||
                   mb_strpos($latin, $search) !== false ||
                   mb_strpos($desc, $search) !== false;
        });
    }

    if (!empty($filters['price_min'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['price']) && $product['price'] >= $filters['price_min'];
        });
    }

    if (!empty($filters['price_max'])) {
        $products = array_filter($products, function($product) use ($filters) {
            return isset($product['price']) && $product['price'] <= $filters['price_max'];
        });
    }

    // Фильтр по статусу (активные товары)
    $products = array_filter($products, function($product) {
        return !isset($product['status']) || $product['status'] == 1;
    });

    return array_values($products);
}

/**
 * Получение всех товаров без фильтров (для админки)
 */
function getAllProducts() {
    return loadJsonData('products.json');
}

/**
 * Получение товара по ID
 */
function getProductById($id) {
    if (!is_numeric($id) || $id <= 0) {
        return null;
    }
    $products = loadJsonData('products.json');
    foreach ($products as $product) {
        if (isset($product['id']) && $product['id'] == $id) {
            return $product;
        }
    }
    return null;
}

/**
 * Добавление товара
 */
function addProduct($productData) {
    $products = loadJsonData('products.json');
    $productData['id'] = generateId($products);
    $productData['created_at'] = date('Y-m-d H:i:s');
    $products[] = $productData;
    return saveJsonData('products.json', $products);
}

/**
 * Обновление товара
 */
function updateProduct($id, $productData) {
    $products = loadJsonData('products.json');
    foreach ($products as &$product) {
        if ($product['id'] == $id) {
            $productData['id'] = $id;
            $productData['updated_at'] = date('Y-m-d H:i:s');
            $product = array_merge($product, $productData);
            return saveJsonData('products.json', $products);
        }
    }
    return false;
}

/**
 * Удаление товара
 */
function deleteProduct($id) {
    $products = loadJsonData('products.json');
    $products = array_filter($products, function($product) use ($id) {
        return $product['id'] != $id;
    });
    return saveJsonData('products.json', array_values($products));
}

/**
 * Получение категорий
 */
function getCategories() {
    return loadJsonData('categories.json');
}

/**
 * Получение категорий с подсчетом товаров
 */
function getCategoriesWithCount() {
    $categories = loadJsonData('categories.json');
    $products = getProducts();

    foreach ($categories as &$category) {
        $count = 0;
        foreach ($products as $product) {
            if (isset($product['category_id']) && $product['category_id'] == $category['id']) {
                $count++;
            }
        }
        $category['products_count'] = $count;
    }

    return $categories;
}

/**
 * Получение категории по ID
 */
function getCategoryById($id) {
    if (!is_numeric($id) || $id <= 0) {
        return null;
    }
    $categories = loadJsonData('categories.json');
    foreach ($categories as $category) {
        if (isset($category['id']) && $category['id'] == $id) {
            return $category;
        }
    }
    return null;
}

/**
 * Добавление категории
 */
function addCategory($categoryData) {
    $categories = loadJsonData('categories.json');
    $categoryData['id'] = generateId($categories);
    $categoryData['created_at'] = date('Y-m-d H:i:s');
    $categories[] = $categoryData;
    return saveJsonData('categories.json', $categories);
}

/**
 * Обновление категории
 */
function updateCategory($id, $categoryData) {
    $categories = loadJsonData('categories.json');
    foreach ($categories as &$category) {
        if ($category['id'] == $id) {
            $categoryData['id'] = $id;
            $categoryData['updated_at'] = date('Y-m-d H:i:s');
            $category = array_merge($category, $categoryData);
            return saveJsonData('categories.json', $categories);
        }
    }
    return false;
}

/**
 * Удаление категории
 */
function deleteCategory($id) {
    $categories = loadJsonData('categories.json');
    $categories = array_filter($categories, function($category) use ($id) {
        return $category['id'] != $id;
    });
    return saveJsonData('categories.json', array_values($categories));
}

/**
 * Генерация уникального ID
 */
function generateId($data) {
    if (empty($data)) return 1;
    $maxId = 0;
    foreach ($data as $item) {
        if (isset($item['id']) && is_numeric($item['id']) && $item['id'] > $maxId) {
            $maxId = (int)$item['id'];
        }
    }
    return $maxId + 1;
}

/**
 * Создание slug из названия
 */
function createSlug($text) {
    $text = mb_strtolower(trim($text));
    $text = preg_replace('/[^a-z0-9а-я\s-]/u', '', $text);
    $text = preg_replace('/\s+/', '-', $text);
    $text = trim($text, '-');
    return $text;
}

/**
 * Форматирование цены
 */
function formatPrice($price) {
    if (!is_numeric($price)) return '0 ₽';
    return number_format((float)$price, 0, ',', ' ') . ' ₽';
}

/**
 * Получение настроек сайта
 */
function getSettings() {
    return loadJsonData('settings.json');
}

/**
 * Получение корзины из сессии
 */
function getCart() {
    // Если сессия не активна, запускаем её
    if (session_status() === PHP_SESSION_NONE) {
        initSession();
    }

    $cart = $_SESSION['cart'] ?? [];
    error_log("getCart: Текущая корзина - " . print_r($cart, true));
    return $cart;
}

/**
 * Добавление товара в корзину - УПРОЩЕННАЯ ВЕРСИЯ
 */
function addToCart($productId, $quantity = 1) {
    // Проверяем сессию
    if (session_status() === PHP_SESSION_NONE) {
        if (!initSession()) {
            error_log("addToCart: Не удалось инициализировать сессию");
            return false;
        }
    }

    error_log("addToCart: Статус сессии - " . session_status());
    error_log("addToCart: ID сессии - " . session_id());

    // Валидация
    if (!is_numeric($productId) || !is_numeric($quantity) || $productId <= 0 || $quantity <= 0) {
        error_log("addToCart: Некорректные параметры - productId: $productId, quantity: $quantity");
        return false;
    }

    $productId = (int)$productId;
    $quantity = (int)$quantity;

    // Проверяем существование товара
    $product = getProductById($productId);
    if (!$product) {
        error_log("addToCart: Товар с ID $productId не найден");
        return false;
    }

    // Инициализируем корзину если её нет
    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
        error_log("addToCart: Инициализирована новая корзина");
    }

    error_log("addToCart: Корзина ДО добавления - " . print_r($_SESSION['cart'], true));

    // Добавляем товар
    if (isset($_SESSION['cart'][$productId])) {
        $_SESSION['cart'][$productId] += $quantity;
        error_log("addToCart: Увеличено количество товара $productId до " . $_SESSION['cart'][$productId]);
    } else {
        $_SESSION['cart'][$productId] = $quantity;
        error_log("addToCart: Добавлен новый товар $productId в количестве $quantity");
    }

    error_log("addToCart: Корзина ПОСЛЕ добавления - " . print_r($_SESSION['cart'], true));
    error_log("addToCart: УСПЕШНО ЗАВЕРШЕНО");

    return true;
}

/**
 * Обновление количества товара в корзине
 */
function updateCartItem($productId, $quantity) {
    if (session_status() === PHP_SESSION_NONE) {
        initSession();
    }

    if (!is_numeric($productId) || !is_numeric($quantity) || $productId <= 0) {
        return false;
    }

    $productId = (int)$productId;
    $quantity = (int)$quantity;

    if (!isset($_SESSION['cart'])) {
        $_SESSION['cart'] = [];
    }

    if ($quantity > 0) {
        $_SESSION['cart'][$productId] = $quantity;
    } else {
        unset($_SESSION['cart'][$productId]);
    }

    return true;
}

/**
 * Удаление товара из корзины
 */
function removeFromCart($productId) {
    if (session_status() === PHP_SESSION_NONE) {
        initSession();
    }

    if (!is_numeric($productId) || $productId <= 0) {
        return false;
    }

    $productId = (int)$productId;

    if (isset($_SESSION['cart'][$productId])) {
        unset($_SESSION['cart'][$productId]);
        return true;
    }

    return false;
}

/**
 * Получение товаров корзины с деталями
 */
function getCartItems() {
    $cart = getCart();
    $items = [];
    $total = 0;

    foreach ($cart as $productId => $quantity) {
        $product = getProductById($productId);
        if ($product && is_numeric($quantity) && $quantity > 0) {
            $item = $product;
            $item['quantity'] = (int)$quantity;
            $item['subtotal'] = (float)$product['price'] * (int)$quantity;
            $total += $item['subtotal'];
            $items[] = $item;
        }
    }

    return [
        'items' => $items, 
        'total' => $total,
        'count' => count($items)
    ];
}

/**
 * Очистка корзины
 */
function clearCart() {
    if (session_status() === PHP_SESSION_NONE) {
        initSession();
    }
    $_SESSION['cart'] = [];
    return true;
}

/**
 * Получение количества товаров в корзине
 */
function getCartCount() {
    $cart = getCart();
    $count = array_sum($cart);
    error_log("getCartCount: Всего товаров в корзине - $count");
    return $count;
}

/**
 * Сохранение заказа
 */
function saveOrder($orderData) {
    $orders = loadJsonData('orders.json');

    $order = [
        'id' => generateId($orders),
        'date' => date('Y-m-d H:i:s'),
        'status' => 'new',
        'customer' => $orderData['customer'] ?? [],
        'items' => $orderData['items'] ?? [],
        'total' => $orderData['total'] ?? 0
    ];

    $orders[] = $order;
    if (saveJsonData('orders.json', $orders)) {
        return $order['id'];
    }
    return false;
}

/**
 * Получение заказов
 */
function getOrders() {
    return loadJsonData('orders.json');
}

/**
 * Обновление статуса заказа
 */
function updateOrderStatus($id, $status) {
    $orders = loadJsonData('orders.json');
    foreach ($orders as &$order) {
        if ($order['id'] == $id) {
            $order['status'] = $status;
            $order['updated_at'] = date('Y-m-d H:i:s');
            return saveJsonData('orders.json', $orders);
        }
    }
    return false;
}

/**
 * Получение популярных товаров
 */
function getFeaturedProducts($limit = 8) {
    $products = getProducts();
    if (empty($products)) {
        return [];
    }
    shuffle($products);
    return array_slice($products, 0, $limit);
}

/**
 * Получение статистики для дашборда
 */
function getDashboardStats() {
    $products = getAllProducts();
    $orders = getOrders();
    $categories = getCategories();

    $activeProducts = array_filter($products, function($p) {
        return !isset($p['status']) || $p['status'] == 1;
    });

    $today = date('Y-m-d');
    $todayOrders = array_filter($orders, function($o) use ($today) {
        return isset($o['date']) && date('Y-m-d', strtotime($o['date'])) === $today;
    });

    $thisMonth = date('Y-m');
    $thisMonthOrders = array_filter($orders, function($o) use ($thisMonth) {
        return isset($o['date']) && date('Y-m', strtotime($o['date'])) === $thisMonth;
    });

    $totalRevenue = 0;
    $monthRevenue = 0;

    foreach ($orders as $order) {
        if (isset($order['total']) && is_numeric($order['total'])) {
            $totalRevenue += (float)$order['total'];
        }
    }

    foreach ($thisMonthOrders as $order) {
        if (isset($order['total']) && is_numeric($order['total'])) {
            $monthRevenue += (float)$order['total'];
        }
    }

    return [
        'total_products' => count($activeProducts),
        'total_categories' => count($categories),
        'total_orders' => count($orders),
        'today_orders' => count($todayOrders),
        'month_orders' => count($thisMonthOrders),
        'total_revenue' => $totalRevenue,
        'month_revenue' => $monthRevenue
    ];
}
?>
