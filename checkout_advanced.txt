<?php
/**
 * АкваСбор CMS 2.0 MEGA - Конструктор модулей
 * Автоматическое создание модулей без программирования
 */

session_start();

// Проверка доступа (только для админов)
if (!isset($_SESSION['admin_logged']) || $_SESSION['admin_role'] !== 'super_admin') {
    // Временно отключаем проверку для демонстрации
    // die('Доступ запрещен! Только для супер-администраторов.');
}

$success = [];
$errors = [];

// Обработка создания модуля
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['create_module'])) {
    $moduleData = [
        'name' => trim($_POST['module_name']),
        'table_name' => trim($_POST['table_name']),
        'description' => trim($_POST['description']),
        'icon' => trim($_POST['icon']),
        'fields' => $_POST['fields'] ?? [],
        'features' => $_POST['features'] ?? [],
        'permissions' => $_POST['permissions'] ?? []
    ];

    if (createModule($moduleData)) {
        $success[] = "Модуль '{$moduleData['name']}' успешно создан!";
    } else {
        $errors[] = "Ошибка создания модуля!";
    }
}

// Функция создания модуля
function createModule($data) {
    try {
        $moduleName = $data['name'];
        $tableName = $data['table_name'];
        $className = ucfirst(camelCase($tableName));

        // 1. Создаем SQL для таблицы
        createModuleSQL($data);

        // 2. Создаем модель
        createModuleModel($data);

        // 3. Создаем админ-контроллер
        createAdminController($data);

        // 4. Создаем фронтенд-контроллер
        createFrontendController($data);

        // 5. Создаем админ-шаблоны
        createAdminTemplates($data);

        // 6. Создаем фронтенд-шаблоны
        createFrontendTemplates($data);

        // 7. Регистрируем модуль в системе
        registerModule($data);

        return true;
    } catch (Exception $e) {
        error_log("Ошибка создания модуля: " . $e->getMessage());
        return false;
    }
}

// Создание SQL структуры
function createModuleSQL($data) {
    $tableName = $data['table_name'];
    $fields = $data['fields'];

    $sql = "-- Автосгенерированная таблица для модуля {$data['name']}\n";
    $sql .= "DROP TABLE IF EXISTS `{$tableName}`;\n";
    $sql .= "CREATE TABLE `{$tableName}` (\n";
    $sql .= "  `id` int(11) NOT NULL AUTO_INCREMENT,\n";

    foreach ($fields as $field) {
        $fieldSQL = generateFieldSQL($field);
        if ($fieldSQL) {
            $sql .= "  {$fieldSQL},\n";
        }
    }

    // Базовые поля
    $sql .= "  `status` tinyint(1) DEFAULT 1,\n";
    $sql .= "  `created_at` timestamp DEFAULT CURRENT_TIMESTAMP,\n";
    $sql .= "  `updated_at` timestamp DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n";
    $sql .= "  PRIMARY KEY (`id`),\n";
    $sql .= "  KEY `status` (`status`)\n";
    $sql .= ") ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;\n\n";

    // Сохраняем SQL файл
    file_put_contents("modules/{$tableName}/{$tableName}.sql", $sql);
}

// Генерация SQL для поля
function generateFieldSQL($field) {
    $name = $field['name'];
    $type = $field['type'];
    $required = isset($field['required']) ? 'NOT NULL' : 'DEFAULT NULL';
    $length = $field['length'] ?? '';

    switch ($type) {
        case 'string':
            $length = $length ?: '255';
            return "`{$name}` varchar({$length}) COLLATE utf8mb4_unicode_ci {$required}";

        case 'text':
            return "`{$name}` text COLLATE utf8mb4_unicode_ci {$required}";

        case 'longtext':
            return "`{$name}` longtext COLLATE utf8mb4_unicode_ci {$required}";

        case 'integer':
            $length = $length ?: '11';
            return "`{$name}` int({$length}) {$required}";

        case 'decimal':
            $length = $length ?: '10,2';
            return "`{$name}` decimal({$length}) {$required}";

        case 'boolean':
            return "`{$name}` tinyint(1) DEFAULT 0";

        case 'date':
            return "`{$name}` date {$required}";

        case 'datetime':
            return "`{$name}` timestamp {$required}";

        case 'json':
            return "`{$name}` json {$required}";

        case 'email':
            return "`{$name}` varchar(255) COLLATE utf8mb4_unicode_ci {$required}";

        case 'url':
            return "`{$name}` varchar(500) COLLATE utf8mb4_unicode_ci {$required}";

        case 'image':
            return "`{$name}` varchar(255) COLLATE utf8mb4_unicode_ci {$required}";

        default:
            return "`{$name}` varchar(255) COLLATE utf8mb4_unicode_ci {$required}";
    }
}

// Создание модели
function createModuleModel($data) {
    $tableName = $data['table_name'];
    $className = ucfirst(camelCase($tableName));

    $model = "<?php
/**
 * Модель {$className} - автосгенерирована конструктором модулей
 * {$data['description']}
 */

class {$className}Model {
    private \$db;
    private \$table = '{$tableName}';

    public function __construct(\$database = null) {
        \$this->db = \$database ?: \$this->getDatabase();
    }

    private function getDatabase() {
        \$config = include('config/database.php');
        \$dsn = \"mysql:host={\$config['connections']['mysql']['host']};dbname={\$config['connections']['mysql']['database']};charset=utf8mb4\";
        return new PDO(\$dsn, \$config['connections']['mysql']['username'], \$config['connections']['mysql']['password'], \$config['connections']['mysql']['options']);
    }

    // Получить все записи
    public function getAll(\$filters = [], \$limit = 20, \$offset = 0) {
        \$sql = \"SELECT * FROM {\$this->table} WHERE status = 1\";
        \$params = [];

        // Применяем фильтры
        foreach (\$filters as \$key => \$value) {
            if (!empty(\$value)) {
                \$sql .= \" AND {\$key} LIKE ?\";
                \$params[] = '%' . \$value . '%';
            }
        }

        \$sql .= \" ORDER BY id DESC LIMIT ? OFFSET ?\";
        \$params[] = \$limit;
        \$params[] = \$offset;

        \$stmt = \$this->db->prepare(\$sql);
        \$stmt->execute(\$params);
        return \$stmt->fetchAll(PDO::FETCH_ASSOC);
    }

    // Получить запись по ID
    public function getById(\$id) {
        \$stmt = \$this->db->prepare(\"SELECT * FROM {\$this->table} WHERE id = ?\");
        \$stmt->execute([\$id]);
        return \$stmt->fetch(PDO::FETCH_ASSOC);
    }

    // Создать запись
    public function create(\$data) {
        \$fields = array_keys(\$data);
        \$placeholders = array_fill(0, count(\$fields), '?');

        \$sql = \"INSERT INTO {\$this->table} (\" . implode(', ', \$fields) . \") VALUES (\" . implode(', ', \$placeholders) . \")\";
        \$stmt = \$this->db->prepare(\$sql);

        if (\$stmt->execute(array_values(\$data))) {
            return \$this->db->lastInsertId();
        }
        return false;
    }

    // Обновить запись
    public function update(\$id, \$data) {
        \$fields = array_keys(\$data);
        \$set = array_map(function(\$field) { return \"{\$field} = ?\"; }, \$fields);

        \$sql = \"UPDATE {\$this->table} SET \" . implode(', ', \$set) . \" WHERE id = ?\";
        \$values = array_values(\$data);
        \$values[] = \$id;

        \$stmt = \$this->db->prepare(\$sql);
        return \$stmt->execute(\$values);
    }

    // Удалить запись (мягкое удаление)
    public function delete(\$id) {
        \$stmt = \$this->db->prepare(\"UPDATE {\$this->table} SET status = 0 WHERE id = ?\");
        return \$stmt->execute([\$id]);
    }

    // Жесткое удаление
    public function hardDelete(\$id) {
        \$stmt = \$this->db->prepare(\"DELETE FROM {\$this->table} WHERE id = ?\");
        return \$stmt->execute([\$id]);
    }

    // Подсчет записей
    public function count(\$filters = []) {
        \$sql = \"SELECT COUNT(*) FROM {\$this->table} WHERE status = 1\";
        \$params = [];

        foreach (\$filters as \$key => \$value) {
            if (!empty(\$value)) {
                \$sql .= \" AND {\$key} LIKE ?\";
                \$params[] = '%' . \$value . '%';
            }
        }

        \$stmt = \$this->db->prepare(\$sql);
        \$stmt->execute(\$params);
        return \$stmt->fetchColumn();
    }

    // Поиск
    public function search(\$query, \$limit = 10) {
        \$sql = \"SELECT * FROM {\$this->table} WHERE status = 1 AND (\";
        \$searchFields = " . json_encode(getSearchableFields($data['fields'])) . ";
        \$conditions = [];
        \$params = [];

        foreach (\$searchFields as \$field) {
            \$conditions[] = \"{\$field} LIKE ?\";
            \$params[] = '%' . \$query . '%';
        }

        \$sql .= implode(' OR ', \$conditions) . \") ORDER BY id DESC LIMIT ?\";
        \$params[] = \$limit;

        \$stmt = \$this->db->prepare(\$sql);
        \$stmt->execute(\$params);
        return \$stmt->fetchAll(PDO::FETCH_ASSOC);
    }
}
?>";

    // Создаем папку модуля
    $moduleDir = "modules/{$tableName}";
    if (!is_dir($moduleDir)) {
        mkdir($moduleDir, 0755, true);
    }

    file_put_contents("{$moduleDir}/{$className}Model.php", $model);
}

// Создание админ-контроллера
function createAdminController($data) {
    $tableName = $data['table_name'];
    $className = ucfirst(camelCase($tableName));
    $moduleName = $data['name'];

    $controller = "<?php
/**
 * Админ-контроллер {$className} - автосгенерирован
 */

require_once 'modules/{$tableName}/{$className}Model.php';

class Admin{$className}Controller {
    private \$model;

    public function __construct() {
        \$this->model = new {$className}Model();
    }

    // Главная страница модуля
    public function index() {
        \$page = \$_GET['page'] ?? 1;
        \$limit = 25;
        \$offset = (\$page - 1) * \$limit;

        \$filters = [" . generateFilterCode($data['fields']) . "];

        \$items = \$this->model->getAll(\$filters, \$limit, \$offset);
        \$total = \$this->model->count(\$filters);
        \$pages = ceil(\$total / \$limit);

        include 'modules/{$tableName}/admin/index.php';
    }

    // Форма создания
    public function create() {
        if (\$_SERVER['REQUEST_METHOD'] === 'POST') {
            \$data = \$this->validateData(\$_POST);
            if (\$data && \$this->model->create(\$data)) {
                header('Location: ?module={$tableName}&success=created');
                exit;
            } else {
                \$error = 'Ошибка создания записи';
            }
        }

        include 'modules/{$tableName}/admin/create.php';
    }

    // Форма редактирования
    public function edit() {
        \$id = \$_GET['id'] ?? 0;
        \$item = \$this->model->getById(\$id);

        if (!\$item) {
            header('Location: ?module={$tableName}&error=not_found');
            exit;
        }

        if (\$_SERVER['REQUEST_METHOD'] === 'POST') {
            \$data = \$this->validateData(\$_POST);
            if (\$data && \$this->model->update(\$id, \$data)) {
                header('Location: ?module={$tableName}&success=updated');
                exit;
            } else {
                \$error = 'Ошибка обновления записи';
            }
        }

        include 'modules/{$tableName}/admin/edit.php';
    }

    // Удаление
    public function delete() {
        \$id = \$_GET['id'] ?? 0;

        if (\$this->model->delete(\$id)) {
            header('Location: ?module={$tableName}&success=deleted');
        } else {
            header('Location: ?module={$tableName}&error=delete_failed');
        }
        exit;
    }

    // Просмотр
    public function view() {
        \$id = \$_GET['id'] ?? 0;
        \$item = \$this->model->getById(\$id);

        if (!\$item) {
            header('Location: ?module={$tableName}&error=not_found');
            exit;
        }

        include 'modules/{$tableName}/admin/view.php';
    }

    // Валидация данных
    private function validateData(\$post) {
        \$data = [];

        " . generateValidationCode($data['fields']) . "

        return \$data;
    }

    // Обработка загрузки файлов
    private function handleFileUpload(\$file, \$uploadDir = 'uploads/{$tableName}/') {
        if (!\$file || \$file['error'] !== UPLOAD_ERR_OK) {
            return null;
        }

        if (!is_dir(\$uploadDir)) {
            mkdir(\$uploadDir, 0755, true);
        }

        \$extension = pathinfo(\$file['name'], PATHINFO_EXTENSION);
        \$filename = uniqid() . '.' . \$extension;
        \$filepath = \$uploadDir . \$filename;

        if (move_uploaded_file(\$file['tmp_name'], \$filepath)) {
            return \$filepath;
        }

        return null;
    }
}
?>";

    file_put_contents("modules/{$tableName}/Admin{$className}Controller.php", $controller);
}

// Создание фронтенд-контроллера
function createFrontendController($data) {
    $tableName = $data['table_name'];
    $className = ucfirst(camelCase($tableName));

    $controller = "<?php
/**
 * Фронтенд-контроллер {$className} - автосгенерирован
 */

require_once 'modules/{$tableName}/{$className}Model.php';

class {$className}Controller {
    private \$model;

    public function __construct() {
        \$this->model = new {$className}Model();
    }

    // Список записей
    public function index() {
        \$page = \$_GET['page'] ?? 1;
        \$limit = 12;
        \$offset = (\$page - 1) * \$limit;

        \$items = \$this->model->getAll([], \$limit, \$offset);
        \$total = \$this->model->count();
        \$pages = ceil(\$total / \$limit);

        include 'modules/{$tableName}/frontend/index.php';
    }

    // Детальная страница
    public function view() {
        \$id = \$_GET['id'] ?? 0;
        \$item = \$this->model->getById(\$id);

        if (!\$item) {
            http_response_code(404);
            include 'error.php';
            exit;
        }

        include 'modules/{$tableName}/frontend/view.php';
    }

    // Поиск
    public function search() {
        \$query = \$_GET['q'] ?? '';
        \$results = [];

        if (\$query) {
            \$results = \$this->model->search(\$query);
        }

        include 'modules/{$tableName}/frontend/search.php';
    }
}
?>";

    file_put_contents("modules/{$tableName}/{$className}Controller.php", $controller);
}

// Создание админ-шаблонов
function createAdminTemplates($data) {
    $tableName = $data['table_name'];
    $moduleName = $data['name'];
    $fields = $data['fields'];

    // Создаем папку для шаблонов
    $templateDir = "modules/{$tableName}/admin";
    if (!is_dir($templateDir)) {
        mkdir($templateDir, 0755, true);
    }

    // Главная страница админки
    $indexTemplate = generateAdminIndexTemplate($data);
    file_put_contents("{$templateDir}/index.php", $indexTemplate);

    // Форма создания
    $createTemplate = generateAdminFormTemplate($data, 'create');
    file_put_contents("{$templateDir}/create.php", $createTemplate);

    // Форма редактирования
    $editTemplate = generateAdminFormTemplate($data, 'edit');
    file_put_contents("{$templateDir}/edit.php", $editTemplate);

    // Страница просмотра
    $viewTemplate = generateAdminViewTemplate($data);
    file_put_contents("{$templateDir}/view.php", $viewTemplate);
}

// Создание фронтенд-шаблонов
function createFrontendTemplates($data) {
    $tableName = $data['table_name'];

    // Создаем папку для шаблонов
    $templateDir = "modules/{$tableName}/frontend";
    if (!is_dir($templateDir)) {
        mkdir($templateDir, 0755, true);
    }

    // Список для фронтенда
    $indexTemplate = generateFrontendIndexTemplate($data);
    file_put_contents("{$templateDir}/index.php", $indexTemplate);

    // Детальная страница
    $viewTemplate = generateFrontendViewTemplate($data);
    file_put_contents("{$templateDir}/view.php", $viewTemplate);

    // Страница поиска
    $searchTemplate = generateFrontendSearchTemplate($data);
    file_put_contents("{$templateDir}/search.php", $searchTemplate);
}

// Регистрация модуля в системе
function registerModule($data) {
    $modules = [];
    $configFile = 'config/modules.json';

    if (file_exists($configFile)) {
        $modules = json_decode(file_get_contents($configFile), true) ?: [];
    }

    $modules[$data['table_name']] = [
        'name' => $data['name'],
        'table' => $data['table_name'],
        'description' => $data['description'],
        'icon' => $data['icon'],
        'features' => $data['features'],
        'permissions' => $data['permissions'],
        'created_at' => date('Y-m-d H:i:s'),
        'version' => '1.0.0',
        'status' => 'active'
    ];

    file_put_contents($configFile, json_encode($modules, JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE));

    // Добавляем в меню админки
    updateAdminMenu($data);
}

// Вспомогательные функции
function camelCase($string) {
    return str_replace('_', '', ucwords($string, '_'));
}

function getSearchableFields($fields) {
    $searchable = [];
    foreach ($fields as $field) {
        if (in_array($field['type'], ['string', 'text', 'longtext'])) {
            $searchable[] = $field['name'];
        }
    }
    return $searchable;
}

function generateFilterCode($fields) {
    $code = "";
    foreach ($fields as $field) {
        if (in_array($field['type'], ['string', 'text'])) {
            $code .= "\n            '{$field['name']}' => \$_GET['{$field['name']}'] ?? '',";
        }
    }
    return $code;
}

function generateValidationCode($fields) {
    $code = "";
    foreach ($fields as $field) {
        $name = $field['name'];
        $required = isset($field['required']) ? 'true' : 'false';

        $code .= "\n        // {$field['label']}\n";
        $code .= "        if ({$required} && empty(\$post['{$name}'])) {\n";
        $code .= "            return false; // {$field['label']} обязательно\n";
        $code .= "        }\n";
        $code .= "        \$data['{$name}'] = \$post['{$name}'] ?? null;\n";
    }
    return $code;
}

// Генерация шаблонов (упрощенные версии)
function generateAdminIndexTemplate($data) {
    $moduleName = $data['name'];
    $tableName = $data['table_name'];

    return "<?php
// Админ-шаблон списка {$moduleName}
?>
<!DOCTYPE html>
<html>
<head>
    <title>{$moduleName} - Админ-панель</title>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css' rel='stylesheet'>
</head>
<body>
    <div class='container-fluid mt-4'>
        <div class='d-flex justify-content-between align-items-center mb-4'>
            <h1>{$moduleName}</h1>
            <a href='?module={$tableName}&action=create' class='btn btn-success'>Добавить</a>
        </div>

        <div class='table-responsive'>
            <table class='table table-striped'>
                <thead>
                    <tr>
                        <th>ID</th>
                        " . generateTableHeaders($data['fields']) . "
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach (\$items as \$item): ?>
                    <tr>
                        <td><?= \$item['id'] ?></td>
                        " . generateTableCells($data['fields']) . "
                        <td>
                            <a href='?module={$tableName}&action=view&id=<?= \$item['id'] ?>' class='btn btn-sm btn-info'>Просмотр</a>
                            <a href='?module={$tableName}&action=edit&id=<?= \$item['id'] ?>' class='btn btn-sm btn-warning'>Редактировать</a>
                            <a href='?module={$tableName}&action=delete&id=<?= \$item['id'] ?>' class='btn btn-sm btn-danger' onclick='return confirm(\"Удалить запись?\")'>Удалить</a>
                        </td>
                    </tr>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    </div>
</body>
</html>";
}

function generateAdminFormTemplate($data, $action) {
    $moduleName = $data['name'];
    $tableName = $data['table_name'];
    $title = $action === 'create' ? 'Создать' : 'Редактировать';

    return "<?php
// Админ-форма {$title} {$moduleName}
?>
<!DOCTYPE html>
<html>
<head>
    <title>{$title} {$moduleName}</title>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css' rel='stylesheet'>
</head>
<body>
    <div class='container mt-4'>
        <h1>{$title} {$moduleName}</h1>

        <form method='post' enctype='multipart/form-data'>
            " . generateFormFields($data['fields'], $action) . "

            <div class='mb-3'>
                <button type='submit' class='btn btn-success'>Сохранить</button>
                <a href='?module={$tableName}' class='btn btn-secondary'>Отмена</a>
            </div>
        </form>
    </div>
</body>
</html>";
}

function generateTableHeaders($fields) {
    $headers = "";
    foreach ($fields as $field) {
        $headers .= "<th>{$field['label']}</th>\n                        ";
    }
    return $headers;
}

function generateTableCells($fields) {
    $cells = "";
    foreach ($fields as $field) {
        $name = $field['name'];
        if ($field['type'] === 'image') {
            $cells .= "<td><?= \$item['{$name}'] ? '<img src=\"' . \$item['{$name}'] . '\" width=\"50\" height=\"50\">' : 'Нет фото' ?></td>\n                        ";
        } elseif ($field['type'] === 'boolean') {
            $cells .= "<td><?= \$item['{$name}'] ? 'Да' : 'Нет' ?></td>\n                        ";
        } else {
            $cells .= "<td><?= htmlspecialchars(\$item['{$name}'] ?? '') ?></td>\n                        ";
        }
    }
    return $cells;
}

function generateFormFields($fields, $action) {
    $html = "";
    foreach ($fields as $field) {
        $name = $field['name'];
        $label = $field['label'];
        $type = $field['type'];
        $required = isset($field['required']) ? 'required' : '';
        $value = $action === 'edit' ? "<?= htmlspecialchars(\$item['{$name}'] ?? '') ?>" : '';

        $html .= "<div class='mb-3'>\n";
        $html .= "    <label class='form-label'>{$label}</label>\n";

        switch ($type) {
            case 'text':
                $html .= "    <input type='text' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
            case 'longtext':
                $html .= "    <textarea class='form-control' name='{$name}' rows='5' {$required}>{$value}</textarea>\n";
                break;
            case 'email':
                $html .= "    <input type='email' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
            case 'url':
                $html .= "    <input type='url' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
            case 'integer':
                $html .= "    <input type='number' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
            case 'decimal':
                $html .= "    <input type='number' step='0.01' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
            case 'boolean':
                $html .= "    <input type='checkbox' class='form-check-input' name='{$name}' value='1' " . ($action === 'edit' ? "<?= \$item['{$name}'] ? 'checked' : '' ?>" : '') . ">\n";
                break;
            case 'date':
                $html .= "    <input type='date' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
            case 'image':
                $html .= "    <input type='file' class='form-control' name='{$name}' accept='image/*'>\n";
                if ($action === 'edit') {
                    $html .= "    <?php if (\$item['{$name}']): ?><img src='<?= \$item['{$name}'] ?>' width='100' class='mt-2'><?php endif; ?>\n";
                }
                break;
            default:
                $html .= "    <input type='text' class='form-control' name='{$name}' value='{$value}' {$required}>\n";
                break;
        }

        $html .= "</div>\n";
    }
    return $html;
}

function generateAdminViewTemplate($data) {
    return "<?php /* Шаблон просмотра будет сгенерирован */ ?>";
}

function generateFrontendIndexTemplate($data) {
    return "<?php /* Фронтенд шаблон списка будет сгенерирован */ ?>";
}

function generateFrontendViewTemplate($data) {
    return "<?php /* Фронтенд шаблон просмотра будет сгенерирован */ ?>";
}

function generateFrontendSearchTemplate($data) {
    return "<?php /* Фронтенд шаблон поиска будет сгенерирован */ ?>";
}

function updateAdminMenu($data) {
    // Обновляем меню админки
}

?>
<!DOCTYPE html>
<html lang='ru'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Конструктор модулей - АкваСбор CMS</title>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css' rel='stylesheet'>
    <link href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css' rel='stylesheet'>
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }
        body { background: #f8f9fa; }
        .hero { background: var(--primary-gradient); color: white; padding: 3rem 0; }
        .feature-card { transition: transform 0.3s; }
        .feature-card:hover { transform: translateY(-5px); }
        .field-row { border: 1px solid #dee2e6; border-radius: 8px; padding: 1rem; margin-bottom: 1rem; background: white; }
    </style>
</head>
<body>
    <!-- Заголовок -->
    <div class='hero text-center'>
        <div class='container'>
            <h1 class='display-4 fw-bold mb-3'>
                <i class='bi bi-gear-wide-connected me-3'></i>
                Конструктор модулей
            </h1>
            <p class='lead'>Создавайте модули без программирования!</p>
        </div>
    </div>

    <div class='container mt-5'>
        <!-- Сообщения -->
        <?php if ($success): ?>
            <?php foreach ($success as $msg): ?>
                <div class='alert alert-success alert-dismissible'>
                    <i class='bi bi-check-circle me-2'></i><?= htmlspecialchars($msg) ?>
                    <button type='button' class='btn-close' data-bs-dismiss='alert'></button>
                </div>
            <?php endforeach; ?>
        <?php endif; ?>

        <?php if ($errors): ?>
            <?php foreach ($errors as $error): ?>
                <div class='alert alert-danger alert-dismissible'>
                    <i class='bi bi-exclamation-triangle me-2'></i><?= htmlspecialchars($error) ?>
                    <button type='button' class='btn-close' data-bs-dismiss='alert'></button>
                </div>
            <?php endforeach; ?>
        <?php endif; ?>

        <div class='row'>
            <!-- Форма создания модуля -->
            <div class='col-lg-8'>
                <div class='card shadow-sm'>
                    <div class='card-header bg-primary text-white'>
                        <h4 class='mb-0'>
                            <i class='bi bi-plus-circle me-2'></i>
                            Создать новый модуль
                        </h4>
                    </div>
                    <div class='card-body'>
                        <form method='post' id='moduleForm'>
                            <!-- Основная информация -->
                            <div class='row g-3 mb-4'>
                                <div class='col-md-6'>
                                    <label class='form-label fw-bold'>Название модуля *</label>
                                    <input type='text' class='form-control' name='module_name' required
                                           placeholder='Новости'>
                                    <div class='form-text'>Будет отображаться в админ-панели</div>
                                </div>

                                <div class='col-md-6'>
                                    <label class='form-label fw-bold'>Имя таблицы *</label>
                                    <input type='text' class='form-control' name='table_name' required
                                           placeholder='news' pattern='[a-z_]+'>
                                    <div class='form-text'>Только латинские буквы и подчеркивания</div>
                                </div>

                                <div class='col-12'>
                                    <label class='form-label fw-bold'>Описание</label>
                                    <textarea class='form-control' name='description' rows='2'
                                              placeholder='Система управления новостями и статьями'></textarea>
                                </div>

                                <div class='col-md-6'>
                                    <label class='form-label fw-bold'>Иконка</label>
                                    <select class='form-select' name='icon'>
                                        <option value='bi-newspaper'>📰 Новости</option>
                                        <option value='bi-people'>👥 Пользователи</option>
                                        <option value='bi-image'>🖼️ Галерея</option>
                                        <option value='bi-chat'>💬 Отзывы</option>
                                        <option value='bi-calendar'>📅 События</option>
                                        <option value='bi-bookmark'>🔖 Закладки</option>
                                        <option value='bi-tag'>🏷️ Теги</option>
                                        <option value='bi-file-text'>📄 Документы</option>
                                    </select>
                                </div>
                            </div>

                            <!-- Поля модуля -->
                            <div class='mb-4'>
                                <div class='d-flex justify-content-between align-items-center mb-3'>
                                    <h5 class='fw-bold'>
                                        <i class='bi bi-list-ul me-2'></i>
                                        Поля модуля
                                    </h5>
                                    <button type='button' class='btn btn-success btn-sm' onclick='addField()'>
                                        <i class='bi bi-plus me-1'></i>Добавить поле
                                    </button>
                                </div>

                                <div id='fields-container'>
                                    <!-- Поля будут добавляться динамически -->
                                </div>
                            </div>

                            <!-- Функции модуля -->
                            <div class='mb-4'>
                                <h5 class='fw-bold mb-3'>
                                    <i class='bi bi-toggles me-2'></i>
                                    Функции модуля
                                </h5>
                                <div class='row g-3'>
                                    <div class='col-md-4'>
                                        <div class='form-check'>
                                            <input class='form-check-input' type='checkbox' name='features[]' value='search' id='feature_search' checked>
                                            <label class='form-check-label' for='feature_search'>Поиск</label>
                                        </div>
                                    </div>
                                    <div class='col-md-4'>
                                        <div class='form-check'>
                                            <input class='form-check-input' type='checkbox' name='features[]' value='pagination' id='feature_pagination' checked>
                                            <label class='form-check-label' for='feature_pagination'>Пагинация</label>
                                        </div>
                                    </div>
                                    <div class='col-md-4'>
                                        <div class='form-check'>
                                            <input class='form-check-input' type='checkbox' name='features[]' value='export' id='feature_export'>
                                            <label class='form-check-label' for='feature_export'>Экспорт</label>
                                        </div>
                                    </div>
                                    <div class='col-md-4'>
                                        <div class='form-check'>
                                            <input class='form-check-input' type='checkbox' name='features[]' value='import' id='feature_import'>
                                            <label class='form-check-label' for='feature_import'>Импорт</label>
                                        </div>
                                    </div>
                                    <div class='col-md-4'>
                                        <div class='form-check'>
                                            <input class='form-check-input' type='checkbox' name='features[]' value='bulk_actions' id='feature_bulk' checked>
                                            <label class='form-check-label' for='feature_bulk'>Групповые операции</label>
                                        </div>
                                    </div>
                                    <div class='col-md-4'>
                                        <div class='form-check'>
                                            <input class='form-check-input' type='checkbox' name='features[]' value='frontend' id='feature_frontend' checked>
                                            <label class='form-check-label' for='feature_frontend'>Фронтенд</label>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class='text-center'>
                                <button type='submit' name='create_module' class='btn btn-success btn-lg px-5'>
                                    <i class='bi bi-magic me-2'></i>
                                    Создать модуль
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Справка -->
            <div class='col-lg-4'>
                <div class='card shadow-sm mb-4'>
                    <div class='card-header bg-info text-white'>
                        <h5 class='mb-0'>
                            <i class='bi bi-lightbulb me-2'></i>
                            Как это работает?
                        </h5>
                    </div>
                    <div class='card-body'>
                        <ol class='mb-0'>
                            <li class='mb-2'>Укажите название и описание модуля</li>
                            <li class='mb-2'>Добавьте поля (название, email, описание и т.д.)</li>
                            <li class='mb-2'>Выберите нужные функции</li>
                            <li class='mb-2'>Нажмите "Создать модуль"</li>
                            <li class='mb-0'>Готово! Модуль появится в админке и на сайте</li>
                        </ol>
                    </div>
                </div>

                <div class='card shadow-sm'>
                    <div class='card-header bg-warning text-dark'>
                        <h5 class='mb-0'>
                            <i class='bi bi-star me-2'></i>
                            Примеры модулей
                        </h5>
                    </div>
                    <div class='card-body'>
                        <div class='mb-3'>
                            <strong>📰 Новости</strong><br>
                            <small>Поля: заголовок, содержание, изображение, дата</small>
                        </div>
                        <div class='mb-3'>
                            <strong>🖼️ Галерея</strong><br>
                            <small>Поля: название, изображение, описание</small>
                        </div>
                        <div class='mb-3'>
                            <strong>👥 Команда</strong><br>
                            <small>Поля: имя, должность, фото, биография</small>
                        </div>
                        <div class='mb-0'>
                            <strong>📅 События</strong><br>
                            <small>Поля: название, дата, место, описание</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src='https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js'></script>
    <script>
        let fieldCounter = 0;

        function addField() {
            fieldCounter++;
            const container = document.getElementById('fields-container');

            const fieldHtml = `
                <div class="field-row" id="field-${fieldCounter}">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Название поля</label>
                            <input type="text" class="form-control" name="fields[${fieldCounter}][name]" 
                                   placeholder="title" pattern="[a-z_]+" required>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Метка</label>
                            <input type="text" class="form-control" name="fields[${fieldCounter}][label]" 
                                   placeholder="Заголовок" required>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Тип</label>
                            <select class="form-select" name="fields[${fieldCounter}][type]" required>
                                <option value="string">Текст</option>
                                <option value="text">Текстовое поле</option>
                                <option value="longtext">Длинный текст</option>
                                <option value="integer">Число</option>
                                <option value="decimal">Десятичное</option>
                                <option value="boolean">Да/Нет</option>
                                <option value="date">Дата</option>
                                <option value="datetime">Дата и время</option>
                                <option value="email">Email</option>
                                <option value="url">URL</option>
                                <option value="image">Изображение</option>
                                <option value="json">JSON</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Длина</label>
                            <input type="text" class="form-control" name="fields[${fieldCounter}][length]" 
                                   placeholder="255">
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">Обяз.</label>
                            <input type="checkbox" class="form-check-input" name="fields[${fieldCounter}][required]" value="1">
                        </div>
                        <div class="col-md-1">
                            <label class="form-label">&nbsp;</label>
                            <button type="button" class="btn btn-danger btn-sm w-100" onclick="removeField(${fieldCounter})">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            `;

            container.insertAdjacentHTML('beforeend', fieldHtml);
        }

        function removeField(id) {
            document.getElementById(`field-${id}`).remove();
        }

        // Добавляем первое поле автоматически
        document.addEventListener('DOMContentLoaded', function() {
            addField();
        });

        // Автоматическое создание имени таблицы из названия модуля
        document.querySelector('input[name="module_name"]').addEventListener('input', function() {
            const tableName = this.value
                .toLowerCase()
                .replace(/[^а-яё\w\s]/gi, '')
                .replace(/\s+/g, '_')
                .replace(/ё/g, 'e')
                .replace(/[а-я]/g, function(char) {
                    const ru = 'абвгдежзийклмнопрстуфхцчшщъыьэюя';
                    const en = 'abvgdezhzijklmnoprstufhcchshshhyeyuya';
                    return en[ru.indexOf(char)] || char;
                });

            document.querySelector('input[name="table_name"]').value = tableName;
        });
    </script>
</body>
</html>
